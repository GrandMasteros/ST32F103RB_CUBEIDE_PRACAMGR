
STM32_NUCLEO_mgr_free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006430  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08006540  08006540  00016540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066d0  080066d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066d4  080066d4  000166d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080066d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022b4  20000074  0800674c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002328  0800674c  00022328  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b8b  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036bb  00000000  00000000  00039c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003dc4  00000000  00000000  0003fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001624a  00000000  00000000  00043854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000992ef  00000000  00000000  00059a9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f2d8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b1c  00000000  00000000  000f2de0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	08006528 	.word	0x08006528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	08006528 	.word	0x08006528

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fcd0 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f82c 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 fa0a 	bl	8000574 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f940 	bl	80003e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8f8 	bl	8000358 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000168:	f000 f87a 	bl	8000260 <MX_ADC1_Init>
  MX_ADC2_Init();
 800016c:	f000 f8b6 	bl	80002dc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f003 f8b0 	bl	80032d4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of USART_Task */
  USART_TaskHandle = osThreadNew(USART_Process, NULL, &USART_Task_attributes);
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <main+0x4c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x50>)
 800017a:	f003 f911 	bl	80033a0 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Task */
  GPIO_TaskHandle = osThreadNew(GPIO_Process, NULL, &GPIO_Task_attributes);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	2100      	movs	r1, #0
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x5c>)
 800018a:	f003 f909 	bl	80033a0 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <main+0x60>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f003 f8d0 	bl	8003338 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	e7fe      	b.n	8000198 <main+0x48>
 800019a:	bf00      	nop
 800019c:	080065d8 	.word	0x080065d8
 80001a0:	0800067d 	.word	0x0800067d
 80001a4:	20002248 	.word	0x20002248
 80001a8:	080065fc 	.word	0x080065fc
 80001ac:	080006a9 	.word	0x080006a9
 80001b0:	20002244 	.word	0x20002244

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	; 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f005 fd6a 	bl	8005c9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e4:	2302      	movs	r3, #2
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ec:	2310      	movs	r3, #16
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f4:	2300      	movs	r3, #0
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f001 fbce 	bl	80019a4 <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800020e:	f000 fa63 	bl	80006d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fe38 	bl	8001ea4 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800023a:	f000 fa4d 	bl	80006d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800023e:	2302      	movs	r3, #2
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fff5 	bl	8002238 <HAL_RCCEx_PeriphCLKConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000254:	f000 fa40 	bl	80006d8 <Error_Handler>
  }
}
 8000258:	bf00      	nop
 800025a:	3750      	adds	r7, #80	; 0x50
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <MX_ADC1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_ADC1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_ADC1_Init+0x74>)
 800028a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000298:	2201      	movs	r2, #1
 800029a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC1_Init+0x74>)
 800029e:	f000 fc5d 	bl	8000b5c <HAL_ADC_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 fa16 	bl	80006d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ac:	230a      	movs	r3, #10
 80002ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_ADC1_Init+0x74>)
 80002be:	f000 fed9 	bl	8001074 <HAL_ADC_ConfigChannel>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c8:	f000 fa06 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200021d4 	.word	0x200021d4
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC2_Init+0x74>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	; (8000354 <MX_ADC2_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_ADC2_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC2_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_ADC2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_ADC2_Init+0x74>)
 8000306:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_ADC2_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_ADC2_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_ADC2_Init+0x74>)
 800031a:	f000 fc1f 	bl	8000b5c <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f9d8 	bl	80006d8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000328:	230b      	movs	r3, #11
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_ADC2_Init+0x74>)
 800033a:	f000 fe9b 	bl	8001074 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000344:	f000 f9c8 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	200021a4 	.word	0x200021a4
 8000354:	40012800 	.word	0x40012800

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio;
  gpio.Mode = GPIO_MODE_AF_PP;
 800035e:	2302      	movs	r3, #2
 8000360:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_9;
 8000362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000366:	603b      	str	r3, [r7, #0]
  gpio.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &gpio);
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <MX_USART1_UART_Init+0x80>)
 8000376:	f001 f957 	bl	8001628 <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_AF_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_10;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &gpio);
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <MX_USART1_UART_Init+0x80>)
 800038a:	f001 f94d 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_USART1_UART_Init+0x84>)
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_USART1_UART_Init+0x88>)
 8000392:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART1_UART_Init+0x84>)
 8000396:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800039a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_USART1_UART_Init+0x84>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003b0:	220c      	movs	r2, #12
 80003b2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c0:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003c2:	f002 fafd 	bl	80029c0 <HAL_UART_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80003cc:	f000 f984 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010800 	.word	0x40010800
 80003dc:	20002204 	.word	0x20002204
 80003e0:	40013800 	.word	0x40013800

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <MX_USART2_UART_Init+0x50>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800041c:	f002 fad0 	bl	80029c0 <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000426:	f000 f957 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000224c 	.word	0x2000224c
 8000434:	40004400 	.word	0x40004400

08000438 <USART_Process_Data>:

static void USART_Process_Data(const char *data)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(strncmp(data, "left", 4) == 0)
 8000440:	2204      	movs	r2, #4
 8000442:	4942      	ldr	r1, [pc, #264]	; (800054c <USART_Process_Data+0x114>)
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f005 fde7 	bl	8006018 <strncmp>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d111      	bne.n	8000474 <USART_Process_Data+0x3c>
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2102      	movs	r1, #2
 8000454:	483e      	ldr	r0, [pc, #248]	; (8000550 <USART_Process_Data+0x118>)
 8000456:	f001 fa6b 	bl	8001930 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2101      	movs	r1, #1
 800045e:	483c      	ldr	r0, [pc, #240]	; (8000550 <USART_Process_Data+0x118>)
 8000460:	f001 fa66 	bl	8001930 <HAL_GPIO_WritePin>
    vTaskDelay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f003 ffa3 	bl	80043b0 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2101      	movs	r1, #1
 800046e:	4838      	ldr	r0, [pc, #224]	; (8000550 <USART_Process_Data+0x118>)
 8000470:	f001 fa5e 	bl	8001930 <HAL_GPIO_WritePin>
  }
  if(strncmp(data, "righ", 4) == 0)
 8000474:	2204      	movs	r2, #4
 8000476:	4937      	ldr	r1, [pc, #220]	; (8000554 <USART_Process_Data+0x11c>)
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f005 fdcd 	bl	8006018 <strncmp>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <USART_Process_Data+0x70>
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2102      	movs	r1, #2
 8000488:	4831      	ldr	r0, [pc, #196]	; (8000550 <USART_Process_Data+0x118>)
 800048a:	f001 fa51 	bl	8001930 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	482f      	ldr	r0, [pc, #188]	; (8000550 <USART_Process_Data+0x118>)
 8000494:	f001 fa4c 	bl	8001930 <HAL_GPIO_WritePin>
    vTaskDelay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f003 ff89 	bl	80043b0 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	482b      	ldr	r0, [pc, #172]	; (8000550 <USART_Process_Data+0x118>)
 80004a4:	f001 fa44 	bl	8001930 <HAL_GPIO_WritePin>
  }
  if(strncmp(data, "meas", 4) == 0)
 80004a8:	2204      	movs	r2, #4
 80004aa:	492b      	ldr	r1, [pc, #172]	; (8000558 <USART_Process_Data+0x120>)
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f005 fdb3 	bl	8006018 <strncmp>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d117      	bne.n	80004e8 <USART_Process_Data+0xb0>
  {
    HAL_ADC_Start(&hadc1);
 80004b8:	4828      	ldr	r0, [pc, #160]	; (800055c <USART_Process_Data+0x124>)
 80004ba:	f000 fc27 	bl	8000d0c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004be:	f04f 31ff 	mov.w	r1, #4294967295
 80004c2:	4826      	ldr	r0, [pc, #152]	; (800055c <USART_Process_Data+0x124>)
 80004c4:	f000 fcd0 	bl	8000e68 <HAL_ADC_PollForConversion>
    sprintf(RingBufferData_Tx, "Measure: %lx", HAL_ADC_GetValue(&hadc1));
 80004c8:	4824      	ldr	r0, [pc, #144]	; (800055c <USART_Process_Data+0x124>)
 80004ca:	f000 fdc7 	bl	800105c <HAL_ADC_GetValue>
 80004ce:	4603      	mov	r3, r0
 80004d0:	461a      	mov	r2, r3
 80004d2:	4923      	ldr	r1, [pc, #140]	; (8000560 <USART_Process_Data+0x128>)
 80004d4:	4823      	ldr	r0, [pc, #140]	; (8000564 <USART_Process_Data+0x12c>)
 80004d6:	f005 fd7f 	bl	8005fd8 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *) RingBufferData_Tx, 22, HAL_MAX_DELAY);
 80004da:	f04f 33ff 	mov.w	r3, #4294967295
 80004de:	2216      	movs	r2, #22
 80004e0:	4920      	ldr	r1, [pc, #128]	; (8000564 <USART_Process_Data+0x12c>)
 80004e2:	4821      	ldr	r0, [pc, #132]	; (8000568 <USART_Process_Data+0x130>)
 80004e4:	f002 fab9 	bl	8002a5a <HAL_UART_Transmit>
  }
  if(strncmp(data, "te_1", 4) == 0)
 80004e8:	2204      	movs	r2, #4
 80004ea:	4920      	ldr	r1, [pc, #128]	; (800056c <USART_Process_Data+0x134>)
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f005 fd93 	bl	8006018 <strncmp>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d124      	bne.n	8000542 <USART_Process_Data+0x10a>
  {
    for (int i=0; i < 100; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	e01e      	b.n	800053c <USART_Process_Data+0x104>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 80004fe:	2201      	movs	r2, #1
 8000500:	2102      	movs	r1, #2
 8000502:	4813      	ldr	r0, [pc, #76]	; (8000550 <USART_Process_Data+0x118>)
 8000504:	f001 fa14 	bl	8001930 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000508:	2201      	movs	r2, #1
 800050a:	2101      	movs	r1, #1
 800050c:	4810      	ldr	r0, [pc, #64]	; (8000550 <USART_Process_Data+0x118>)
 800050e:	f001 fa0f 	bl	8001930 <HAL_GPIO_WritePin>
      vTaskDelay(1);
 8000512:	2001      	movs	r0, #1
 8000514:	f003 ff4c 	bl	80043b0 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <USART_Process_Data+0x118>)
 800051e:	f001 fa07 	bl	8001930 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, (uint8_t *) "current: x, voltage: y", 22, 1000);
 8000522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000526:	2216      	movs	r2, #22
 8000528:	4911      	ldr	r1, [pc, #68]	; (8000570 <USART_Process_Data+0x138>)
 800052a:	480f      	ldr	r0, [pc, #60]	; (8000568 <USART_Process_Data+0x130>)
 800052c:	f002 fa95 	bl	8002a5a <HAL_UART_Transmit>
      vTaskDelay(100);
 8000530:	2064      	movs	r0, #100	; 0x64
 8000532:	f003 ff3d 	bl	80043b0 <vTaskDelay>
    for (int i=0; i < 100; i++)
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	3301      	adds	r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	2b63      	cmp	r3, #99	; 0x63
 8000540:	dddd      	ble.n	80004fe <USART_Process_Data+0xc6>
    }
  }
}
 8000542:	bf00      	nop
 8000544:	3710      	adds	r7, #16
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	08006558 	.word	0x08006558
 8000550:	40010c00 	.word	0x40010c00
 8000554:	08006560 	.word	0x08006560
 8000558:	08006568 	.word	0x08006568
 800055c:	200021d4 	.word	0x200021d4
 8000560:	08006570 	.word	0x08006570
 8000564:	20000490 	.word	0x20000490
 8000568:	20002204 	.word	0x20002204
 800056c:	08006580 	.word	0x08006580
 8000570:	08006588 	.word	0x08006588

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b088      	sub	sp, #32
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	f107 0310 	add.w	r3, r7, #16
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
 8000582:	605a      	str	r2, [r3, #4]
 8000584:	609a      	str	r2, [r3, #8]
 8000586:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000588:	4b37      	ldr	r3, [pc, #220]	; (8000668 <MX_GPIO_Init+0xf4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a36      	ldr	r2, [pc, #216]	; (8000668 <MX_GPIO_Init+0xf4>)
 800058e:	f043 0310 	orr.w	r3, r3, #16
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b34      	ldr	r3, [pc, #208]	; (8000668 <MX_GPIO_Init+0xf4>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0310 	and.w	r3, r3, #16
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005a0:	4b31      	ldr	r3, [pc, #196]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a30      	ldr	r2, [pc, #192]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b2e      	ldr	r3, [pc, #184]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0320 	and.w	r3, r3, #32
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b2b      	ldr	r3, [pc, #172]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a2a      	ldr	r2, [pc, #168]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a24      	ldr	r2, [pc, #144]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005d6:	f043 0308 	orr.w	r3, r3, #8
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <MX_GPIO_Init+0xf4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0308 	and.w	r3, r3, #8
 80005e4:	603b      	str	r3, [r7, #0]
 80005e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2120      	movs	r1, #32
 80005ec:	481f      	ldr	r0, [pc, #124]	; (800066c <MX_GPIO_Init+0xf8>)
 80005ee:	f001 f99f 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	2107      	movs	r1, #7
 80005f6:	481e      	ldr	r0, [pc, #120]	; (8000670 <MX_GPIO_Init+0xfc>)
 80005f8:	f001 f99a 	bl	8001930 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000602:	4b1c      	ldr	r3, [pc, #112]	; (8000674 <MX_GPIO_Init+0x100>)
 8000604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800060a:	f107 0310 	add.w	r3, r7, #16
 800060e:	4619      	mov	r1, r3
 8000610:	4819      	ldr	r0, [pc, #100]	; (8000678 <MX_GPIO_Init+0x104>)
 8000612:	f001 f809 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000616:	2320      	movs	r3, #32
 8000618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061a:	2301      	movs	r3, #1
 800061c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2302      	movs	r3, #2
 8000624:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	4619      	mov	r1, r3
 800062c:	480f      	ldr	r0, [pc, #60]	; (800066c <MX_GPIO_Init+0xf8>)
 800062e:	f000 fffb 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000632:	2307      	movs	r3, #7
 8000634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2302      	movs	r3, #2
 8000640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 0310 	add.w	r3, r7, #16
 8000646:	4619      	mov	r1, r3
 8000648:	4809      	ldr	r0, [pc, #36]	; (8000670 <MX_GPIO_Init+0xfc>)
 800064a:	f000 ffed 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2105      	movs	r1, #5
 8000652:	2028      	movs	r0, #40	; 0x28
 8000654:	f000 ff47 	bl	80014e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000658:	2028      	movs	r0, #40	; 0x28
 800065a:	f000 ff60 	bl	800151e <HAL_NVIC_EnableIRQ>

}
 800065e:	bf00      	nop
 8000660:	3720      	adds	r7, #32
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	40010c00 	.word	0x40010c00
 8000674:	10110000 	.word	0x10110000
 8000678:	40011000 	.word	0x40011000

0800067c <USART_Process>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_USART_Process */
void USART_Process(void *argument)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 4, 100) == HAL_OK)
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	2204      	movs	r2, #4
 8000688:	4905      	ldr	r1, [pc, #20]	; (80006a0 <USART_Process+0x24>)
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <USART_Process+0x28>)
 800068c:	f002 fa77 	bl	8002b7e <HAL_UART_Receive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f6      	bne.n	8000684 <USART_Process+0x8>
    {
      USART_Process_Data(RingBufferData_Rx);
 8000696:	4802      	ldr	r0, [pc, #8]	; (80006a0 <USART_Process+0x24>)
 8000698:	f7ff fece 	bl	8000438 <USART_Process_Data>
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 4, 100) == HAL_OK)
 800069c:	e7f2      	b.n	8000684 <USART_Process+0x8>
 800069e:	bf00      	nop
 80006a0:	20000090 	.word	0x20000090
 80006a4:	20002204 	.word	0x20002204

080006a8 <GPIO_Process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPIO_Process */
void GPIO_Process(void *argument)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_Process */
  /* Infinite loop */
  for(;;)
 80006b0:	e7fe      	b.n	80006b0 <GPIO_Process+0x8>
	...

080006b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d101      	bne.n	80006ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006c6:	f000 fa2d 	bl	8000b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ca:	bf00      	nop
 80006cc:	3708      	adds	r7, #8
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40000800 	.word	0x40000800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b18      	ldr	r3, [pc, #96]	; (800074c <HAL_MspInit+0x68>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a17      	ldr	r2, [pc, #92]	; (800074c <HAL_MspInit+0x68>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b15      	ldr	r3, [pc, #84]	; (800074c <HAL_MspInit+0x68>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b12      	ldr	r3, [pc, #72]	; (800074c <HAL_MspInit+0x68>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a11      	ldr	r2, [pc, #68]	; (800074c <HAL_MspInit+0x68>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0f      	ldr	r3, [pc, #60]	; (800074c <HAL_MspInit+0x68>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	210f      	movs	r1, #15
 800071e:	f06f 0001 	mvn.w	r0, #1
 8000722:	f000 fee0 	bl	80014e6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_MspInit+0x6c>)
 8000728:	685b      	ldr	r3, [r3, #4]
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000732:	60fb      	str	r3, [r7, #12]
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	4a04      	ldr	r2, [pc, #16]	; (8000750 <HAL_MspInit+0x6c>)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000742:	bf00      	nop
 8000744:	3710      	adds	r7, #16
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40021000 	.word	0x40021000
 8000750:	40010000 	.word	0x40010000

08000754 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0318 	add.w	r3, r7, #24
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a28      	ldr	r2, [pc, #160]	; (8000810 <HAL_ADC_MspInit+0xbc>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d122      	bne.n	80007ba <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000774:	4b27      	ldr	r3, [pc, #156]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 800077a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b24      	ldr	r3, [pc, #144]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	4b21      	ldr	r3, [pc, #132]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a20      	ldr	r2, [pc, #128]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a8:	2303      	movs	r3, #3
 80007aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 0318 	add.w	r3, r7, #24
 80007b0:	4619      	mov	r1, r3
 80007b2:	4819      	ldr	r0, [pc, #100]	; (8000818 <HAL_ADC_MspInit+0xc4>)
 80007b4:	f000 ff38 	bl	8001628 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80007b8:	e026      	b.n	8000808 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <HAL_ADC_MspInit+0xc8>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d121      	bne.n	8000808 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007dc:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a0c      	ldr	r2, [pc, #48]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_ADC_MspInit+0xc0>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0310 	and.w	r3, r3, #16
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007f4:	2302      	movs	r3, #2
 80007f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 0318 	add.w	r3, r7, #24
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_ADC_MspInit+0xc4>)
 8000804:	f000 ff10 	bl	8001628 <HAL_GPIO_Init>
}
 8000808:	bf00      	nop
 800080a:	3728      	adds	r7, #40	; 0x28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40012400 	.word	0x40012400
 8000814:	40021000 	.word	0x40021000
 8000818:	40011000 	.word	0x40011000
 800081c:	40012800 	.word	0x40012800

08000820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08a      	sub	sp, #40	; 0x28
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000828:	f107 0318 	add.w	r3, r7, #24
 800082c:	2200      	movs	r2, #0
 800082e:	601a      	str	r2, [r3, #0]
 8000830:	605a      	str	r2, [r3, #4]
 8000832:	609a      	str	r2, [r3, #8]
 8000834:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a35      	ldr	r2, [pc, #212]	; (8000910 <HAL_UART_MspInit+0xf0>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d13a      	bne.n	80008b6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000840:	4b34      	ldr	r3, [pc, #208]	; (8000914 <HAL_UART_MspInit+0xf4>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a33      	ldr	r2, [pc, #204]	; (8000914 <HAL_UART_MspInit+0xf4>)
 8000846:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084a:	6193      	str	r3, [r2, #24]
 800084c:	4b31      	ldr	r3, [pc, #196]	; (8000914 <HAL_UART_MspInit+0xf4>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <HAL_UART_MspInit+0xf4>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a2d      	ldr	r2, [pc, #180]	; (8000914 <HAL_UART_MspInit+0xf4>)
 800085e:	f043 0304 	orr.w	r3, r3, #4
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <HAL_UART_MspInit+0xf4>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0304 	and.w	r3, r3, #4
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000870:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800087a:	2303      	movs	r3, #3
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087e:	f107 0318 	add.w	r3, r7, #24
 8000882:	4619      	mov	r1, r3
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <HAL_UART_MspInit+0xf8>)
 8000886:	f000 fecf 	bl	8001628 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800088a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0318 	add.w	r3, r7, #24
 800089c:	4619      	mov	r1, r3
 800089e:	481e      	ldr	r0, [pc, #120]	; (8000918 <HAL_UART_MspInit+0xf8>)
 80008a0:	f000 fec2 	bl	8001628 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2105      	movs	r1, #5
 80008a8:	2025      	movs	r0, #37	; 0x25
 80008aa:	f000 fe1c 	bl	80014e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008ae:	2025      	movs	r0, #37	; 0x25
 80008b0:	f000 fe35 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008b4:	e028      	b.n	8000908 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a18      	ldr	r2, [pc, #96]	; (800091c <HAL_UART_MspInit+0xfc>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d123      	bne.n	8000908 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b11      	ldr	r3, [pc, #68]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <HAL_UART_MspInit+0xf4>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f0:	230c      	movs	r3, #12
 80008f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2302      	movs	r3, #2
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	4619      	mov	r1, r3
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <HAL_UART_MspInit+0xf8>)
 8000904:	f000 fe90 	bl	8001628 <HAL_GPIO_Init>
}
 8000908:	bf00      	nop
 800090a:	3728      	adds	r7, #40	; 0x28
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	40013800 	.word	0x40013800
 8000914:	40021000 	.word	0x40021000
 8000918:	40010800 	.word	0x40010800
 800091c:	40004400 	.word	0x40004400

08000920 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000930:	2200      	movs	r2, #0
 8000932:	6879      	ldr	r1, [r7, #4]
 8000934:	201e      	movs	r0, #30
 8000936:	f000 fdd6 	bl	80014e6 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800093a:	201e      	movs	r0, #30
 800093c:	f000 fdef 	bl	800151e <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_InitTick+0xa0>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <HAL_InitTick+0xa0>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	61d3      	str	r3, [r2, #28]
 800094c:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xa0>)
 800094e:	69db      	ldr	r3, [r3, #28]
 8000950:	f003 0304 	and.w	r3, r3, #4
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000958:	f107 0210 	add.w	r2, r7, #16
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4611      	mov	r1, r2
 8000962:	4618      	mov	r0, r3
 8000964:	f001 fc1a 	bl	800219c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000968:	f001 fbf0 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800096c:	4603      	mov	r3, r0
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000974:	4a13      	ldr	r2, [pc, #76]	; (80009c4 <HAL_InitTick+0xa4>)
 8000976:	fba2 2303 	umull	r2, r3, r2, r3
 800097a:	0c9b      	lsrs	r3, r3, #18
 800097c:	3b01      	subs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000980:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_InitTick+0xa8>)
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <HAL_InitTick+0xac>)
 8000984:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000986:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <HAL_InitTick+0xa8>)
 8000988:	f240 32e7 	movw	r2, #999	; 0x3e7
 800098c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800098e:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <HAL_InitTick+0xa8>)
 8000990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000992:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <HAL_InitTick+0xa8>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <HAL_InitTick+0xa8>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <HAL_InitTick+0xa8>)
 80009a2:	f001 fdc3 	bl	800252c <HAL_TIM_Base_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d104      	bne.n	80009b6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80009ac:	4806      	ldr	r0, [pc, #24]	; (80009c8 <HAL_InitTick+0xa8>)
 80009ae:	f001 fe15 	bl	80025dc <HAL_TIM_Base_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	e000      	b.n	80009b8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	3730      	adds	r7, #48	; 0x30
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	40021000 	.word	0x40021000
 80009c4:	431bde83 	.word	0x431bde83
 80009c8:	2000228c 	.word	0x2000228c
 80009cc:	40000800 	.word	0x40000800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bc80      	pop	{r7}
 80009f8:	4770      	bx	lr
	...

080009fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <TIM4_IRQHandler+0x10>)
 8000a02:	f001 fe3d 	bl	8002680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000228c 	.word	0x2000228c

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	f002 f951 	bl	8002cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20002204 	.word	0x20002204

08000a24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000a2c:	f000 ff98 	bl	8001960 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <_sbrk>:
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	4a14      	ldr	r2, [pc, #80]	; (8000a90 <_sbrk+0x5c>)
 8000a3e:	4b15      	ldr	r3, [pc, #84]	; (8000a94 <_sbrk+0x60>)
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <_sbrk+0x64>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d102      	bne.n	8000a56 <_sbrk+0x22>
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <_sbrk+0x64>)
 8000a52:	4a12      	ldr	r2, [pc, #72]	; (8000a9c <_sbrk+0x68>)
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <_sbrk+0x64>)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4413      	add	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d207      	bcs.n	8000a74 <_sbrk+0x40>
 8000a64:	f005 f8e2 	bl	8005c2c <__errno>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	220c      	movs	r2, #12
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a72:	e009      	b.n	8000a88 <_sbrk+0x54>
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <_sbrk+0x64>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <_sbrk+0x64>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4413      	add	r3, r2
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <_sbrk+0x64>)
 8000a84:	6013      	str	r3, [r2, #0]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20005000 	.word	0x20005000
 8000a94:	00000400 	.word	0x00000400
 8000a98:	20000890 	.word	0x20000890
 8000a9c:	20002328 	.word	0x20002328

08000aa0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <Reset_Handler>:
 8000aac:	2100      	movs	r1, #0
 8000aae:	e003      	b.n	8000ab8 <LoopCopyDataInit>

08000ab0 <CopyDataInit>:
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <LoopFillZerobss+0x14>)
 8000ab2:	585b      	ldr	r3, [r3, r1]
 8000ab4:	5043      	str	r3, [r0, r1]
 8000ab6:	3104      	adds	r1, #4

08000ab8 <LoopCopyDataInit>:
 8000ab8:	480a      	ldr	r0, [pc, #40]	; (8000ae4 <LoopFillZerobss+0x18>)
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x1c>)
 8000abc:	1842      	adds	r2, r0, r1
 8000abe:	429a      	cmp	r2, r3
 8000ac0:	d3f6      	bcc.n	8000ab0 <CopyDataInit>
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopFillZerobss+0x20>)
 8000ac4:	e002      	b.n	8000acc <LoopFillZerobss>

08000ac6 <FillZerobss>:
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	f842 3b04 	str.w	r3, [r2], #4

08000acc <LoopFillZerobss>:
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <LoopFillZerobss+0x24>)
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d3f9      	bcc.n	8000ac6 <FillZerobss>
 8000ad2:	f7ff ffe5 	bl	8000aa0 <SystemInit>
 8000ad6:	f005 f8af 	bl	8005c38 <__libc_init_array>
 8000ada:	f7ff fb39 	bl	8000150 <main>
 8000ade:	4770      	bx	lr
 8000ae0:	080066d8 	.word	0x080066d8
 8000ae4:	20000000 	.word	0x20000000
 8000ae8:	20000074 	.word	0x20000074
 8000aec:	20000074 	.word	0x20000074
 8000af0:	20002328 	.word	0x20002328

08000af4 <ADC1_2_IRQHandler>:
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 fce1 	bl	80014d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff ff06 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fde6 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x1c>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_IncTick+0x20>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4413      	add	r3, r2
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x20>)
 8000b36:	6013      	str	r3, [r2, #0]
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr
 8000b40:	20000008 	.word	0x20000008
 8000b44:	200022d4 	.word	0x200022d4

08000b48 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b4c:	4b02      	ldr	r3, [pc, #8]	; (8000b58 <HAL_GetTick+0x10>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	200022d4 	.word	0x200022d4

08000b5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b64:	2300      	movs	r3, #0
 8000b66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b70:	2300      	movs	r3, #0
 8000b72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d101      	bne.n	8000b7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e0be      	b.n	8000cfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	689b      	ldr	r3, [r3, #8]
 8000b82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d109      	bne.n	8000ba0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdda 	bl	8000754 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000ba0:	6878      	ldr	r0, [r7, #4]
 8000ba2:	f000 fbb1 	bl	8001308 <ADC_ConversionStop_Disable>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	f003 0310 	and.w	r3, r3, #16
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	f040 8099 	bne.w	8000cea <HAL_ADC_Init+0x18e>
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8095 	bne.w	8000cea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bc8:	f023 0302 	bic.w	r3, r3, #2
 8000bcc:	f043 0202 	orr.w	r2, r3, #2
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000bdc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	7b1b      	ldrb	r3, [r3, #12]
 8000be2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000be4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bf4:	d003      	beq.n	8000bfe <HAL_ADC_Init+0xa2>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	689b      	ldr	r3, [r3, #8]
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d102      	bne.n	8000c04 <HAL_ADC_Init+0xa8>
 8000bfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c02:	e000      	b.n	8000c06 <HAL_ADC_Init+0xaa>
 8000c04:	2300      	movs	r3, #0
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7d1b      	ldrb	r3, [r3, #20]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d119      	bne.n	8000c48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	7b1b      	ldrb	r3, [r3, #12]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d109      	bne.n	8000c30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	3b01      	subs	r3, #1
 8000c22:	035a      	lsls	r2, r3, #13
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	e00b      	b.n	8000c48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c34:	f043 0220 	orr.w	r2, r3, #32
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b28      	ldr	r3, [pc, #160]	; (8000d04 <HAL_ADC_Init+0x1a8>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	6812      	ldr	r2, [r2, #0]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c78:	d003      	beq.n	8000c82 <HAL_ADC_Init+0x126>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d104      	bne.n	8000c8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	691b      	ldr	r3, [r3, #16]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	051b      	lsls	r3, r3, #20
 8000c8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	689a      	ldr	r2, [r3, #8]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_ADC_Init+0x1ac>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	68ba      	ldr	r2, [r7, #8]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d10b      	bne.n	8000cc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cba:	f023 0303 	bic.w	r3, r3, #3
 8000cbe:	f043 0201 	orr.w	r2, r3, #1
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000cc6:	e018      	b.n	8000cfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ccc:	f023 0312 	bic.w	r3, r3, #18
 8000cd0:	f043 0210 	orr.w	r2, r3, #16
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cdc:	f043 0201 	orr.w	r2, r3, #1
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ce8:	e007      	b.n	8000cfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cee:	f043 0210 	orr.w	r2, r3, #16
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3718      	adds	r7, #24
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	ffe1f7fd 	.word	0xffe1f7fd
 8000d08:	ff1f0efe 	.word	0xff1f0efe

08000d0c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d101      	bne.n	8000d26 <HAL_ADC_Start+0x1a>
 8000d22:	2302      	movs	r3, #2
 8000d24:	e098      	b.n	8000e58 <HAL_ADC_Start+0x14c>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f000 fa98 	bl	8001264 <ADC_Enable>
 8000d34:	4603      	mov	r3, r0
 8000d36:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000d38:	7bfb      	ldrb	r3, [r7, #15]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8087 	bne.w	8000e4e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d48:	f023 0301 	bic.w	r3, r3, #1
 8000d4c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a41      	ldr	r2, [pc, #260]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d105      	bne.n	8000d6a <HAL_ADC_Start+0x5e>
 8000d5e:	4b41      	ldr	r3, [pc, #260]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d115      	bne.n	8000d96 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d026      	beq.n	8000dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d94:	e01d      	b.n	8000dd2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4a2f      	ldr	r2, [pc, #188]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d004      	beq.n	8000db6 <HAL_ADC_Start+0xaa>
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a2b      	ldr	r2, [pc, #172]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d10d      	bne.n	8000dd2 <HAL_ADC_Start+0xc6>
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d007      	beq.n	8000dd2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d006      	beq.n	8000dec <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de2:	f023 0206 	bic.w	r2, r3, #6
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dea:	e002      	b.n	8000df2 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2200      	movs	r2, #0
 8000df6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f06f 0202 	mvn.w	r2, #2
 8000e02:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000e0e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000e12:	d113      	bne.n	8000e3c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e18:	4a11      	ldr	r2, [pc, #68]	; (8000e60 <HAL_ADC_Start+0x154>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d105      	bne.n	8000e2a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_ADC_Start+0x158>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d108      	bne.n	8000e3c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	e00c      	b.n	8000e56 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	e003      	b.n	8000e56 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3710      	adds	r7, #16
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	40012800 	.word	0x40012800
 8000e64:	40012400 	.word	0x40012400

08000e68 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b087      	sub	sp, #28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000e7e:	f7ff fe63 	bl	8000b48 <HAL_GetTick>
 8000e82:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d00b      	beq.n	8000eaa <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e96:	f043 0220 	orr.w	r2, r3, #32
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e0c8      	b.n	800103c <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d12a      	bne.n	8000f0e <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d123      	bne.n	8000f0e <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000ec6:	e01a      	b.n	8000efe <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ece:	d016      	beq.n	8000efe <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d007      	beq.n	8000ee6 <HAL_ADC_PollForConversion+0x7e>
 8000ed6:	f7ff fe37 	bl	8000b48 <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	683a      	ldr	r2, [r7, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d20b      	bcs.n	8000efe <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eea:	f043 0204 	orr.w	r2, r3, #4
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000efa:	2303      	movs	r3, #3
 8000efc:	e09e      	b.n	800103c <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f003 0302 	and.w	r3, r3, #2
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d0dd      	beq.n	8000ec8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000f0c:	e06c      	b.n	8000fe8 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_ADC_PollForConversion+0x1dc>)
 8000f10:	681c      	ldr	r4, [r3, #0]
 8000f12:	2002      	movs	r0, #2
 8000f14:	f001 fa46 	bl	80023a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6919      	ldr	r1, [r3, #16]
 8000f24:	4b48      	ldr	r3, [pc, #288]	; (8001048 <HAL_ADC_PollForConversion+0x1e0>)
 8000f26:	400b      	ands	r3, r1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d118      	bne.n	8000f5e <HAL_ADC_PollForConversion+0xf6>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68d9      	ldr	r1, [r3, #12]
 8000f32:	4b46      	ldr	r3, [pc, #280]	; (800104c <HAL_ADC_PollForConversion+0x1e4>)
 8000f34:	400b      	ands	r3, r1
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d111      	bne.n	8000f5e <HAL_ADC_PollForConversion+0xf6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	6919      	ldr	r1, [r3, #16]
 8000f40:	4b43      	ldr	r3, [pc, #268]	; (8001050 <HAL_ADC_PollForConversion+0x1e8>)
 8000f42:	400b      	ands	r3, r1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d108      	bne.n	8000f5a <HAL_ADC_PollForConversion+0xf2>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	68d9      	ldr	r1, [r3, #12]
 8000f4e:	4b41      	ldr	r3, [pc, #260]	; (8001054 <HAL_ADC_PollForConversion+0x1ec>)
 8000f50:	400b      	ands	r3, r1
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_PollForConversion+0xf2>
 8000f56:	2314      	movs	r3, #20
 8000f58:	e020      	b.n	8000f9c <HAL_ADC_PollForConversion+0x134>
 8000f5a:	2329      	movs	r3, #41	; 0x29
 8000f5c:	e01e      	b.n	8000f9c <HAL_ADC_PollForConversion+0x134>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6919      	ldr	r1, [r3, #16]
 8000f64:	4b3a      	ldr	r3, [pc, #232]	; (8001050 <HAL_ADC_PollForConversion+0x1e8>)
 8000f66:	400b      	ands	r3, r1
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d106      	bne.n	8000f7a <HAL_ADC_PollForConversion+0x112>
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68d9      	ldr	r1, [r3, #12]
 8000f72:	4b38      	ldr	r3, [pc, #224]	; (8001054 <HAL_ADC_PollForConversion+0x1ec>)
 8000f74:	400b      	ands	r3, r1
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00d      	beq.n	8000f96 <HAL_ADC_PollForConversion+0x12e>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6919      	ldr	r1, [r3, #16]
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <HAL_ADC_PollForConversion+0x1f0>)
 8000f82:	400b      	ands	r3, r1
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d108      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x132>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	68d9      	ldr	r1, [r3, #12]
 8000f8e:	4b32      	ldr	r3, [pc, #200]	; (8001058 <HAL_ADC_PollForConversion+0x1f0>)
 8000f90:	400b      	ands	r3, r1
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d101      	bne.n	8000f9a <HAL_ADC_PollForConversion+0x132>
 8000f96:	2354      	movs	r3, #84	; 0x54
 8000f98:	e000      	b.n	8000f9c <HAL_ADC_PollForConversion+0x134>
 8000f9a:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fa2:	e01d      	b.n	8000fe0 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000faa:	d016      	beq.n	8000fda <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d007      	beq.n	8000fc2 <HAL_ADC_PollForConversion+0x15a>
 8000fb2:	f7ff fdc9 	bl	8000b48 <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	1ad3      	subs	r3, r2, r3
 8000fbc:	683a      	ldr	r2, [r7, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d20b      	bcs.n	8000fda <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc6:	f043 0204 	orr.w	r2, r3, #4
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e030      	b.n	800103c <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d8dd      	bhi.n	8000fa4 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f06f 0212 	mvn.w	r2, #18
 8000ff0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ff6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001008:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800100c:	d115      	bne.n	800103a <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001012:	2b00      	cmp	r3, #0
 8001014:	d111      	bne.n	800103a <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001026:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d105      	bne.n	800103a <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001032:	f043 0201 	orr.w	r2, r3, #1
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	371c      	adds	r7, #28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd90      	pop	{r4, r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	24924924 	.word	0x24924924
 800104c:	00924924 	.word	0x00924924
 8001050:	12492492 	.word	0x12492492
 8001054:	00492492 	.word	0x00492492
 8001058:	00249249 	.word	0x00249249

0800105c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800106a:	4618      	mov	r0, r3
 800106c:	370c      	adds	r7, #12
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001082:	2300      	movs	r3, #0
 8001084:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800108c:	2b01      	cmp	r3, #1
 800108e:	d101      	bne.n	8001094 <HAL_ADC_ConfigChannel+0x20>
 8001090:	2302      	movs	r3, #2
 8001092:	e0dc      	b.n	800124e <HAL_ADC_ConfigChannel+0x1da>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2201      	movs	r2, #1
 8001098:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b06      	cmp	r3, #6
 80010a2:	d81c      	bhi.n	80010de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685a      	ldr	r2, [r3, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	3b05      	subs	r3, #5
 80010b6:	221f      	movs	r2, #31
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6818      	ldr	r0, [r3, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685a      	ldr	r2, [r3, #4]
 80010c8:	4613      	mov	r3, r2
 80010ca:	009b      	lsls	r3, r3, #2
 80010cc:	4413      	add	r3, r2
 80010ce:	3b05      	subs	r3, #5
 80010d0:	fa00 f203 	lsl.w	r2, r0, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	635a      	str	r2, [r3, #52]	; 0x34
 80010dc:	e03c      	b.n	8001158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2b0c      	cmp	r3, #12
 80010e4:	d81c      	bhi.n	8001120 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4613      	mov	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	3b23      	subs	r3, #35	; 0x23
 80010f8:	221f      	movs	r2, #31
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43db      	mvns	r3, r3
 8001100:	4019      	ands	r1, r3
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b23      	subs	r3, #35	; 0x23
 8001112:	fa00 f203 	lsl.w	r2, r0, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	430a      	orrs	r2, r1
 800111c:	631a      	str	r2, [r3, #48]	; 0x30
 800111e:	e01b      	b.n	8001158 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	4613      	mov	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4413      	add	r3, r2
 8001130:	3b41      	subs	r3, #65	; 0x41
 8001132:	221f      	movs	r2, #31
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	4019      	ands	r1, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	6818      	ldr	r0, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	3b41      	subs	r3, #65	; 0x41
 800114c:	fa00 f203 	lsl.w	r2, r0, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	430a      	orrs	r2, r1
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b09      	cmp	r3, #9
 800115e:	d91c      	bls.n	800119a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	68d9      	ldr	r1, [r3, #12]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4613      	mov	r3, r2
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	4413      	add	r3, r2
 8001170:	3b1e      	subs	r3, #30
 8001172:	2207      	movs	r2, #7
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	4019      	ands	r1, r3
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	6898      	ldr	r0, [r3, #8]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4613      	mov	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	4413      	add	r3, r2
 800118a:	3b1e      	subs	r3, #30
 800118c:	fa00 f203 	lsl.w	r2, r0, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	60da      	str	r2, [r3, #12]
 8001198:	e019      	b.n	80011ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	6919      	ldr	r1, [r3, #16]
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4613      	mov	r3, r2
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	4413      	add	r3, r2
 80011aa:	2207      	movs	r2, #7
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43db      	mvns	r3, r3
 80011b2:	4019      	ands	r1, r3
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	6898      	ldr	r0, [r3, #8]
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	fa00 f203 	lsl.w	r2, r0, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	430a      	orrs	r2, r1
 80011cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2b10      	cmp	r3, #16
 80011d4:	d003      	beq.n	80011de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011da:	2b11      	cmp	r3, #17
 80011dc:	d132      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a1d      	ldr	r2, [pc, #116]	; (8001258 <HAL_ADC_ConfigChannel+0x1e4>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d125      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d126      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001204:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b10      	cmp	r3, #16
 800120c:	d11a      	bne.n	8001244 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <HAL_ADC_ConfigChannel+0x1e8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a13      	ldr	r2, [pc, #76]	; (8001260 <HAL_ADC_ConfigChannel+0x1ec>)
 8001214:	fba2 2303 	umull	r2, r3, r2, r3
 8001218:	0c9a      	lsrs	r2, r3, #18
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001224:	e002      	b.n	800122c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	3b01      	subs	r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f9      	bne.n	8001226 <HAL_ADC_ConfigChannel+0x1b2>
 8001232:	e007      	b.n	8001244 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	f043 0220 	orr.w	r2, r3, #32
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2200      	movs	r2, #0
 8001248:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800124c:	7bfb      	ldrb	r3, [r7, #15]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40012400 	.word	0x40012400
 800125c:	20000000 	.word	0x20000000
 8001260:	431bde83 	.word	0x431bde83

08001264 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	2b01      	cmp	r3, #1
 8001280:	d039      	beq.n	80012f6 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	689a      	ldr	r2, [r3, #8]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <ADC_Enable+0x9c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a1b      	ldr	r2, [pc, #108]	; (8001304 <ADC_Enable+0xa0>)
 8001298:	fba2 2303 	umull	r2, r3, r2, r3
 800129c:	0c9b      	lsrs	r3, r3, #18
 800129e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012a0:	e002      	b.n	80012a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80012a8:	68bb      	ldr	r3, [r7, #8]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d1f9      	bne.n	80012a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80012ae:	f7ff fc4b 	bl	8000b48 <HAL_GetTick>
 80012b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012b4:	e018      	b.n	80012e8 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80012b6:	f7ff fc47 	bl	8000b48 <HAL_GetTick>
 80012ba:	4602      	mov	r2, r0
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	1ad3      	subs	r3, r2, r3
 80012c0:	2b02      	cmp	r3, #2
 80012c2:	d911      	bls.n	80012e8 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	f043 0210 	orr.w	r2, r3, #16
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e007      	b.n	80012f8 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d1df      	bne.n	80012b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3710      	adds	r7, #16
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000000 	.word	0x20000000
 8001304:	431bde83 	.word	0x431bde83

08001308 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001310:	2300      	movs	r3, #0
 8001312:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b01      	cmp	r3, #1
 8001320:	d127      	bne.n	8001372 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 0201 	bic.w	r2, r2, #1
 8001330:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001332:	f7ff fc09 	bl	8000b48 <HAL_GetTick>
 8001336:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001338:	e014      	b.n	8001364 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800133a:	f7ff fc05 	bl	8000b48 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d90d      	bls.n	8001364 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134c:	f043 0210 	orr.w	r2, r3, #16
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	f043 0201 	orr.w	r2, r3, #1
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e007      	b.n	8001374 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b01      	cmp	r3, #1
 8001370:	d0e3      	beq.n	800133a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001398:	4013      	ands	r3, r2
 800139a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <__NVIC_SetPriorityGrouping+0x44>)
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	60d3      	str	r3, [r2, #12]
}
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c8:	4b04      	ldr	r3, [pc, #16]	; (80013dc <__NVIC_GetPriorityGrouping+0x18>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	0a1b      	lsrs	r3, r3, #8
 80013ce:	f003 0307 	and.w	r3, r3, #7
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db0b      	blt.n	800140a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	f003 021f 	and.w	r2, r3, #31
 80013f8:	4906      	ldr	r1, [pc, #24]	; (8001414 <__NVIC_EnableIRQ+0x34>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	095b      	lsrs	r3, r3, #5
 8001400:	2001      	movs	r0, #1
 8001402:	fa00 f202 	lsl.w	r2, r0, r2
 8001406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800140a:	bf00      	nop
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	e000e100 	.word	0xe000e100

08001418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001428:	2b00      	cmp	r3, #0
 800142a:	db0a      	blt.n	8001442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	b2da      	uxtb	r2, r3
 8001430:	490c      	ldr	r1, [pc, #48]	; (8001464 <__NVIC_SetPriority+0x4c>)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	0112      	lsls	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	440b      	add	r3, r1
 800143c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001440:	e00a      	b.n	8001458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	b2da      	uxtb	r2, r3
 8001446:	4908      	ldr	r1, [pc, #32]	; (8001468 <__NVIC_SetPriority+0x50>)
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	3b04      	subs	r3, #4
 8001450:	0112      	lsls	r2, r2, #4
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	440b      	add	r3, r1
 8001456:	761a      	strb	r2, [r3, #24]
}
 8001458:	bf00      	nop
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b480      	push	{r7}
 800146e:	b089      	sub	sp, #36	; 0x24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f1c3 0307 	rsb	r3, r3, #7
 8001486:	2b04      	cmp	r3, #4
 8001488:	bf28      	it	cs
 800148a:	2304      	movcs	r3, #4
 800148c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3304      	adds	r3, #4
 8001492:	2b06      	cmp	r3, #6
 8001494:	d902      	bls.n	800149c <NVIC_EncodePriority+0x30>
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3b03      	subs	r3, #3
 800149a:	e000      	b.n	800149e <NVIC_EncodePriority+0x32>
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a0:	f04f 32ff 	mov.w	r2, #4294967295
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43da      	mvns	r2, r3
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	401a      	ands	r2, r3
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b4:	f04f 31ff 	mov.w	r1, #4294967295
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	fa01 f303 	lsl.w	r3, r1, r3
 80014be:	43d9      	mvns	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c4:	4313      	orrs	r3, r2
         );
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3724      	adds	r7, #36	; 0x24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr

080014d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d8:	6878      	ldr	r0, [r7, #4]
 80014da:	f7ff ff4f 	bl	800137c <__NVIC_SetPriorityGrouping>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014f8:	f7ff ff64 	bl	80013c4 <__NVIC_GetPriorityGrouping>
 80014fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	6978      	ldr	r0, [r7, #20]
 8001504:	f7ff ffb2 	bl	800146c <NVIC_EncodePriority>
 8001508:	4602      	mov	r2, r0
 800150a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff ff81 	bl	8001418 <__NVIC_SetPriority>
}
 8001516:	bf00      	nop
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b082      	sub	sp, #8
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff57 	bl	80013e0 <__NVIC_EnableIRQ>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800154e:	2b02      	cmp	r3, #2
 8001550:	d005      	beq.n	800155e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	e051      	b.n	8001602 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 020e 	bic.w	r2, r2, #14
 800156c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_DMA_Abort_IT+0xd0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d029      	beq.n	80015dc <HAL_DMA_Abort_IT+0xa0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_DMA_Abort_IT+0xd4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d022      	beq.n	80015d8 <HAL_DMA_Abort_IT+0x9c>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a1f      	ldr	r2, [pc, #124]	; (8001614 <HAL_DMA_Abort_IT+0xd8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d01a      	beq.n	80015d2 <HAL_DMA_Abort_IT+0x96>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1d      	ldr	r2, [pc, #116]	; (8001618 <HAL_DMA_Abort_IT+0xdc>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d012      	beq.n	80015cc <HAL_DMA_Abort_IT+0x90>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <HAL_DMA_Abort_IT+0xe0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00a      	beq.n	80015c6 <HAL_DMA_Abort_IT+0x8a>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1a      	ldr	r2, [pc, #104]	; (8001620 <HAL_DMA_Abort_IT+0xe4>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d102      	bne.n	80015c0 <HAL_DMA_Abort_IT+0x84>
 80015ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015be:	e00e      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015c4:	e00b      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ca:	e008      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d0:	e005      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d6:	e002      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015d8:	2310      	movs	r3, #16
 80015da:	e000      	b.n	80015de <HAL_DMA_Abort_IT+0xa2>
 80015dc:	2301      	movs	r3, #1
 80015de:	4a11      	ldr	r2, [pc, #68]	; (8001624 <HAL_DMA_Abort_IT+0xe8>)
 80015e0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2201      	movs	r2, #1
 80015e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
    } 
  }
  return status;
 8001602:	7bfb      	ldrb	r3, [r7, #15]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40020008 	.word	0x40020008
 8001610:	4002001c 	.word	0x4002001c
 8001614:	40020030 	.word	0x40020030
 8001618:	40020044 	.word	0x40020044
 800161c:	40020058 	.word	0x40020058
 8001620:	4002006c 	.word	0x4002006c
 8001624:	40020000 	.word	0x40020000

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e169      	b.n	8001910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800163c:	2201      	movs	r2, #1
 800163e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8158 	bne.w	800190a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a9a      	ldr	r2, [pc, #616]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d05e      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001664:	4a98      	ldr	r2, [pc, #608]	; (80018c8 <HAL_GPIO_Init+0x2a0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d875      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800166a:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d058      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001670:	4a96      	ldr	r2, [pc, #600]	; (80018cc <HAL_GPIO_Init+0x2a4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d86f      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001676:	4a96      	ldr	r2, [pc, #600]	; (80018d0 <HAL_GPIO_Init+0x2a8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d052      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 800167c:	4a94      	ldr	r2, [pc, #592]	; (80018d0 <HAL_GPIO_Init+0x2a8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d869      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001682:	4a94      	ldr	r2, [pc, #592]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04c      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001688:	4a92      	ldr	r2, [pc, #584]	; (80018d4 <HAL_GPIO_Init+0x2ac>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d863      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800168e:	4a92      	ldr	r2, [pc, #584]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d046      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001694:	4a90      	ldr	r2, [pc, #576]	; (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d85d      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d82a      	bhi.n	80016f4 <HAL_GPIO_Init+0xcc>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d859      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 80016a2:	a201      	add	r2, pc, #4	; (adr r2, 80016a8 <HAL_GPIO_Init+0x80>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	08001723 	.word	0x08001723
 80016ac:	080016fd 	.word	0x080016fd
 80016b0:	0800170f 	.word	0x0800170f
 80016b4:	08001751 	.word	0x08001751
 80016b8:	08001757 	.word	0x08001757
 80016bc:	08001757 	.word	0x08001757
 80016c0:	08001757 	.word	0x08001757
 80016c4:	08001757 	.word	0x08001757
 80016c8:	08001757 	.word	0x08001757
 80016cc:	08001757 	.word	0x08001757
 80016d0:	08001757 	.word	0x08001757
 80016d4:	08001757 	.word	0x08001757
 80016d8:	08001757 	.word	0x08001757
 80016dc:	08001757 	.word	0x08001757
 80016e0:	08001757 	.word	0x08001757
 80016e4:	08001757 	.word	0x08001757
 80016e8:	08001757 	.word	0x08001757
 80016ec:	08001705 	.word	0x08001705
 80016f0:	08001719 	.word	0x08001719
 80016f4:	4a79      	ldr	r2, [pc, #484]	; (80018dc <HAL_GPIO_Init+0x2b4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fa:	e02c      	b.n	8001756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e029      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e024      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	3308      	adds	r3, #8
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e01f      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	330c      	adds	r3, #12
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e01a      	b.n	8001758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172a:	2304      	movs	r3, #4
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e013      	b.n	8001758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001738:	2308      	movs	r3, #8
 800173a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	611a      	str	r2, [r3, #16]
          break;
 8001742:	e009      	b.n	8001758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001744:	2308      	movs	r3, #8
 8001746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	615a      	str	r2, [r3, #20]
          break;
 800174e:	e003      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x130>
          break;
 8001756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2bff      	cmp	r3, #255	; 0xff
 800175c:	d801      	bhi.n	8001762 <HAL_GPIO_Init+0x13a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_Init+0x13e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2bff      	cmp	r3, #255	; 0xff
 800176c:	d802      	bhi.n	8001774 <HAL_GPIO_Init+0x14c>
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x152>
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	3b08      	subs	r3, #8
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	210f      	movs	r1, #15
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	6a39      	ldr	r1, [r7, #32]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80b1 	beq.w	800190a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a8:	4b4d      	ldr	r3, [pc, #308]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b4a      	ldr	r3, [pc, #296]	; (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c0:	4a48      	ldr	r2, [pc, #288]	; (80018e4 <HAL_GPIO_Init+0x2bc>)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a40      	ldr	r2, [pc, #256]	; (80018e8 <HAL_GPIO_Init+0x2c0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_GPIO_Init+0x1ec>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3f      	ldr	r2, [pc, #252]	; (80018ec <HAL_GPIO_Init+0x2c4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00d      	beq.n	8001810 <HAL_GPIO_Init+0x1e8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <HAL_GPIO_Init+0x2c8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d007      	beq.n	800180c <HAL_GPIO_Init+0x1e4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_GPIO_Init+0x2cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_GPIO_Init+0x1e0>
 8001804:	2303      	movs	r3, #3
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001808:	2304      	movs	r3, #4
 800180a:	e004      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 800180c:	2302      	movs	r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001814:	2300      	movs	r3, #0
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	f002 0203 	and.w	r2, r2, #3
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4093      	lsls	r3, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001826:	492f      	ldr	r1, [pc, #188]	; (80018e4 <HAL_GPIO_Init+0x2bc>)
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	492c      	ldr	r1, [pc, #176]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	600b      	str	r3, [r1, #0]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	4928      	ldr	r1, [pc, #160]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001858:	4013      	ands	r3, r2
 800185a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001868:	4b23      	ldr	r3, [pc, #140]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4922      	ldr	r1, [pc, #136]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001876:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001878:	685a      	ldr	r2, [r3, #4]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	491e      	ldr	r1, [pc, #120]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	4918      	ldr	r1, [pc, #96]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4914      	ldr	r1, [pc, #80]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d021      	beq.n	80018fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018ba:	68da      	ldr	r2, [r3, #12]
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	60cb      	str	r3, [r1, #12]
 80018c4:	e021      	b.n	800190a <HAL_GPIO_Init+0x2e2>
 80018c6:	bf00      	nop
 80018c8:	10320000 	.word	0x10320000
 80018cc:	10310000 	.word	0x10310000
 80018d0:	10220000 	.word	0x10220000
 80018d4:	10210000 	.word	0x10210000
 80018d8:	10120000 	.word	0x10120000
 80018dc:	10110000 	.word	0x10110000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40011400 	.word	0x40011400
 80018f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_GPIO_Init+0x304>)
 80018fe:	68da      	ldr	r2, [r3, #12]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	4909      	ldr	r1, [pc, #36]	; (800192c <HAL_GPIO_Init+0x304>)
 8001906:	4013      	ands	r3, r2
 8001908:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	3301      	adds	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	f47f ae8e 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	372c      	adds	r7, #44	; 0x2c
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
 800193c:	4613      	mov	r3, r2
 800193e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001940:	787b      	ldrb	r3, [r7, #1]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001946:	887a      	ldrh	r2, [r7, #2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800194c:	e003      	b.n	8001956 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800194e:	887b      	ldrh	r3, [r7, #2]
 8001950:	041a      	lsls	r2, r3, #16
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	611a      	str	r2, [r3, #16]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	4013      	ands	r3, r2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001976:	4a05      	ldr	r2, [pc, #20]	; (800198c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800197c:	88fb      	ldrh	r3, [r7, #6]
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f806 	bl	8001990 <HAL_GPIO_EXTI_Callback>
  }
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40010400 	.word	0x40010400

08001990 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800199a:	bf00      	nop
 800199c:	370c      	adds	r7, #12
 800199e:	46bd      	mov	sp, r7
 80019a0:	bc80      	pop	{r7}
 80019a2:	4770      	bx	lr

080019a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e26c      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 8087 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c4:	4b92      	ldr	r3, [pc, #584]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 030c 	and.w	r3, r3, #12
 80019cc:	2b04      	cmp	r3, #4
 80019ce:	d00c      	beq.n	80019ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019d0:	4b8f      	ldr	r3, [pc, #572]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b08      	cmp	r3, #8
 80019da:	d112      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
 80019dc:	4b8c      	ldr	r3, [pc, #560]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e8:	d10b      	bne.n	8001a02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ea:	4b89      	ldr	r3, [pc, #548]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d06c      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d168      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e246      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_OscConfig+0x76>
 8001a0c:	4b80      	ldr	r3, [pc, #512]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a7f      	ldr	r2, [pc, #508]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0x98>
 8001a22:	4b7b      	ldr	r3, [pc, #492]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a7a      	ldr	r2, [pc, #488]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b78      	ldr	r3, [pc, #480]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a77      	ldr	r2, [pc, #476]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e01d      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a44:	d10c      	bne.n	8001a60 <HAL_RCC_OscConfig+0xbc>
 8001a46:	4b72      	ldr	r3, [pc, #456]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a71      	ldr	r2, [pc, #452]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6013      	str	r3, [r2, #0]
 8001a52:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6e      	ldr	r2, [pc, #440]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	e00b      	b.n	8001a78 <HAL_RCC_OscConfig+0xd4>
 8001a60:	4b6b      	ldr	r3, [pc, #428]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a6a      	ldr	r2, [pc, #424]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a6a:	6013      	str	r3, [r2, #0]
 8001a6c:	4b68      	ldr	r3, [pc, #416]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a67      	ldr	r2, [pc, #412]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d013      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a80:	f7ff f862 	bl	8000b48 <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a88:	f7ff f85e 	bl	8000b48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b64      	cmp	r3, #100	; 0x64
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e1fa      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a9a:	4b5d      	ldr	r3, [pc, #372]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0f0      	beq.n	8001a88 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f84e 	bl	8000b48 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f84a 	bl	8000b48 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e1e6      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b53      	ldr	r3, [pc, #332]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x10c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d063      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ade:	4b4c      	ldr	r3, [pc, #304]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 030c 	and.w	r3, r3, #12
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d11c      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d116      	bne.n	8001b30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	4b43      	ldr	r3, [pc, #268]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d005      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691b      	ldr	r3, [r3, #16]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1ba      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	4b3d      	ldr	r3, [pc, #244]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4939      	ldr	r1, [pc, #228]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b2e:	e03a      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	691b      	ldr	r3, [r3, #16]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d020      	beq.n	8001b7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff f803 	bl	8000b48 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b46:	f7fe ffff 	bl	8000b48 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e19b      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0f0      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	4927      	ldr	r1, [pc, #156]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	e015      	b.n	8001ba6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7fe ffe2 	bl	8000b48 <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b88:	f7fe ffde 	bl	8000b48 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e17a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d03a      	beq.n	8001c28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d019      	beq.n	8001bee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bba:	4b17      	ldr	r3, [pc, #92]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc0:	f7fe ffc2 	bl	8000b48 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bc8:	f7fe ffbe 	bl	8000b48 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e15a      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001be6:	2001      	movs	r0, #1
 8001be8:	f000 fb08 	bl	80021fc <RCC_Delay>
 8001bec:	e01c      	b.n	8001c28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf4:	f7fe ffa8 	bl	8000b48 <HAL_GetTick>
 8001bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bfa:	e00f      	b.n	8001c1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7fe ffa4 	bl	8000b48 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d908      	bls.n	8001c1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e140      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
 8001c0e:	bf00      	nop
 8001c10:	40021000 	.word	0x40021000
 8001c14:	42420000 	.word	0x42420000
 8001c18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c1c:	4b9e      	ldr	r3, [pc, #632]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1e9      	bne.n	8001bfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a6 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c36:	2300      	movs	r3, #0
 8001c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10d      	bne.n	8001c62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	4a93      	ldr	r2, [pc, #588]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c50:	61d3      	str	r3, [r2, #28]
 8001c52:	4b91      	ldr	r3, [pc, #580]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c62:	4b8e      	ldr	r3, [pc, #568]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d118      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c6e:	4b8b      	ldr	r3, [pc, #556]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a8a      	ldr	r2, [pc, #552]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7a:	f7fe ff65 	bl	8000b48 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c82:	f7fe ff61 	bl	8000b48 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b64      	cmp	r3, #100	; 0x64
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e0fd      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	4b81      	ldr	r3, [pc, #516]	; (8001e9c <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d106      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x312>
 8001ca8:	4b7b      	ldr	r3, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	6213      	str	r3, [r2, #32]
 8001cb4:	e02d      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x334>
 8001cbe:	4b76      	ldr	r3, [pc, #472]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6213      	str	r3, [r2, #32]
 8001cca:	4b73      	ldr	r3, [pc, #460]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a72      	ldr	r2, [pc, #456]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0304 	bic.w	r3, r3, #4
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	e01c      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	2b05      	cmp	r3, #5
 8001cde:	d10c      	bne.n	8001cfa <HAL_RCC_OscConfig+0x356>
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	4a6c      	ldr	r2, [pc, #432]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001ce6:	f043 0304 	orr.w	r3, r3, #4
 8001cea:	6213      	str	r3, [r2, #32]
 8001cec:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a69      	ldr	r2, [pc, #420]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	e00b      	b.n	8001d12 <HAL_RCC_OscConfig+0x36e>
 8001cfa:	4b67      	ldr	r3, [pc, #412]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a66      	ldr	r2, [pc, #408]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a63      	ldr	r2, [pc, #396]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d015      	beq.n	8001d46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe ff15 	bl	8000b48 <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe ff11 	bl	8000b48 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e0ab      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d38:	4b57      	ldr	r3, [pc, #348]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d0ee      	beq.n	8001d22 <HAL_RCC_OscConfig+0x37e>
 8001d44:	e014      	b.n	8001d70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d46:	f7fe feff 	bl	8000b48 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d4e:	f7fe fefb 	bl	8000b48 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d901      	bls.n	8001d64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	e095      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d66:	6a1b      	ldr	r3, [r3, #32]
 8001d68:	f003 0302 	and.w	r3, r3, #2
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d1ee      	bne.n	8001d4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d70:	7dfb      	ldrb	r3, [r7, #23]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d105      	bne.n	8001d82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 8081 	beq.w	8001e8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f003 030c 	and.w	r3, r3, #12
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d061      	beq.n	8001e5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d146      	bne.n	8001e2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da6:	f7fe fecf 	bl	8000b48 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dac:	e008      	b.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fecb 	bl	8000b48 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d901      	bls.n	8001dc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e067      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d108      	bne.n	8001de8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dd6:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a19      	ldr	r1, [r3, #32]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	4927      	ldr	r1, [pc, #156]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e06:	f7fe fe9f 	bl	8000b48 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e0e:	f7fe fe9b 	bl	8000b48 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e037      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x46a>
 8001e2c:	e02f      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	; (8001ea0 <HAL_RCC_OscConfig+0x4fc>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7fe fe88 	bl	8000b48 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe fe84 	bl	8000b48 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e020      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x498>
 8001e5a:	e018      	b.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e013      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_OscConfig+0x4f4>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d106      	bne.n	8001e8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d001      	beq.n	8001e8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42420060 	.word	0x42420060

08001ea4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e0d0      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d910      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec6:	4b67      	ldr	r3, [pc, #412]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0207 	bic.w	r2, r3, #7
 8001ece:	4965      	ldr	r1, [pc, #404]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ed6:	4b63      	ldr	r3, [pc, #396]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d001      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0b8      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d020      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0304 	and.w	r3, r3, #4
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f00:	4b59      	ldr	r3, [pc, #356]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4a58      	ldr	r2, [pc, #352]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0308 	and.w	r3, r3, #8
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f18:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	4a52      	ldr	r2, [pc, #328]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f24:	4b50      	ldr	r3, [pc, #320]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	494d      	ldr	r1, [pc, #308]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d040      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d115      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e07f      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f62:	4b41      	ldr	r3, [pc, #260]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e073      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f72:	4b3d      	ldr	r3, [pc, #244]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e06b      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f023 0203 	bic.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4936      	ldr	r1, [pc, #216]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f94:	f7fe fdd8 	bl	8000b48 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	e00a      	b.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f7fe fdd4 	bl	8000b48 <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e053      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f003 020c 	and.w	r2, r3, #12
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d1eb      	bne.n	8001f9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fc4:	4b27      	ldr	r3, [pc, #156]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d210      	bcs.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 0207 	bic.w	r2, r3, #7
 8001fda:	4922      	ldr	r1, [pc, #136]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d001      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e032      	b.n	800205a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0304 	and.w	r3, r3, #4
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d008      	beq.n	8002012 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	4916      	ldr	r1, [pc, #88]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d009      	beq.n	8002032 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	490e      	ldr	r1, [pc, #56]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002032:	f000 f821 	bl	8002078 <HAL_RCC_GetSysClockFreq>
 8002036:	4602      	mov	r2, r0
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	490a      	ldr	r1, [pc, #40]	; (800206c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	5ccb      	ldrb	r3, [r1, r3]
 8002046:	fa22 f303 	lsr.w	r3, r2, r3
 800204a:	4a09      	ldr	r2, [pc, #36]	; (8002070 <HAL_RCC_ClockConfig+0x1cc>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800204e:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_ClockConfig+0x1d0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fc64 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40022000 	.word	0x40022000
 8002068:	40021000 	.word	0x40021000
 800206c:	08006620 	.word	0x08006620
 8002070:	20000000 	.word	0x20000000
 8002074:	20000004 	.word	0x20000004

08002078 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002078:	b490      	push	{r4, r7}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800207e:	4b2a      	ldr	r3, [pc, #168]	; (8002128 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002080:	1d3c      	adds	r4, r7, #4
 8002082:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002084:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002088:	f240 2301 	movw	r3, #513	; 0x201
 800208c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208e:	2300      	movs	r3, #0
 8002090:	61fb      	str	r3, [r7, #28]
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	; 0x24
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020a2:	4b22      	ldr	r3, [pc, #136]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_GetSysClockFreq+0x40>
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d003      	beq.n	80020be <HAL_RCC_GetSysClockFreq+0x46>
 80020b6:	e02d      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b8:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020ba:	623b      	str	r3, [r7, #32]
      break;
 80020bc:	e02d      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	0c9b      	lsrs	r3, r3, #18
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ca:	4413      	add	r3, r2
 80020cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d013      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	0c5b      	lsrs	r3, r3, #17
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020ea:	4413      	add	r3, r2
 80020ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	4a0e      	ldr	r2, [pc, #56]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
 8002102:	e004      	b.n	800210e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	4a0b      	ldr	r2, [pc, #44]	; (8002134 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002108:	fb02 f303 	mul.w	r3, r2, r3
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	623b      	str	r3, [r7, #32]
      break;
 8002112:	e002      	b.n	800211a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002114:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002116:	623b      	str	r3, [r7, #32]
      break;
 8002118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211a:	6a3b      	ldr	r3, [r7, #32]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3728      	adds	r7, #40	; 0x28
 8002120:	46bd      	mov	sp, r7
 8002122:	bc90      	pop	{r4, r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	080065a0 	.word	0x080065a0
 800212c:	40021000 	.word	0x40021000
 8002130:	007a1200 	.word	0x007a1200
 8002134:	003d0900 	.word	0x003d0900

08002138 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800213c:	4b02      	ldr	r3, [pc, #8]	; (8002148 <HAL_RCC_GetHCLKFreq+0x10>)
 800213e:	681b      	ldr	r3, [r3, #0]
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	bc80      	pop	{r7}
 8002146:	4770      	bx	lr
 8002148:	20000000 	.word	0x20000000

0800214c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002150:	f7ff fff2 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 8002154:	4602      	mov	r2, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4903      	ldr	r1, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002162:	5ccb      	ldrb	r3, [r1, r3]
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08006630 	.word	0x08006630

08002174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002178:	f7ff ffde 	bl	8002138 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0adb      	lsrs	r3, r3, #11
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	08006630 	.word	0x08006630

0800219c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	220f      	movs	r2, #15
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <HAL_RCC_GetClockConfig+0x58>)
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	08db      	lsrs	r3, r3, #3
 80021d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_RCC_GetClockConfig+0x5c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0207 	and.w	r2, r3, #7
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr
 80021f4:	40021000 	.word	0x40021000
 80021f8:	40022000 	.word	0x40022000

080021fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <RCC_Delay+0x34>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <RCC_Delay+0x38>)
 800220a:	fba2 2303 	umull	r2, r3, r2, r3
 800220e:	0a5b      	lsrs	r3, r3, #9
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	fb02 f303 	mul.w	r3, r2, r3
 8002216:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002218:	bf00      	nop
  }
  while (Delay --);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	1e5a      	subs	r2, r3, #1
 800221e:	60fa      	str	r2, [r7, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1f9      	bne.n	8002218 <RCC_Delay+0x1c>
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	20000000 	.word	0x20000000
 8002234:	10624dd3 	.word	0x10624dd3

08002238 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b086      	sub	sp, #24
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	2b00      	cmp	r3, #0
 8002252:	d07d      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	4b4f      	ldr	r3, [pc, #316]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10d      	bne.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	69db      	ldr	r3, [r3, #28]
 8002268:	4a4b      	ldr	r2, [pc, #300]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226e:	61d3      	str	r3, [r2, #28]
 8002270:	4b49      	ldr	r3, [pc, #292]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002278:	60bb      	str	r3, [r7, #8]
 800227a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227c:	2301      	movs	r3, #1
 800227e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002280:	4b46      	ldr	r3, [pc, #280]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002288:	2b00      	cmp	r3, #0
 800228a:	d118      	bne.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228c:	4b43      	ldr	r3, [pc, #268]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a42      	ldr	r2, [pc, #264]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002298:	f7fe fc56 	bl	8000b48 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229e:	e008      	b.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7fe fc52 	bl	8000b48 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e06d      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b2:	4b3a      	ldr	r3, [pc, #232]	; (800239c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022be:	4b36      	ldr	r3, [pc, #216]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d02e      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d027      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022de:	6a1b      	ldr	r3, [r3, #32]
 80022e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e6:	4b2e      	ldr	r3, [pc, #184]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022ec:	4b2c      	ldr	r3, [pc, #176]	; (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022f2:	4a29      	ldr	r2, [pc, #164]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d014      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002302:	f7fe fc21 	bl	8000b48 <HAL_GetTick>
 8002306:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002308:	e00a      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800230a:	f7fe fc1d 	bl	8000b48 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	693b      	ldr	r3, [r7, #16]
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	f241 3288 	movw	r2, #5000	; 0x1388
 8002318:	4293      	cmp	r3, r2
 800231a:	d901      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e036      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002320:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ee      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800232c:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4917      	ldr	r1, [pc, #92]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	4313      	orrs	r3, r2
 800233c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800233e:	7dfb      	ldrb	r3, [r7, #23]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d105      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a13      	ldr	r2, [pc, #76]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	490b      	ldr	r1, [pc, #44]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0310 	and.w	r3, r3, #16
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4904      	ldr	r1, [pc, #16]	; (8002398 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002388:	4313      	orrs	r3, r2
 800238a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3718      	adds	r7, #24
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
 80023a0:	42420440 	.word	0x42420440

080023a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08d      	sub	sp, #52	; 0x34
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ac:	4b5a      	ldr	r3, [pc, #360]	; (8002518 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80023ae:	f107 040c 	add.w	r4, r7, #12
 80023b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023b8:	f240 2301 	movw	r3, #513	; 0x201
 80023bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	2300      	movs	r3, #0
 80023c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	2300      	movs	r3, #0
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b10      	cmp	r3, #16
 80023d6:	d00a      	beq.n	80023ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b10      	cmp	r3, #16
 80023dc:	f200 8091 	bhi.w	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d04c      	beq.n	8002480 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d07c      	beq.n	80024e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80023ec:	e089      	b.n	8002502 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80023ee:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80023f4:	4b49      	ldr	r3, [pc, #292]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f000 8082 	beq.w	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	0c9b      	lsrs	r3, r3, #18
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800240e:	4413      	add	r3, r2
 8002410:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002414:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d018      	beq.n	8002452 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002420:	4b3e      	ldr	r3, [pc, #248]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c5b      	lsrs	r3, r3, #17
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800242e:	4413      	add	r3, r2
 8002430:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002434:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002440:	4a37      	ldr	r2, [pc, #220]	; (8002520 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8002442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002444:	fbb2 f2f3 	udiv	r2, r2, r3
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002450:	e004      	b.n	800245c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002452:	6a3b      	ldr	r3, [r7, #32]
 8002454:	4a33      	ldr	r2, [pc, #204]	; (8002524 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800245c:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002468:	d102      	bne.n	8002470 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800246a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800246e:	e04a      	b.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8002470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8002476:	fba2 2303 	umull	r2, r3, r2, r3
 800247a:	085b      	lsrs	r3, r3, #1
 800247c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800247e:	e042      	b.n	8002506 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8002480:	4b26      	ldr	r3, [pc, #152]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800248c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002490:	d108      	bne.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800249c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024a2:	e01f      	b.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ae:	d109      	bne.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80024b0:	4b1a      	ldr	r3, [pc, #104]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d003      	beq.n	80024c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80024bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	e00f      	b.n	80024e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80024ce:	d11c      	bne.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80024d0:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d016      	beq.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80024dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80024e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80024e2:	e012      	b.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80024e4:	e011      	b.n	800250a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80024e6:	f7ff fe45 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 80024ea:	4602      	mov	r2, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	0b9b      	lsrs	r3, r3, #14
 80024f2:	f003 0303 	and.w	r3, r3, #3
 80024f6:	3301      	adds	r3, #1
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002500:	e004      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002502:	bf00      	nop
 8002504:	e002      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8002506:	bf00      	nop
 8002508:	e000      	b.n	800250c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800250a:	bf00      	nop
    }
  }
  return (frequency);
 800250c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800250e:	4618      	mov	r0, r3
 8002510:	3734      	adds	r7, #52	; 0x34
 8002512:	46bd      	mov	sp, r7
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	bf00      	nop
 8002518:	080065b0 	.word	0x080065b0
 800251c:	40021000 	.word	0x40021000
 8002520:	007a1200 	.word	0x007a1200
 8002524:	003d0900 	.word	0x003d0900
 8002528:	aaaaaaab 	.word	0xaaaaaaab

0800252c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d101      	bne.n	800253e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e041      	b.n	80025c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f839 	bl	80025ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2202      	movs	r2, #2
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3304      	adds	r3, #4
 8002568:	4619      	mov	r1, r3
 800256a:	4610      	mov	r0, r2
 800256c:	f000 f9b4 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2201      	movs	r2, #1
 80025ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025ca:	b480      	push	{r7}
 80025cc:	b083      	sub	sp, #12
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d001      	beq.n	80025f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e03a      	b.n	800266a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2202      	movs	r2, #2
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0201 	orr.w	r2, r2, #1
 800260a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a18      	ldr	r2, [pc, #96]	; (8002674 <HAL_TIM_Base_Start_IT+0x98>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00e      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x58>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800261e:	d009      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x58>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <HAL_TIM_Base_Start_IT+0x9c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d004      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x58>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a13      	ldr	r2, [pc, #76]	; (800267c <HAL_TIM_Base_Start_IT+0xa0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d111      	bne.n	8002658 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b06      	cmp	r3, #6
 8002644:	d010      	beq.n	8002668 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0201 	orr.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002656:	e007      	b.n	8002668 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0201 	orr.w	r2, r2, #1
 8002666:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400
 800267c:	40000800 	.word	0x40000800

08002680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0202 	mvn.w	r2, #2
 80026ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8ed 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f8e0 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f8ef 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d122      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0304 	and.w	r3, r3, #4
 80026f4:	2b04      	cmp	r3, #4
 80026f6:	d11b      	bne.n	8002730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0204 	mvn.w	r2, #4
 8002700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8c3 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 800271c:	e005      	b.n	800272a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f8b6 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8c5 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d122      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	f003 0308 	and.w	r3, r3, #8
 8002748:	2b08      	cmp	r3, #8
 800274a:	d11b      	bne.n	8002784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f06f 0208 	mvn.w	r2, #8
 8002754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2204      	movs	r2, #4
 800275a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f003 0303 	and.w	r3, r3, #3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d003      	beq.n	8002772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f899 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 8002770:	e005      	b.n	800277e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f88c 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f000 f89b 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d122      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	2b10      	cmp	r3, #16
 800279e:	d11b      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0210 	mvn.w	r2, #16
 80027a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2208      	movs	r2, #8
 80027ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f86f 	bl	80028a2 <HAL_TIM_IC_CaptureCallback>
 80027c4:	e005      	b.n	80027d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f862 	bl	8002890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f871 	bl	80028b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0201 	mvn.w	r2, #1
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fd ff58 	bl	80006b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b80      	cmp	r3, #128	; 0x80
 8002810:	d10e      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281c:	2b80      	cmp	r3, #128	; 0x80
 800281e:	d107      	bne.n	8002830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8bf 	bl	80029ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d10e      	bne.n	800285c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002848:	2b40      	cmp	r3, #64	; 0x40
 800284a:	d107      	bne.n	800285c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f835 	bl	80028c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b20      	cmp	r3, #32
 8002868:	d10e      	bne.n	8002888 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b20      	cmp	r3, #32
 8002876:	d107      	bne.n	8002888 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0220 	mvn.w	r2, #32
 8002880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f88a 	bl	800299c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002888:	bf00      	nop
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	bc80      	pop	{r7}
 80028a0:	4770      	bx	lr

080028a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bc80      	pop	{r7}
 80028b2:	4770      	bx	lr

080028b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a29      	ldr	r2, [pc, #164]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d00b      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d007      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a26      	ldr	r2, [pc, #152]	; (8002994 <TIM_Base_SetConfig+0xbc>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d003      	beq.n	8002908 <TIM_Base_SetConfig+0x30>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <TIM_Base_SetConfig+0xc0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d108      	bne.n	800291a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	4313      	orrs	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d00b      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002928:	d007      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <TIM_Base_SetConfig+0xbc>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d003      	beq.n	800293a <TIM_Base_SetConfig+0x62>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a18      	ldr	r2, [pc, #96]	; (8002998 <TIM_Base_SetConfig+0xc0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d108      	bne.n	800294c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a07      	ldr	r2, [pc, #28]	; (8002990 <TIM_Base_SetConfig+0xb8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d103      	bne.n	8002980 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	691a      	ldr	r2, [r3, #16]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	615a      	str	r2, [r3, #20]
}
 8002986:	bf00      	nop
 8002988:	3714      	adds	r7, #20
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr
 8002990:	40012c00 	.word	0x40012c00
 8002994:	40000400 	.word	0x40000400
 8002998:	40000800 	.word	0x40000800

0800299c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b083      	sub	sp, #12
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bc80      	pop	{r7}
 80029be:	4770      	bx	lr

080029c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e03f      	b.n	8002a52 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd ff1a 	bl	8000820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a02:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 fbd7 	bl	80031b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a18:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695a      	ldr	r2, [r3, #20]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a28:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68da      	ldr	r2, [r3, #12]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a38:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2220      	movs	r2, #32
 8002a4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b08a      	sub	sp, #40	; 0x28
 8002a5e:	af02      	add	r7, sp, #8
 8002a60:	60f8      	str	r0, [r7, #12]
 8002a62:	60b9      	str	r1, [r7, #8]
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b20      	cmp	r3, #32
 8002a78:	d17c      	bne.n	8002b74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d002      	beq.n	8002a86 <HAL_UART_Transmit+0x2c>
 8002a80:	88fb      	ldrh	r3, [r7, #6]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e075      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Transmit+0x3e>
 8002a94:	2302      	movs	r3, #2
 8002a96:	e06e      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2221      	movs	r2, #33	; 0x21
 8002aaa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002aae:	f7fe f84b 	bl	8000b48 <HAL_GetTick>
 8002ab2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ac8:	d108      	bne.n	8002adc <HAL_UART_Transmit+0x82>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d104      	bne.n	8002adc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e003      	b.n	8002ae4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002aec:	e02a      	b.n	8002b44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2200      	movs	r2, #0
 8002af6:	2180      	movs	r1, #128	; 0x80
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 f9fa 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e036      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d10b      	bne.n	8002b26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	461a      	mov	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	3302      	adds	r3, #2
 8002b22:	61bb      	str	r3, [r7, #24]
 8002b24:	e007      	b.n	8002b36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	781a      	ldrb	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	3301      	adds	r3, #1
 8002b34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1cf      	bne.n	8002aee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	2200      	movs	r2, #0
 8002b56:	2140      	movs	r1, #64	; 0x40
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f9ca 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d001      	beq.n	8002b68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e006      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002b70:	2300      	movs	r3, #0
 8002b72:	e000      	b.n	8002b76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b74:	2302      	movs	r3, #2
  }
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	b08a      	sub	sp, #40	; 0x28
 8002b82:	af02      	add	r7, sp, #8
 8002b84:	60f8      	str	r0, [r7, #12]
 8002b86:	60b9      	str	r1, [r7, #8]
 8002b88:	603b      	str	r3, [r7, #0]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b20      	cmp	r3, #32
 8002b9c:	f040 8089 	bne.w	8002cb2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <HAL_UART_Receive+0x2e>
 8002ba6:	88fb      	ldrh	r3, [r7, #6]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e081      	b.n	8002cb4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <HAL_UART_Receive+0x40>
 8002bba:	2302      	movs	r3, #2
 8002bbc:	e07a      	b.n	8002cb4 <HAL_UART_Receive+0x136>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2222      	movs	r2, #34	; 0x22
 8002bd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002bd4:	f7fd ffb8 	bl	8000b48 <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	88fa      	ldrh	r2, [r7, #6]
 8002bde:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	88fa      	ldrh	r2, [r7, #6]
 8002be4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bee:	d108      	bne.n	8002c02 <HAL_UART_Receive+0x84>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d104      	bne.n	8002c02 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	e003      	b.n	8002c0a <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c12:	e043      	b.n	8002c9c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2120      	movs	r1, #32
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f967 	bl	8002ef2 <UART_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e042      	b.n	8002cb4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10c      	bne.n	8002c4e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	e01f      	b.n	8002c8e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c56:	d007      	beq.n	8002c68 <HAL_UART_Receive+0xea>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10a      	bne.n	8002c76 <HAL_UART_Receive+0xf8>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d106      	bne.n	8002c76 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e008      	b.n	8002c88 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c92:	b29b      	uxth	r3, r3
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1b6      	bne.n	8002c14 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3720      	adds	r7, #32
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x52>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9d5 	bl	80030b6 <UART_Receive_IT>
      return;
 8002d0c:	e0d0      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80b0 	beq.w	8002e76 <HAL_UART_IRQHandler+0x1ba>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x70>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a5 	beq.w	8002e76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_UART_IRQHandler+0x90>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_UART_IRQHandler+0xb0>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_UART_IRQHandler+0xd0>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00f      	beq.n	8002db6 <HAL_UART_IRQHandler+0xfa>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_UART_IRQHandler+0xee>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d077      	beq.n	8002eae <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f96f 	bl	80030b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	bf14      	ite	ne
 8002de6:	2301      	movne	r3, #1
 8002de8:	2300      	moveq	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_UART_IRQHandler+0x144>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8c0 	bl	8002f86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_UART_IRQHandler+0x1fc>)
 8002e32:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fb7f 	bl	800153c <HAL_DMA_Abort_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	e00e      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f843 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5a:	e00a      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f83f 	bl	8002ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	e006      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f83b 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e70:	e01d      	b.n	8002eae <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e72:	bf00      	nop
    return;
 8002e74:	e01b      	b.n	8002eae <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x1d6>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8ac 	bl	8002fe8 <UART_Transmit_IT>
    return;
 8002e90:	e00e      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d009      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d004      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8ed 	bl	8003086 <UART_EndTransmit_IT>
    return;
 8002eac:	e000      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
    return;
 8002eae:	bf00      	nop
  }
}
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	08002fc1 	.word	0x08002fc1

08002ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bc80      	pop	{r7}
 8002ef0:	4770      	bx	lr

08002ef2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b084      	sub	sp, #16
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4613      	mov	r3, r2
 8002f00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f02:	e02c      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f0a:	d028      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f12:	f7fd fe19 	bl	8000b48 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d21d      	bcs.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	695a      	ldr	r2, [r3, #20]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2220      	movs	r2, #32
 8002f46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2220      	movs	r2, #32
 8002f4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e00f      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d0c3      	beq.n	8002f04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b083      	sub	sp, #12
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002f9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695a      	ldr	r2, [r3, #20]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0201 	bic.w	r2, r2, #1
 8002fac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr

08002fc0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff80 	bl	8002ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe0:	bf00      	nop
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b21      	cmp	r3, #33	; 0x21
 8002ffa:	d13e      	bne.n	800307a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003004:	d114      	bne.n	8003030 <UART_Transmit_IT+0x48>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d110      	bne.n	8003030 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003022:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	1c9a      	adds	r2, r3, #2
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]
 800302e:	e008      	b.n	8003042 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	1c59      	adds	r1, r3, #1
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6211      	str	r1, [r2, #32]
 800303a:	781a      	ldrb	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29b      	uxth	r3, r3
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	4619      	mov	r1, r3
 8003050:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10f      	bne.n	8003076 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003064:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003074:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr

08003086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b082      	sub	sp, #8
 800308a:	af00      	add	r7, sp, #0
 800308c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2220      	movs	r2, #32
 80030a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7ff ff08 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}

080030b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030b6:	b580      	push	{r7, lr}
 80030b8:	b084      	sub	sp, #16
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b22      	cmp	r3, #34	; 0x22
 80030c8:	d170      	bne.n	80031ac <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d2:	d117      	bne.n	8003104 <UART_Receive_IT+0x4e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d113      	bne.n	8003104 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	629a      	str	r2, [r3, #40]	; 0x28
 8003102:	e026      	b.n	8003152 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003116:	d007      	beq.n	8003128 <UART_Receive_IT+0x72>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <UART_Receive_IT+0x80>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	b2da      	uxtb	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e008      	b.n	8003148 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	b2db      	uxtb	r3, r3
 800313e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003142:	b2da      	uxtb	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	1c5a      	adds	r2, r3, #1
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003156:	b29b      	uxth	r3, r3
 8003158:	3b01      	subs	r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	4619      	mov	r1, r3
 8003160:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003162:	2b00      	cmp	r3, #0
 8003164:	d120      	bne.n	80031a8 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0220 	bic.w	r2, r2, #32
 8003174:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	68da      	ldr	r2, [r3, #12]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003184:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0201 	bic.w	r2, r2, #1
 8003194:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fe95 	bl	8002ece <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	e002      	b.n	80031ae <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	e000      	b.n	80031ae <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80031ac:	2302      	movs	r3, #2
  }
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68da      	ldr	r2, [r3, #12]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80031f2:	f023 030c 	bic.w	r3, r3, #12
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	68b9      	ldr	r1, [r7, #8]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a2c      	ldr	r2, [pc, #176]	; (80032cc <UART_SetConfig+0x114>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003220:	f7fe ffa8 	bl	8002174 <HAL_RCC_GetPCLK2Freq>
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	e002      	b.n	800322e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003228:	f7fe ff90 	bl	800214c <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800322e:	68fa      	ldr	r2, [r7, #12]
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	009a      	lsls	r2, r3, #2
 8003238:	441a      	add	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	4a22      	ldr	r2, [pc, #136]	; (80032d0 <UART_SetConfig+0x118>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	0119      	lsls	r1, r3, #4
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4613      	mov	r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	4413      	add	r3, r2
 8003256:	009a      	lsls	r2, r3, #2
 8003258:	441a      	add	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	fbb2 f2f3 	udiv	r2, r2, r3
 8003264:	4b1a      	ldr	r3, [pc, #104]	; (80032d0 <UART_SetConfig+0x118>)
 8003266:	fba3 0302 	umull	r0, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	2064      	movs	r0, #100	; 0x64
 800326e:	fb00 f303 	mul.w	r3, r0, r3
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	3332      	adds	r3, #50	; 0x32
 8003278:	4a15      	ldr	r2, [pc, #84]	; (80032d0 <UART_SetConfig+0x118>)
 800327a:	fba2 2303 	umull	r2, r3, r2, r3
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003284:	4419      	add	r1, r3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	009a      	lsls	r2, r3, #2
 8003290:	441a      	add	r2, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	fbb2 f2f3 	udiv	r2, r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <UART_SetConfig+0x118>)
 800329e:	fba3 0302 	umull	r0, r3, r3, r2
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2064      	movs	r0, #100	; 0x64
 80032a6:	fb00 f303 	mul.w	r3, r0, r3
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	3332      	adds	r3, #50	; 0x32
 80032b0:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <UART_SetConfig+0x118>)
 80032b2:	fba2 2303 	umull	r2, r3, r2, r3
 80032b6:	095b      	lsrs	r3, r3, #5
 80032b8:	f003 020f 	and.w	r2, r3, #15
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	440a      	add	r2, r1
 80032c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	40013800 	.word	0x40013800
 80032d0:	51eb851f 	.word	0x51eb851f

080032d4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032da:	f3ef 8305 	mrs	r3, IPSR
 80032de:	60bb      	str	r3, [r7, #8]
  return(result);
 80032e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10f      	bne.n	8003306 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e6:	f3ef 8310 	mrs	r3, PRIMASK
 80032ea:	607b      	str	r3, [r7, #4]
  return(result);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d109      	bne.n	8003306 <osKernelInitialize+0x32>
 80032f2:	4b10      	ldr	r3, [pc, #64]	; (8003334 <osKernelInitialize+0x60>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d109      	bne.n	800330e <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80032fa:	f3ef 8311 	mrs	r3, BASEPRI
 80032fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003306:	f06f 0305 	mvn.w	r3, #5
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	e00c      	b.n	8003328 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800330e:	4b09      	ldr	r3, [pc, #36]	; (8003334 <osKernelInitialize+0x60>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d105      	bne.n	8003322 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003316:	4b07      	ldr	r3, [pc, #28]	; (8003334 <osKernelInitialize+0x60>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]
 8003320:	e002      	b.n	8003328 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003322:	f04f 33ff 	mov.w	r3, #4294967295
 8003326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003328:	68fb      	ldr	r3, [r7, #12]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	20000894 	.word	0x20000894

08003338 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800333e:	f3ef 8305 	mrs	r3, IPSR
 8003342:	60bb      	str	r3, [r7, #8]
  return(result);
 8003344:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10f      	bne.n	800336a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800334a:	f3ef 8310 	mrs	r3, PRIMASK
 800334e:	607b      	str	r3, [r7, #4]
  return(result);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d109      	bne.n	800336a <osKernelStart+0x32>
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <osKernelStart+0x64>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b02      	cmp	r3, #2
 800335c:	d109      	bne.n	8003372 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800335e:	f3ef 8311 	mrs	r3, BASEPRI
 8003362:	603b      	str	r3, [r7, #0]
  return(result);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <osKernelStart+0x3a>
    stat = osErrorISR;
 800336a:	f06f 0305 	mvn.w	r3, #5
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e00e      	b.n	8003390 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003372:	4b0a      	ldr	r3, [pc, #40]	; (800339c <osKernelStart+0x64>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d107      	bne.n	800338a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800337a:	4b08      	ldr	r3, [pc, #32]	; (800339c <osKernelStart+0x64>)
 800337c:	2202      	movs	r2, #2
 800337e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003380:	f001 f84a 	bl	8004418 <vTaskStartScheduler>
      stat = osOK;
 8003384:	2300      	movs	r3, #0
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	e002      	b.n	8003390 <osKernelStart+0x58>
    } else {
      stat = osError;
 800338a:	f04f 33ff 	mov.w	r3, #4294967295
 800338e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003390:	68fb      	ldr	r3, [r7, #12]
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	20000894 	.word	0x20000894

080033a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b092      	sub	sp, #72	; 0x48
 80033a4:	af04      	add	r7, sp, #16
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033b0:	f3ef 8305 	mrs	r3, IPSR
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f040 8094 	bne.w	80034e6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033be:	f3ef 8310 	mrs	r3, PRIMASK
 80033c2:	623b      	str	r3, [r7, #32]
  return(result);
 80033c4:	6a3b      	ldr	r3, [r7, #32]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	f040 808d 	bne.w	80034e6 <osThreadNew+0x146>
 80033cc:	4b48      	ldr	r3, [pc, #288]	; (80034f0 <osThreadNew+0x150>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d106      	bne.n	80033e2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80033d4:	f3ef 8311 	mrs	r3, BASEPRI
 80033d8:	61fb      	str	r3, [r7, #28]
  return(result);
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f040 8082 	bne.w	80034e6 <osThreadNew+0x146>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d07e      	beq.n	80034e6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80033e8:	2380      	movs	r3, #128	; 0x80
 80033ea:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80033ec:	2318      	movs	r3, #24
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80033f0:	2300      	movs	r3, #0
 80033f2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80033f4:	f107 031b 	add.w	r3, r7, #27
 80033f8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80033fa:	f04f 33ff 	mov.w	r3, #4294967295
 80033fe:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d045      	beq.n	8003492 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <osThreadNew+0x74>
        name = attr->name;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	699b      	ldr	r3, [r3, #24]
 8003420:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <osThreadNew+0x9a>
 8003428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342a:	2b38      	cmp	r3, #56	; 0x38
 800342c:	d805      	bhi.n	800343a <osThreadNew+0x9a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <osThreadNew+0x9e>
        return (NULL);
 800343a:	2300      	movs	r3, #0
 800343c:	e054      	b.n	80034e8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	695b      	ldr	r3, [r3, #20]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00e      	beq.n	8003474 <osThreadNew+0xd4>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	2b5b      	cmp	r3, #91	; 0x5b
 800345c:	d90a      	bls.n	8003474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d006      	beq.n	8003474 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <osThreadNew+0xd4>
        mem = 1;
 800346e:	2301      	movs	r3, #1
 8003470:	62bb      	str	r3, [r7, #40]	; 0x28
 8003472:	e010      	b.n	8003496 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10c      	bne.n	8003496 <osThreadNew+0xf6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d108      	bne.n	8003496 <osThreadNew+0xf6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <osThreadNew+0xf6>
          mem = 0;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003490:	e001      	b.n	8003496 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003492:	2300      	movs	r3, #0
 8003494:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003498:	2b01      	cmp	r3, #1
 800349a:	d110      	bne.n	80034be <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80034a4:	9202      	str	r2, [sp, #8]
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034b2:	68f8      	ldr	r0, [r7, #12]
 80034b4:	f000 fde4 	bl	8004080 <xTaskCreateStatic>
 80034b8:	4603      	mov	r3, r0
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e013      	b.n	80034e6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80034be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d110      	bne.n	80034e6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80034c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	9301      	str	r3, [sp, #4]
 80034ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d0:	9300      	str	r3, [sp, #0]
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fe2e 	bl	8004138 <xTaskCreate>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d001      	beq.n	80034e6 <osThreadNew+0x146>
          hTask = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3738      	adds	r7, #56	; 0x38
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000894 	.word	0x20000894

080034f4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a06      	ldr	r2, [pc, #24]	; (800351c <vApplicationGetIdleTaskMemory+0x28>)
 8003504:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	4a05      	ldr	r2, [pc, #20]	; (8003520 <vApplicationGetIdleTaskMemory+0x2c>)
 800350a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2280      	movs	r2, #128	; 0x80
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	20000898 	.word	0x20000898
 8003520:	200008f4 	.word	0x200008f4

08003524 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003524:	b480      	push	{r7}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <vApplicationGetTimerTaskMemory+0x2c>)
 8003534:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4a06      	ldr	r2, [pc, #24]	; (8003554 <vApplicationGetTimerTaskMemory+0x30>)
 800353a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	bc80      	pop	{r7}
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	20000af4 	.word	0x20000af4
 8003554:	20000b50 	.word	0x20000b50

08003558 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f103 0208 	add.w	r2, r3, #8
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f04f 32ff 	mov.w	r2, #4294967295
 8003570:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f103 0208 	add.w	r2, r3, #8
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f103 0208 	add.w	r2, r3, #8
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	bc80      	pop	{r7}
 8003594:	4770      	bx	lr

08003596 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bc80      	pop	{r7}
 80035ac:	4770      	bx	lr

080035ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	601a      	str	r2, [r3, #0]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d103      	bne.n	8003614 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	e00c      	b.n	800362e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3308      	adds	r3, #8
 8003618:	60fb      	str	r3, [r7, #12]
 800361a:	e002      	b.n	8003622 <vListInsert+0x2e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	429a      	cmp	r2, r3
 800362c:	d2f6      	bcs.n	800361c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	601a      	str	r2, [r3, #0]
}
 800365a:	bf00      	nop
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	bc80      	pop	{r7}
 8003662:	4770      	bx	lr

08003664 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6892      	ldr	r2, [r2, #8]
 800367a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6852      	ldr	r2, [r2, #4]
 8003684:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	429a      	cmp	r2, r3
 800368e:	d103      	bne.n	8003698 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1e5a      	subs	r2, r3, #1
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3714      	adds	r7, #20
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80036cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d0:	f383 8811 	msr	BASEPRI, r3
 80036d4:	f3bf 8f6f 	isb	sy
 80036d8:	f3bf 8f4f 	dsb	sy
 80036dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80036de:	bf00      	nop
 80036e0:	e7fe      	b.n	80036e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80036e2:	f001 ffcb 	bl	800567c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ee:	68f9      	ldr	r1, [r7, #12]
 80036f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	441a      	add	r2, r3
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003712:	3b01      	subs	r3, #1
 8003714:	68f9      	ldr	r1, [r7, #12]
 8003716:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003718:	fb01 f303 	mul.w	r3, r1, r3
 800371c:	441a      	add	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	22ff      	movs	r2, #255	; 0xff
 8003726:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	22ff      	movs	r2, #255	; 0xff
 800372e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d114      	bne.n	8003762 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01a      	beq.n	8003776 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	3310      	adds	r3, #16
 8003744:	4618      	mov	r0, r3
 8003746:	f001 f8f1 	bl	800492c <xTaskRemoveFromEventList>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003750:	4b0c      	ldr	r3, [pc, #48]	; (8003784 <xQueueGenericReset+0xcc>)
 8003752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	f3bf 8f4f 	dsb	sy
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	e009      	b.n	8003776 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3310      	adds	r3, #16
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff fef6 	bl	8003558 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	3324      	adds	r3, #36	; 0x24
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fef1 	bl	8003558 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003776:	f001 ffb1 	bl	80056dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800377a:	2301      	movs	r3, #1
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	e000ed04 	.word	0xe000ed04

08003788 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08e      	sub	sp, #56	; 0x38
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <xQueueGenericCreateStatic+0x52>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <xQueueGenericCreateStatic+0x56>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <xQueueGenericCreateStatic+0x58>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80037e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e8:	f383 8811 	msr	BASEPRI, r3
 80037ec:	f3bf 8f6f 	isb	sy
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	623b      	str	r3, [r7, #32]
}
 80037f6:	bf00      	nop
 80037f8:	e7fe      	b.n	80037f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <xQueueGenericCreateStatic+0x7e>
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <xQueueGenericCreateStatic+0x82>
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <xQueueGenericCreateStatic+0x84>
 800380a:	2300      	movs	r3, #0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	61fb      	str	r3, [r7, #28]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003826:	2350      	movs	r3, #80	; 0x50
 8003828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b50      	cmp	r3, #80	; 0x50
 800382e:	d00a      	beq.n	8003846 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003834:	f383 8811 	msr	BASEPRI, r3
 8003838:	f3bf 8f6f 	isb	sy
 800383c:	f3bf 8f4f 	dsb	sy
 8003840:	61bb      	str	r3, [r7, #24]
}
 8003842:	bf00      	nop
 8003844:	e7fe      	b.n	8003844 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800384a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003858:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800385c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	4613      	mov	r3, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f000 f805 	bl	8003876 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800386c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800386e:	4618      	mov	r0, r3
 8003870:	3730      	adds	r7, #48	; 0x30
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b084      	sub	sp, #16
 800387a:	af00      	add	r7, sp, #0
 800387c:	60f8      	str	r0, [r7, #12]
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	e002      	b.n	8003898 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	68ba      	ldr	r2, [r7, #8]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80038a4:	2101      	movs	r1, #1
 80038a6:	69b8      	ldr	r0, [r7, #24]
 80038a8:	f7ff ff06 	bl	80036b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	78fa      	ldrb	r2, [r7, #3]
 80038b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80038b4:	bf00      	nop
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08e      	sub	sp, #56	; 0x38
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80038ca:	2300      	movs	r3, #0
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d10a      	bne.n	80038ee <xQueueGenericSend+0x32>
	__asm volatile
 80038d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038dc:	f383 8811 	msr	BASEPRI, r3
 80038e0:	f3bf 8f6f 	isb	sy
 80038e4:	f3bf 8f4f 	dsb	sy
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80038ea:	bf00      	nop
 80038ec:	e7fe      	b.n	80038ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <xQueueGenericSend+0x40>
 80038f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d101      	bne.n	8003900 <xQueueGenericSend+0x44>
 80038fc:	2301      	movs	r3, #1
 80038fe:	e000      	b.n	8003902 <xQueueGenericSend+0x46>
 8003900:	2300      	movs	r3, #0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10a      	bne.n	800391c <xQueueGenericSend+0x60>
	__asm volatile
 8003906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390a:	f383 8811 	msr	BASEPRI, r3
 800390e:	f3bf 8f6f 	isb	sy
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003918:	bf00      	nop
 800391a:	e7fe      	b.n	800391a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d103      	bne.n	800392a <xQueueGenericSend+0x6e>
 8003922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003926:	2b01      	cmp	r3, #1
 8003928:	d101      	bne.n	800392e <xQueueGenericSend+0x72>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <xQueueGenericSend+0x74>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xQueueGenericSend+0x8e>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	623b      	str	r3, [r7, #32]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800394a:	f001 f9b1 	bl	8004cb0 <xTaskGetSchedulerState>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d102      	bne.n	800395a <xQueueGenericSend+0x9e>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <xQueueGenericSend+0xa2>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <xQueueGenericSend+0xa4>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericSend+0xbe>
	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61fb      	str	r3, [r7, #28]
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800397a:	f001 fe7f 	bl	800567c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003980:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	429a      	cmp	r2, r3
 8003988:	d302      	bcc.n	8003990 <xQueueGenericSend+0xd4>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d129      	bne.n	80039e4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f000 fa07 	bl	8003da8 <prvCopyDataToQueue>
 800399a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800399c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d010      	beq.n	80039c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	3324      	adds	r3, #36	; 0x24
 80039a8:	4618      	mov	r0, r3
 80039aa:	f000 ffbf 	bl	800492c <xTaskRemoveFromEventList>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d013      	beq.n	80039dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80039b4:	4b3f      	ldr	r3, [pc, #252]	; (8003ab4 <xQueueGenericSend+0x1f8>)
 80039b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	e00a      	b.n	80039dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80039c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d007      	beq.n	80039dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80039cc:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <xQueueGenericSend+0x1f8>)
 80039ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80039dc:	f001 fe7e 	bl	80056dc <vPortExitCritical>
				return pdPASS;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e063      	b.n	8003aac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d103      	bne.n	80039f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80039ea:	f001 fe77 	bl	80056dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e05c      	b.n	8003aac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80039f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039f8:	f107 0314 	add.w	r3, r7, #20
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 fff9 	bl	80049f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a02:	2301      	movs	r3, #1
 8003a04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a06:	f001 fe69 	bl	80056dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a0a:	f000 fd6b 	bl	80044e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a0e:	f001 fe35 	bl	800567c <vPortEnterCritical>
 8003a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d103      	bne.n	8003a28 <xQueueGenericSend+0x16c>
 8003a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a2e:	b25b      	sxtb	r3, r3
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d103      	bne.n	8003a3e <xQueueGenericSend+0x182>
 8003a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a3e:	f001 fe4d 	bl	80056dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003a42:	1d3a      	adds	r2, r7, #4
 8003a44:	f107 0314 	add.w	r3, r7, #20
 8003a48:	4611      	mov	r1, r2
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 ffe8 	bl	8004a20 <xTaskCheckForTimeOut>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d124      	bne.n	8003aa0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a58:	f000 fa9e 	bl	8003f98 <prvIsQueueFull>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a64:	3310      	adds	r3, #16
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 ff0e 	bl	800488c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a72:	f000 fa29 	bl	8003ec8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a76:	f000 fd43 	bl	8004500 <xTaskResumeAll>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f47f af7c 	bne.w	800397a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003a82:	4b0c      	ldr	r3, [pc, #48]	; (8003ab4 <xQueueGenericSend+0x1f8>)
 8003a84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	f3bf 8f6f 	isb	sy
 8003a92:	e772      	b.n	800397a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a96:	f000 fa17 	bl	8003ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a9a:	f000 fd31 	bl	8004500 <xTaskResumeAll>
 8003a9e:	e76c      	b.n	800397a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003aa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003aa2:	f000 fa11 	bl	8003ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003aa6:	f000 fd2b 	bl	8004500 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003aaa:	2300      	movs	r3, #0
		}
	}
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3738      	adds	r7, #56	; 0x38
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	e000ed04 	.word	0xe000ed04

08003ab8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	; 0x38
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad4:	f383 8811 	msr	BASEPRI, r3
 8003ad8:	f3bf 8f6f 	isb	sy
 8003adc:	f3bf 8f4f 	dsb	sy
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ae2:	bf00      	nop
 8003ae4:	e7fe      	b.n	8003ae4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d103      	bne.n	8003af4 <xQueueGenericSendFromISR+0x3c>
 8003aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <xQueueGenericSendFromISR+0x40>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <xQueueGenericSendFromISR+0x42>
 8003af8:	2300      	movs	r3, #0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	623b      	str	r3, [r7, #32]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d103      	bne.n	8003b22 <xQueueGenericSendFromISR+0x6a>
 8003b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d101      	bne.n	8003b26 <xQueueGenericSendFromISR+0x6e>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <xQueueGenericSendFromISR+0x70>
 8003b26:	2300      	movs	r3, #0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10a      	bne.n	8003b42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	61fb      	str	r3, [r7, #28]
}
 8003b3e:	bf00      	nop
 8003b40:	e7fe      	b.n	8003b40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b42:	f001 fe5d 	bl	8005800 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003b46:	f3ef 8211 	mrs	r2, BASEPRI
 8003b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4e:	f383 8811 	msr	BASEPRI, r3
 8003b52:	f3bf 8f6f 	isb	sy
 8003b56:	f3bf 8f4f 	dsb	sy
 8003b5a:	61ba      	str	r2, [r7, #24]
 8003b5c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003b5e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d302      	bcc.n	8003b74 <xQueueGenericSendFromISR+0xbc>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d12c      	bne.n	8003bce <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b84:	f000 f910 	bl	8003da8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b88:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b90:	d112      	bne.n	8003bb8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d016      	beq.n	8003bc8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	3324      	adds	r3, #36	; 0x24
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 fec4 	bl	800492c <xTaskRemoveFromEventList>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00b      	beq.n	8003bc8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	601a      	str	r2, [r3, #0]
 8003bb6:	e007      	b.n	8003bc8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003bb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	b25a      	sxtb	r2, r3
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003bcc:	e001      	b.n	8003bd2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	637b      	str	r3, [r7, #52]	; 0x34
 8003bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003bdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3738      	adds	r7, #56	; 0x38
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08c      	sub	sp, #48	; 0x30
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10a      	bne.n	8003c18 <xQueueReceive+0x30>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	623b      	str	r3, [r7, #32]
}
 8003c14:	bf00      	nop
 8003c16:	e7fe      	b.n	8003c16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <xQueueReceive+0x3e>
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <xQueueReceive+0x42>
 8003c26:	2301      	movs	r3, #1
 8003c28:	e000      	b.n	8003c2c <xQueueReceive+0x44>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10a      	bne.n	8003c46 <xQueueReceive+0x5e>
	__asm volatile
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	61fb      	str	r3, [r7, #28]
}
 8003c42:	bf00      	nop
 8003c44:	e7fe      	b.n	8003c44 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c46:	f001 f833 	bl	8004cb0 <xTaskGetSchedulerState>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d102      	bne.n	8003c56 <xQueueReceive+0x6e>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <xQueueReceive+0x72>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <xQueueReceive+0x74>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueReceive+0x8e>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	61bb      	str	r3, [r7, #24]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c76:	f001 fd01 	bl	800567c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d01f      	beq.n	8003cc6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c86:	68b9      	ldr	r1, [r7, #8]
 8003c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c8a:	f000 f8f7 	bl	8003e7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c90:	1e5a      	subs	r2, r3, #1
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00f      	beq.n	8003cbe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca0:	3310      	adds	r3, #16
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fe42 	bl	800492c <xTaskRemoveFromEventList>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d007      	beq.n	8003cbe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003cae:	4b3d      	ldr	r3, [pc, #244]	; (8003da4 <xQueueReceive+0x1bc>)
 8003cb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cb4:	601a      	str	r2, [r3, #0]
 8003cb6:	f3bf 8f4f 	dsb	sy
 8003cba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003cbe:	f001 fd0d 	bl	80056dc <vPortExitCritical>
				return pdPASS;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e069      	b.n	8003d9a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ccc:	f001 fd06 	bl	80056dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e062      	b.n	8003d9a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d106      	bne.n	8003ce8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003cda:	f107 0310 	add.w	r3, r7, #16
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 fe88 	bl	80049f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ce8:	f001 fcf8 	bl	80056dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003cec:	f000 fbfa 	bl	80044e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003cf0:	f001 fcc4 	bl	800567c <vPortEnterCritical>
 8003cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfa:	b25b      	sxtb	r3, r3
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d103      	bne.n	8003d0a <xQueueReceive+0x122>
 8003d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d16:	d103      	bne.n	8003d20 <xQueueReceive+0x138>
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d20:	f001 fcdc 	bl	80056dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d24:	1d3a      	adds	r2, r7, #4
 8003d26:	f107 0310 	add.w	r3, r7, #16
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f000 fe77 	bl	8004a20 <xTaskCheckForTimeOut>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d123      	bne.n	8003d80 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3a:	f000 f917 	bl	8003f6c <prvIsQueueEmpty>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d017      	beq.n	8003d74 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d46:	3324      	adds	r3, #36	; 0x24
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fd9d 	bl	800488c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d54:	f000 f8b8 	bl	8003ec8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d58:	f000 fbd2 	bl	8004500 <xTaskResumeAll>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d189      	bne.n	8003c76 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <xQueueReceive+0x1bc>)
 8003d64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d68:	601a      	str	r2, [r3, #0]
 8003d6a:	f3bf 8f4f 	dsb	sy
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	e780      	b.n	8003c76 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d76:	f000 f8a7 	bl	8003ec8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d7a:	f000 fbc1 	bl	8004500 <xTaskResumeAll>
 8003d7e:	e77a      	b.n	8003c76 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d82:	f000 f8a1 	bl	8003ec8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d86:	f000 fbbb 	bl	8004500 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d8c:	f000 f8ee 	bl	8003f6c <prvIsQueueEmpty>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f43f af6f 	beq.w	8003c76 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3730      	adds	r7, #48	; 0x30
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b086      	sub	sp, #24
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d14d      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 ff8a 	bl	8004cec <xTaskPriorityDisinherit>
 8003dd8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
 8003de0:	e043      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d119      	bne.n	8003e1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6898      	ldr	r0, [r3, #8]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df0:	461a      	mov	r2, r3
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	f001 ff44 	bl	8005c80 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e00:	441a      	add	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	689a      	ldr	r2, [r3, #8]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d32b      	bcc.n	8003e6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	609a      	str	r2, [r3, #8]
 8003e1a:	e026      	b.n	8003e6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	68d8      	ldr	r0, [r3, #12]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	461a      	mov	r2, r3
 8003e26:	68b9      	ldr	r1, [r7, #8]
 8003e28:	f001 ff2a 	bl	8005c80 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	68da      	ldr	r2, [r3, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	425b      	negs	r3, r3
 8003e36:	441a      	add	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	68da      	ldr	r2, [r3, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d207      	bcs.n	8003e58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	425b      	negs	r3, r3
 8003e52:	441a      	add	r2, r3
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d105      	bne.n	8003e6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	3b01      	subs	r3, #1
 8003e68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003e72:	697b      	ldr	r3, [r7, #20]
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3718      	adds	r7, #24
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d018      	beq.n	8003ec0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e96:	441a      	add	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68da      	ldr	r2, [r3, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d303      	bcc.n	8003eb0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68d9      	ldr	r1, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6838      	ldr	r0, [r7, #0]
 8003ebc:	f001 fee0 	bl	8005c80 <memcpy>
	}
}
 8003ec0:	bf00      	nop
 8003ec2:	3708      	adds	r7, #8
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003ed0:	f001 fbd4 	bl	800567c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003eda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003edc:	e011      	b.n	8003f02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d012      	beq.n	8003f0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3324      	adds	r3, #36	; 0x24
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fd1e 	bl	800492c <xTaskRemoveFromEventList>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ef6:	f000 fdf5 	bl	8004ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	dce9      	bgt.n	8003ede <prvUnlockQueue+0x16>
 8003f0a:	e000      	b.n	8003f0e <prvUnlockQueue+0x46>
					break;
 8003f0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	22ff      	movs	r2, #255	; 0xff
 8003f12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003f16:	f001 fbe1 	bl	80056dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003f1a:	f001 fbaf 	bl	800567c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f26:	e011      	b.n	8003f4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3310      	adds	r3, #16
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fcf9 	bl	800492c <xTaskRemoveFromEventList>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003f40:	f000 fdd0 	bl	8004ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003f44:	7bbb      	ldrb	r3, [r7, #14]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	dce9      	bgt.n	8003f28 <prvUnlockQueue+0x60>
 8003f54:	e000      	b.n	8003f58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003f56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	22ff      	movs	r2, #255	; 0xff
 8003f5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003f60:	f001 fbbc 	bl	80056dc <vPortExitCritical>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003f74:	f001 fb82 	bl	800567c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d102      	bne.n	8003f86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003f80:	2301      	movs	r3, #1
 8003f82:	60fb      	str	r3, [r7, #12]
 8003f84:	e001      	b.n	8003f8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003f8a:	f001 fba7 	bl	80056dc <vPortExitCritical>

	return xReturn;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}

08003f98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003fa0:	f001 fb6c 	bl	800567c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d102      	bne.n	8003fb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	60fb      	str	r3, [r7, #12]
 8003fb4:	e001      	b.n	8003fba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003fba:	f001 fb8f 	bl	80056dc <vPortExitCritical>

	return xReturn;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	e014      	b.n	8004002 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003fd8:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <vQueueAddToRegistry+0x4c>)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003fe4:	490b      	ldr	r1, [pc, #44]	; (8004014 <vQueueAddToRegistry+0x4c>)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <vQueueAddToRegistry+0x4c>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003ffa:	e006      	b.n	800400a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	3301      	adds	r3, #1
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b07      	cmp	r3, #7
 8004006:	d9e7      	bls.n	8003fd8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr
 8004014:	200022d8 	.word	0x200022d8

08004018 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004028:	f001 fb28 	bl	800567c <vPortEnterCritical>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004032:	b25b      	sxtb	r3, r3
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d103      	bne.n	8004042 <vQueueWaitForMessageRestricted+0x2a>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004048:	b25b      	sxtb	r3, r3
 800404a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800404e:	d103      	bne.n	8004058 <vQueueWaitForMessageRestricted+0x40>
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004058:	f001 fb40 	bl	80056dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	2b00      	cmp	r3, #0
 8004062:	d106      	bne.n	8004072 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	3324      	adds	r3, #36	; 0x24
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	68b9      	ldr	r1, [r7, #8]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 fc31 	bl	80048d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004072:	6978      	ldr	r0, [r7, #20]
 8004074:	f7ff ff28 	bl	8003ec8 <prvUnlockQueue>
	}
 8004078:	bf00      	nop
 800407a:	3718      	adds	r7, #24
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004080:	b580      	push	{r7, lr}
 8004082:	b08e      	sub	sp, #56	; 0x38
 8004084:	af04      	add	r7, sp, #16
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800408e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10a      	bne.n	80040aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	623b      	str	r3, [r7, #32]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80040aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d10a      	bne.n	80040c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	61fb      	str	r3, [r7, #28]
}
 80040c2:	bf00      	nop
 80040c4:	e7fe      	b.n	80040c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80040c6:	235c      	movs	r3, #92	; 0x5c
 80040c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	2b5c      	cmp	r3, #92	; 0x5c
 80040ce:	d00a      	beq.n	80040e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61bb      	str	r3, [r7, #24]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01e      	beq.n	800412a <xTaskCreateStatic+0xaa>
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d01b      	beq.n	800412a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040fa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004104:	2300      	movs	r3, #0
 8004106:	9303      	str	r3, [sp, #12]
 8004108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	f107 0314 	add.w	r3, r7, #20
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	68b9      	ldr	r1, [r7, #8]
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 f850 	bl	80041c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004122:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004124:	f000 f8d4 	bl	80042d0 <prvAddNewTaskToReadyList>
 8004128:	e001      	b.n	800412e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800412e:	697b      	ldr	r3, [r7, #20]
	}
 8004130:	4618      	mov	r0, r3
 8004132:	3728      	adds	r7, #40	; 0x28
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	; 0x30
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004148:	88fb      	ldrh	r3, [r7, #6]
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4618      	mov	r0, r3
 800414e:	f001 fb95 	bl	800587c <pvPortMalloc>
 8004152:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00e      	beq.n	8004178 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800415a:	205c      	movs	r0, #92	; 0x5c
 800415c:	f001 fb8e 	bl	800587c <pvPortMalloc>
 8004160:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
 800416e:	e005      	b.n	800417c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004170:	6978      	ldr	r0, [r7, #20]
 8004172:	f001 fc47 	bl	8005a04 <vPortFree>
 8004176:	e001      	b.n	800417c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004178:	2300      	movs	r3, #0
 800417a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d017      	beq.n	80041b2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800418a:	88fa      	ldrh	r2, [r7, #6]
 800418c:	2300      	movs	r3, #0
 800418e:	9303      	str	r3, [sp, #12]
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	9302      	str	r3, [sp, #8]
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f80e 	bl	80041c2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041a6:	69f8      	ldr	r0, [r7, #28]
 80041a8:	f000 f892 	bl	80042d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041ac:	2301      	movs	r3, #1
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e002      	b.n	80041b8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041b2:	f04f 33ff 	mov.w	r3, #4294967295
 80041b6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80041b8:	69bb      	ldr	r3, [r7, #24]
	}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
 80041ce:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	461a      	mov	r2, r3
 80041da:	21a5      	movs	r1, #165	; 0xa5
 80041dc:	f001 fd5e 	bl	8005c9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041ea:	3b01      	subs	r3, #1
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00a      	beq.n	800421a <prvInitialiseNewTask+0x58>
	__asm volatile
 8004204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004208:	f383 8811 	msr	BASEPRI, r3
 800420c:	f3bf 8f6f 	isb	sy
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	617b      	str	r3, [r7, #20]
}
 8004216:	bf00      	nop
 8004218:	e7fe      	b.n	8004218 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e012      	b.n	8004246 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	4413      	add	r3, r2
 8004226:	7819      	ldrb	r1, [r3, #0]
 8004228:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	3334      	adds	r3, #52	; 0x34
 8004230:	460a      	mov	r2, r1
 8004232:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d006      	beq.n	800424e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	2b0f      	cmp	r3, #15
 800424a:	d9e9      	bls.n	8004220 <prvInitialiseNewTask+0x5e>
 800424c:	e000      	b.n	8004250 <prvInitialiseNewTask+0x8e>
		{
			break;
 800424e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	2b37      	cmp	r3, #55	; 0x37
 800425c:	d901      	bls.n	8004262 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800425e:	2337      	movs	r3, #55	; 0x37
 8004260:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004264:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800426c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	2200      	movs	r2, #0
 8004272:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004276:	3304      	adds	r3, #4
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff f98c 	bl	8003596 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800427e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004280:	3318      	adds	r3, #24
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff f987 	bl	8003596 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800428c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800428e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004290:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800429c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	2200      	movs	r2, #0
 80042a2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	69b8      	ldr	r0, [r7, #24]
 80042b2:	f001 f8ef 	bl	8005494 <pxPortInitialiseStack>
 80042b6:	4602      	mov	r2, r0
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80042bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042c8:	bf00      	nop
 80042ca:	3720      	adds	r7, #32
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80042d8:	f001 f9d0 	bl	800567c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <prvAddNewTaskToReadyList+0xc4>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <prvAddNewTaskToReadyList+0xc4>)
 80042e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80042e6:	4b2c      	ldr	r3, [pc, #176]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d109      	bne.n	8004302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80042ee:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <prvAddNewTaskToReadyList+0xc4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d110      	bne.n	800431e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80042fc:	f000 fc16 	bl	8004b2c <prvInitialiseTaskLists>
 8004300:	e00d      	b.n	800431e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004302:	4b26      	ldr	r3, [pc, #152]	; (800439c <prvAddNewTaskToReadyList+0xcc>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800430a:	4b23      	ldr	r3, [pc, #140]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	429a      	cmp	r2, r3
 8004316:	d802      	bhi.n	800431e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800431e:	4b20      	ldr	r3, [pc, #128]	; (80043a0 <prvAddNewTaskToReadyList+0xd0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	4a1e      	ldr	r2, [pc, #120]	; (80043a0 <prvAddNewTaskToReadyList+0xd0>)
 8004326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004328:	4b1d      	ldr	r3, [pc, #116]	; (80043a0 <prvAddNewTaskToReadyList+0xd0>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <prvAddNewTaskToReadyList+0xd4>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	429a      	cmp	r2, r3
 800433a:	d903      	bls.n	8004344 <prvAddNewTaskToReadyList+0x74>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <prvAddNewTaskToReadyList+0xd4>)
 8004342:	6013      	str	r3, [r2, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4613      	mov	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <prvAddNewTaskToReadyList+0xd8>)
 8004352:	441a      	add	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	3304      	adds	r3, #4
 8004358:	4619      	mov	r1, r3
 800435a:	4610      	mov	r0, r2
 800435c:	f7ff f927 	bl	80035ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004360:	f001 f9bc 	bl	80056dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004364:	4b0d      	ldr	r3, [pc, #52]	; (800439c <prvAddNewTaskToReadyList+0xcc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800436c:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <prvAddNewTaskToReadyList+0xc8>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	429a      	cmp	r2, r3
 8004378:	d207      	bcs.n	800438a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800437a:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <prvAddNewTaskToReadyList+0xdc>)
 800437c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004380:	601a      	str	r2, [r3, #0]
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	20001424 	.word	0x20001424
 8004398:	20000f50 	.word	0x20000f50
 800439c:	20001430 	.word	0x20001430
 80043a0:	20001440 	.word	0x20001440
 80043a4:	2000142c 	.word	0x2000142c
 80043a8:	20000f54 	.word	0x20000f54
 80043ac:	e000ed04 	.word	0xe000ed04

080043b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d017      	beq.n	80043f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043c2:	4b13      	ldr	r3, [pc, #76]	; (8004410 <vTaskDelay+0x60>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00a      	beq.n	80043e0 <vTaskDelay+0x30>
	__asm volatile
 80043ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ce:	f383 8811 	msr	BASEPRI, r3
 80043d2:	f3bf 8f6f 	isb	sy
 80043d6:	f3bf 8f4f 	dsb	sy
 80043da:	60bb      	str	r3, [r7, #8]
}
 80043dc:	bf00      	nop
 80043de:	e7fe      	b.n	80043de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80043e0:	f000 f880 	bl	80044e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80043e4:	2100      	movs	r1, #0
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 fcee 	bl	8004dc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80043ec:	f000 f888 	bl	8004500 <xTaskResumeAll>
 80043f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d107      	bne.n	8004408 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80043f8:	4b06      	ldr	r3, [pc, #24]	; (8004414 <vTaskDelay+0x64>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004408:	bf00      	nop
 800440a:	3710      	adds	r7, #16
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	2000144c 	.word	0x2000144c
 8004414:	e000ed04 	.word	0xe000ed04

08004418 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004426:	463a      	mov	r2, r7
 8004428:	1d39      	adds	r1, r7, #4
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4618      	mov	r0, r3
 8004430:	f7ff f860 	bl	80034f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004434:	6839      	ldr	r1, [r7, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	9202      	str	r2, [sp, #8]
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	2300      	movs	r3, #0
 8004440:	9300      	str	r3, [sp, #0]
 8004442:	2300      	movs	r3, #0
 8004444:	460a      	mov	r2, r1
 8004446:	4921      	ldr	r1, [pc, #132]	; (80044cc <vTaskStartScheduler+0xb4>)
 8004448:	4821      	ldr	r0, [pc, #132]	; (80044d0 <vTaskStartScheduler+0xb8>)
 800444a:	f7ff fe19 	bl	8004080 <xTaskCreateStatic>
 800444e:	4603      	mov	r3, r0
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <vTaskStartScheduler+0xbc>)
 8004452:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004454:	4b1f      	ldr	r3, [pc, #124]	; (80044d4 <vTaskStartScheduler+0xbc>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d002      	beq.n	8004462 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800445c:	2301      	movs	r3, #1
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e001      	b.n	8004466 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004462:	2300      	movs	r3, #0
 8004464:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d102      	bne.n	8004472 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800446c:	f000 fd00 	bl	8004e70 <xTimerCreateTimerTask>
 8004470:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d116      	bne.n	80044a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	613b      	str	r3, [r7, #16]
}
 800448a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800448c:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <vTaskStartScheduler+0xc0>)
 800448e:	f04f 32ff 	mov.w	r2, #4294967295
 8004492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004494:	4b11      	ldr	r3, [pc, #68]	; (80044dc <vTaskStartScheduler+0xc4>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800449a:	4b11      	ldr	r3, [pc, #68]	; (80044e0 <vTaskStartScheduler+0xc8>)
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044a0:	f001 f87a 	bl	8005598 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044a4:	e00e      	b.n	80044c4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ac:	d10a      	bne.n	80044c4 <vTaskStartScheduler+0xac>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	60fb      	str	r3, [r7, #12]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <vTaskStartScheduler+0xaa>
}
 80044c4:	bf00      	nop
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	080065c0 	.word	0x080065c0
 80044d0:	08004afd 	.word	0x08004afd
 80044d4:	20001448 	.word	0x20001448
 80044d8:	20001444 	.word	0x20001444
 80044dc:	20001430 	.word	0x20001430
 80044e0:	20001428 	.word	0x20001428

080044e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044e4:	b480      	push	{r7}
 80044e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044e8:	4b04      	ldr	r3, [pc, #16]	; (80044fc <vTaskSuspendAll+0x18>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	3301      	adds	r3, #1
 80044ee:	4a03      	ldr	r2, [pc, #12]	; (80044fc <vTaskSuspendAll+0x18>)
 80044f0:	6013      	str	r3, [r2, #0]
}
 80044f2:	bf00      	nop
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	2000144c 	.word	0x2000144c

08004500 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004506:	2300      	movs	r3, #0
 8004508:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800450a:	2300      	movs	r3, #0
 800450c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800450e:	4b42      	ldr	r3, [pc, #264]	; (8004618 <xTaskResumeAll+0x118>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xTaskResumeAll+0x2c>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	603b      	str	r3, [r7, #0]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800452c:	f001 f8a6 	bl	800567c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004530:	4b39      	ldr	r3, [pc, #228]	; (8004618 <xTaskResumeAll+0x118>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3b01      	subs	r3, #1
 8004536:	4a38      	ldr	r2, [pc, #224]	; (8004618 <xTaskResumeAll+0x118>)
 8004538:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800453a:	4b37      	ldr	r3, [pc, #220]	; (8004618 <xTaskResumeAll+0x118>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d162      	bne.n	8004608 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004542:	4b36      	ldr	r3, [pc, #216]	; (800461c <xTaskResumeAll+0x11c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d05e      	beq.n	8004608 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800454a:	e02f      	b.n	80045ac <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800454c:	4b34      	ldr	r3, [pc, #208]	; (8004620 <xTaskResumeAll+0x120>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3318      	adds	r3, #24
 8004558:	4618      	mov	r0, r3
 800455a:	f7ff f883 	bl	8003664 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	3304      	adds	r3, #4
 8004562:	4618      	mov	r0, r3
 8004564:	f7ff f87e 	bl	8003664 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456c:	4b2d      	ldr	r3, [pc, #180]	; (8004624 <xTaskResumeAll+0x124>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d903      	bls.n	800457c <xTaskResumeAll+0x7c>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	4a2a      	ldr	r2, [pc, #168]	; (8004624 <xTaskResumeAll+0x124>)
 800457a:	6013      	str	r3, [r2, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004580:	4613      	mov	r3, r2
 8004582:	009b      	lsls	r3, r3, #2
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <xTaskResumeAll+0x128>)
 800458a:	441a      	add	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	3304      	adds	r3, #4
 8004590:	4619      	mov	r1, r3
 8004592:	4610      	mov	r0, r2
 8004594:	f7ff f80b 	bl	80035ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800459c:	4b23      	ldr	r3, [pc, #140]	; (800462c <xTaskResumeAll+0x12c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d302      	bcc.n	80045ac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80045a6:	4b22      	ldr	r3, [pc, #136]	; (8004630 <xTaskResumeAll+0x130>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ac:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <xTaskResumeAll+0x120>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1cb      	bne.n	800454c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045ba:	f000 fb55 	bl	8004c68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045be:	4b1d      	ldr	r3, [pc, #116]	; (8004634 <xTaskResumeAll+0x134>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d010      	beq.n	80045ec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045ca:	f000 f845 	bl	8004658 <xTaskIncrementTick>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d002      	beq.n	80045da <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80045d4:	4b16      	ldr	r3, [pc, #88]	; (8004630 <xTaskResumeAll+0x130>)
 80045d6:	2201      	movs	r2, #1
 80045d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	3b01      	subs	r3, #1
 80045de:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f1      	bne.n	80045ca <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80045e6:	4b13      	ldr	r3, [pc, #76]	; (8004634 <xTaskResumeAll+0x134>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <xTaskResumeAll+0x130>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d009      	beq.n	8004608 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <xTaskResumeAll+0x138>)
 80045fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004608:	f001 f868 	bl	80056dc <vPortExitCritical>

	return xAlreadyYielded;
 800460c:	68bb      	ldr	r3, [r7, #8]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	2000144c 	.word	0x2000144c
 800461c:	20001424 	.word	0x20001424
 8004620:	200013e4 	.word	0x200013e4
 8004624:	2000142c 	.word	0x2000142c
 8004628:	20000f54 	.word	0x20000f54
 800462c:	20000f50 	.word	0x20000f50
 8004630:	20001438 	.word	0x20001438
 8004634:	20001434 	.word	0x20001434
 8004638:	e000ed04 	.word	0xe000ed04

0800463c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004642:	4b04      	ldr	r3, [pc, #16]	; (8004654 <xTaskGetTickCount+0x18>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004648:	687b      	ldr	r3, [r7, #4]
}
 800464a:	4618      	mov	r0, r3
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr
 8004654:	20001428 	.word	0x20001428

08004658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800465e:	2300      	movs	r3, #0
 8004660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004662:	4b51      	ldr	r3, [pc, #324]	; (80047a8 <xTaskIncrementTick+0x150>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 808e 	bne.w	8004788 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <xTaskIncrementTick+0x154>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004674:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <xTaskIncrementTick+0x154>)
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d120      	bne.n	80046c2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004680:	4b4b      	ldr	r3, [pc, #300]	; (80047b0 <xTaskIncrementTick+0x158>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <xTaskIncrementTick+0x48>
	__asm volatile
 800468a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800468e:	f383 8811 	msr	BASEPRI, r3
 8004692:	f3bf 8f6f 	isb	sy
 8004696:	f3bf 8f4f 	dsb	sy
 800469a:	603b      	str	r3, [r7, #0]
}
 800469c:	bf00      	nop
 800469e:	e7fe      	b.n	800469e <xTaskIncrementTick+0x46>
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <xTaskIncrementTick+0x158>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	4b43      	ldr	r3, [pc, #268]	; (80047b4 <xTaskIncrementTick+0x15c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a41      	ldr	r2, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x158>)
 80046ac:	6013      	str	r3, [r2, #0]
 80046ae:	4a41      	ldr	r2, [pc, #260]	; (80047b4 <xTaskIncrementTick+0x15c>)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6013      	str	r3, [r2, #0]
 80046b4:	4b40      	ldr	r3, [pc, #256]	; (80047b8 <xTaskIncrementTick+0x160>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3301      	adds	r3, #1
 80046ba:	4a3f      	ldr	r2, [pc, #252]	; (80047b8 <xTaskIncrementTick+0x160>)
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	f000 fad3 	bl	8004c68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046c2:	4b3e      	ldr	r3, [pc, #248]	; (80047bc <xTaskIncrementTick+0x164>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d34e      	bcc.n	800476a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046cc:	4b38      	ldr	r3, [pc, #224]	; (80047b0 <xTaskIncrementTick+0x158>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <xTaskIncrementTick+0x82>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e000      	b.n	80046dc <xTaskIncrementTick+0x84>
 80046da:	2300      	movs	r3, #0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d004      	beq.n	80046ea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <xTaskIncrementTick+0x164>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
					break;
 80046e8:	e03f      	b.n	800476a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xTaskIncrementTick+0x158>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004702:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <xTaskIncrementTick+0x164>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]
						break;
 8004708:	e02f      	b.n	800476a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3304      	adds	r3, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ffa8 	bl	8003664 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3318      	adds	r3, #24
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe ff9f 	bl	8003664 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800472a:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <xTaskIncrementTick+0x168>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d903      	bls.n	800473a <xTaskIncrementTick+0xe2>
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004736:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <xTaskIncrementTick+0x168>)
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <xTaskIncrementTick+0x16c>)
 8004748:	441a      	add	r2, r3
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f7fe ff2c 	bl	80035ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <xTaskIncrementTick+0x170>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	429a      	cmp	r2, r3
 8004762:	d3b3      	bcc.n	80046cc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004768:	e7b0      	b.n	80046cc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <xTaskIncrementTick+0x170>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	4914      	ldr	r1, [pc, #80]	; (80047c4 <xTaskIncrementTick+0x16c>)
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b01      	cmp	r3, #1
 8004780:	d907      	bls.n	8004792 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004782:	2301      	movs	r3, #1
 8004784:	617b      	str	r3, [r7, #20]
 8004786:	e004      	b.n	8004792 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004788:	4b10      	ldr	r3, [pc, #64]	; (80047cc <xTaskIncrementTick+0x174>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <xTaskIncrementTick+0x174>)
 8004790:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskIncrementTick+0x178>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800479a:	2301      	movs	r3, #1
 800479c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800479e:	697b      	ldr	r3, [r7, #20]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3718      	adds	r7, #24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	2000144c 	.word	0x2000144c
 80047ac:	20001428 	.word	0x20001428
 80047b0:	200013dc 	.word	0x200013dc
 80047b4:	200013e0 	.word	0x200013e0
 80047b8:	2000143c 	.word	0x2000143c
 80047bc:	20001444 	.word	0x20001444
 80047c0:	2000142c 	.word	0x2000142c
 80047c4:	20000f54 	.word	0x20000f54
 80047c8:	20000f50 	.word	0x20000f50
 80047cc:	20001434 	.word	0x20001434
 80047d0:	20001438 	.word	0x20001438

080047d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <vTaskSwitchContext+0xa4>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047e2:	4b26      	ldr	r3, [pc, #152]	; (800487c <vTaskSwitchContext+0xa8>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e8:	e041      	b.n	800486e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80047ea:	4b24      	ldr	r3, [pc, #144]	; (800487c <vTaskSwitchContext+0xa8>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <vTaskSwitchContext+0xac>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	e010      	b.n	800481a <vTaskSwitchContext+0x46>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vTaskSwitchContext+0x40>
	__asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	607b      	str	r3, [r7, #4]
}
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vTaskSwitchContext+0x3e>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	491a      	ldr	r1, [pc, #104]	; (8004884 <vTaskSwitchContext+0xb0>)
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0e4      	beq.n	80047f8 <vTaskSwitchContext+0x24>
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a12      	ldr	r2, [pc, #72]	; (8004884 <vTaskSwitchContext+0xb0>)
 800483a:	4413      	add	r3, r2
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3308      	adds	r3, #8
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <vTaskSwitchContext+0x8a>
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a08      	ldr	r2, [pc, #32]	; (8004888 <vTaskSwitchContext+0xb4>)
 8004866:	6013      	str	r3, [r2, #0]
 8004868:	4a05      	ldr	r2, [pc, #20]	; (8004880 <vTaskSwitchContext+0xac>)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6013      	str	r3, [r2, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	2000144c 	.word	0x2000144c
 800487c:	20001438 	.word	0x20001438
 8004880:	2000142c 	.word	0x2000142c
 8004884:	20000f54 	.word	0x20000f54
 8004888:	20000f50 	.word	0x20000f50

0800488c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10a      	bne.n	80048b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	60fb      	str	r3, [r7, #12]
}
 80048ae:	bf00      	nop
 80048b0:	e7fe      	b.n	80048b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <vTaskPlaceOnEventList+0x44>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	3318      	adds	r3, #24
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fe fe9a 	bl	80035f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048c0:	2101      	movs	r1, #1
 80048c2:	6838      	ldr	r0, [r7, #0]
 80048c4:	f000 fa80 	bl	8004dc8 <prvAddCurrentTaskToDelayedList>
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	20000f50 	.word	0x20000f50

080048d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	60f8      	str	r0, [r7, #12]
 80048dc:	60b9      	str	r1, [r7, #8]
 80048de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	617b      	str	r3, [r7, #20]
}
 80048f8:	bf00      	nop
 80048fa:	e7fe      	b.n	80048fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048fc:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <vTaskPlaceOnEventListRestricted+0x54>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3318      	adds	r3, #24
 8004902:	4619      	mov	r1, r3
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f7fe fe52 	bl	80035ae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d002      	beq.n	8004916 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004910:	f04f 33ff 	mov.w	r3, #4294967295
 8004914:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	68b8      	ldr	r0, [r7, #8]
 800491a:	f000 fa55 	bl	8004dc8 <prvAddCurrentTaskToDelayedList>
	}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20000f50 	.word	0x20000f50

0800492c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60fb      	str	r3, [r7, #12]
}
 8004954:	bf00      	nop
 8004956:	e7fe      	b.n	8004956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	3318      	adds	r3, #24
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe fe81 	bl	8003664 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004962:	4b1e      	ldr	r3, [pc, #120]	; (80049dc <xTaskRemoveFromEventList+0xb0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11d      	bne.n	80049a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	3304      	adds	r3, #4
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe fe78 	bl	8003664 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <xTaskRemoveFromEventList+0xb4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d903      	bls.n	8004988 <xTaskRemoveFromEventList+0x5c>
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <xTaskRemoveFromEventList+0xb4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <xTaskRemoveFromEventList+0xb8>)
 8004996:	441a      	add	r2, r3
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7fe fe05 	bl	80035ae <vListInsertEnd>
 80049a4:	e005      	b.n	80049b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3318      	adds	r3, #24
 80049aa:	4619      	mov	r1, r3
 80049ac:	480e      	ldr	r0, [pc, #56]	; (80049e8 <xTaskRemoveFromEventList+0xbc>)
 80049ae:	f7fe fdfe 	bl	80035ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	4b0d      	ldr	r3, [pc, #52]	; (80049ec <xTaskRemoveFromEventList+0xc0>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049bc:	429a      	cmp	r2, r3
 80049be:	d905      	bls.n	80049cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80049c4:	4b0a      	ldr	r3, [pc, #40]	; (80049f0 <xTaskRemoveFromEventList+0xc4>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e001      	b.n	80049d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80049d0:	697b      	ldr	r3, [r7, #20]
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	2000144c 	.word	0x2000144c
 80049e0:	2000142c 	.word	0x2000142c
 80049e4:	20000f54 	.word	0x20000f54
 80049e8:	200013e4 	.word	0x200013e4
 80049ec:	20000f50 	.word	0x20000f50
 80049f0:	20001438 	.word	0x20001438

080049f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80049f4:	b480      	push	{r7}
 80049f6:	b083      	sub	sp, #12
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80049fc:	4b06      	ldr	r3, [pc, #24]	; (8004a18 <vTaskInternalSetTimeOutState+0x24>)
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004a04:	4b05      	ldr	r3, [pc, #20]	; (8004a1c <vTaskInternalSetTimeOutState+0x28>)
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	605a      	str	r2, [r3, #4]
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bc80      	pop	{r7}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	2000143c 	.word	0x2000143c
 8004a1c:	20001428 	.word	0x20001428

08004a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	613b      	str	r3, [r7, #16]
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	60fb      	str	r3, [r7, #12]
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004a62:	f000 fe0b 	bl	800567c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <xTaskCheckForTimeOut+0xbc>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	69ba      	ldr	r2, [r7, #24]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7e:	d102      	bne.n	8004a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	61fb      	str	r3, [r7, #28]
 8004a84:	e023      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b15      	ldr	r3, [pc, #84]	; (8004ae0 <xTaskCheckForTimeOut+0xc0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d007      	beq.n	8004aa2 <xTaskCheckForTimeOut+0x82>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	69ba      	ldr	r2, [r7, #24]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d302      	bcc.n	8004aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e015      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d20b      	bcs.n	8004ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	1ad2      	subs	r2, r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f7ff ff9b 	bl	80049f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	e004      	b.n	8004ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ace:	f000 fe05 	bl	80056dc <vPortExitCritical>

	return xReturn;
 8004ad2:	69fb      	ldr	r3, [r7, #28]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3720      	adds	r7, #32
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	20001428 	.word	0x20001428
 8004ae0:	2000143c 	.word	0x2000143c

08004ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ae8:	4b03      	ldr	r3, [pc, #12]	; (8004af8 <vTaskMissedYield+0x14>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bc80      	pop	{r7}
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	20001438 	.word	0x20001438

08004afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004b04:	f000 f852 	bl	8004bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b08:	4b06      	ldr	r3, [pc, #24]	; (8004b24 <prvIdleTask+0x28>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d9f9      	bls.n	8004b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <prvIdleTask+0x2c>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004b20:	e7f0      	b.n	8004b04 <prvIdleTask+0x8>
 8004b22:	bf00      	nop
 8004b24:	20000f54 	.word	0x20000f54
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
 8004b36:	e00c      	b.n	8004b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	4613      	mov	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	4413      	add	r3, r2
 8004b40:	009b      	lsls	r3, r3, #2
 8004b42:	4a12      	ldr	r2, [pc, #72]	; (8004b8c <prvInitialiseTaskLists+0x60>)
 8004b44:	4413      	add	r3, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f7fe fd06 	bl	8003558 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	607b      	str	r3, [r7, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b37      	cmp	r3, #55	; 0x37
 8004b56:	d9ef      	bls.n	8004b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004b58:	480d      	ldr	r0, [pc, #52]	; (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b5a:	f7fe fcfd 	bl	8003558 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004b5e:	480d      	ldr	r0, [pc, #52]	; (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b60:	f7fe fcfa 	bl	8003558 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b64:	480c      	ldr	r0, [pc, #48]	; (8004b98 <prvInitialiseTaskLists+0x6c>)
 8004b66:	f7fe fcf7 	bl	8003558 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b6a:	480c      	ldr	r0, [pc, #48]	; (8004b9c <prvInitialiseTaskLists+0x70>)
 8004b6c:	f7fe fcf4 	bl	8003558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b70:	480b      	ldr	r0, [pc, #44]	; (8004ba0 <prvInitialiseTaskLists+0x74>)
 8004b72:	f7fe fcf1 	bl	8003558 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b76:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <prvInitialiseTaskLists+0x78>)
 8004b78:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <prvInitialiseTaskLists+0x64>)
 8004b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b7c:	4b0a      	ldr	r3, [pc, #40]	; (8004ba8 <prvInitialiseTaskLists+0x7c>)
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <prvInitialiseTaskLists+0x68>)
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000f54 	.word	0x20000f54
 8004b90:	200013b4 	.word	0x200013b4
 8004b94:	200013c8 	.word	0x200013c8
 8004b98:	200013e4 	.word	0x200013e4
 8004b9c:	200013f8 	.word	0x200013f8
 8004ba0:	20001410 	.word	0x20001410
 8004ba4:	200013dc 	.word	0x200013dc
 8004ba8:	200013e0 	.word	0x200013e0

08004bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bb2:	e019      	b.n	8004be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004bb4:	f000 fd62 	bl	800567c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004bb8:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <prvCheckTasksWaitingTermination+0x50>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fd4d 	bl	8003664 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	4a0b      	ldr	r2, [pc, #44]	; (8004c00 <prvCheckTasksWaitingTermination+0x54>)
 8004bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	4a0a      	ldr	r2, [pc, #40]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004bde:	f000 fd7d 	bl	80056dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f810 	bl	8004c08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <prvCheckTasksWaitingTermination+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e1      	bne.n	8004bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200013f8 	.word	0x200013f8
 8004c00:	20001424 	.word	0x20001424
 8004c04:	2000140c 	.word	0x2000140c

08004c08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d108      	bne.n	8004c2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fef0 	bl	8005a04 <vPortFree>
				vPortFree( pxTCB );
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 feed 	bl	8005a04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004c2a:	e018      	b.n	8004c5e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d103      	bne.n	8004c3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 fee4 	bl	8005a04 <vPortFree>
	}
 8004c3c:	e00f      	b.n	8004c5e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d00a      	beq.n	8004c5e <prvDeleteTCB+0x56>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <prvDeleteTCB+0x54>
	}
 8004c5e:	bf00      	nop
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
	...

08004c68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ca8 <prvResetNextTaskUnblockTime+0x40>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <prvResetNextTaskUnblockTime+0x14>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <prvResetNextTaskUnblockTime+0x16>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d004      	beq.n	8004c8c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c82:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <prvResetNextTaskUnblockTime+0x44>)
 8004c84:	f04f 32ff 	mov.w	r2, #4294967295
 8004c88:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c8a:	e008      	b.n	8004c9e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <prvResetNextTaskUnblockTime+0x40>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4a04      	ldr	r2, [pc, #16]	; (8004cac <prvResetNextTaskUnblockTime+0x44>)
 8004c9c:	6013      	str	r3, [r2, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	200013dc 	.word	0x200013dc
 8004cac:	20001444 	.word	0x20001444

08004cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004cb6:	4b0b      	ldr	r3, [pc, #44]	; (8004ce4 <xTaskGetSchedulerState+0x34>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	607b      	str	r3, [r7, #4]
 8004cc2:	e008      	b.n	8004cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc4:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <xTaskGetSchedulerState+0x38>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ccc:	2302      	movs	r3, #2
 8004cce:	607b      	str	r3, [r7, #4]
 8004cd0:	e001      	b.n	8004cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004cd6:	687b      	ldr	r3, [r7, #4]
	}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	20001430 	.word	0x20001430
 8004ce8:	2000144c 	.word	0x2000144c

08004cec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d056      	beq.n	8004db0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <xTaskPriorityDisinherit+0xd0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d00a      	beq.n	8004d22 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60fb      	str	r3, [r7, #12]
}
 8004d1e:	bf00      	nop
 8004d20:	e7fe      	b.n	8004d20 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d10a      	bne.n	8004d40 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2e:	f383 8811 	msr	BASEPRI, r3
 8004d32:	f3bf 8f6f 	isb	sy
 8004d36:	f3bf 8f4f 	dsb	sy
 8004d3a:	60bb      	str	r3, [r7, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	e7fe      	b.n	8004d3e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d44:	1e5a      	subs	r2, r3, #1
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d02c      	beq.n	8004db0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d128      	bne.n	8004db0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	3304      	adds	r3, #4
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fe fc7e 	bl	8003664 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d80:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <xTaskPriorityDisinherit+0xd4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d903      	bls.n	8004d90 <xTaskPriorityDisinherit+0xa4>
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <xTaskPriorityDisinherit+0xd4>)
 8004d8e:	6013      	str	r3, [r2, #0]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	4a09      	ldr	r2, [pc, #36]	; (8004dc4 <xTaskPriorityDisinherit+0xd8>)
 8004d9e:	441a      	add	r2, r3
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f7fe fc01 	bl	80035ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004db0:	697b      	ldr	r3, [r7, #20]
	}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3718      	adds	r7, #24
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	20000f50 	.word	0x20000f50
 8004dc0:	2000142c 	.word	0x2000142c
 8004dc4:	20000f54 	.word	0x20000f54

08004dc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004dd2:	4b21      	ldr	r3, [pc, #132]	; (8004e58 <prvAddCurrentTaskToDelayedList+0x90>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dd8:	4b20      	ldr	r3, [pc, #128]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fc40 	bl	8003664 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dea:	d10a      	bne.n	8004e02 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d007      	beq.n	8004e02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004df2:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4819      	ldr	r0, [pc, #100]	; (8004e60 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dfc:	f7fe fbd7 	bl	80035ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e00:	e026      	b.n	8004e50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4413      	add	r3, r2
 8004e08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e0a:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d209      	bcs.n	8004e2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3304      	adds	r3, #4
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fe fbe4 	bl	80035f4 <vListInsert>
}
 8004e2c:	e010      	b.n	8004e50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e2e:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <prvAddCurrentTaskToDelayedList+0x94>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3304      	adds	r3, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	f7fe fbda 	bl	80035f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68ba      	ldr	r2, [r7, #8]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d202      	bcs.n	8004e50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e4a:	4a08      	ldr	r2, [pc, #32]	; (8004e6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6013      	str	r3, [r2, #0]
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	20001428 	.word	0x20001428
 8004e5c:	20000f50 	.word	0x20000f50
 8004e60:	20001410 	.word	0x20001410
 8004e64:	200013e0 	.word	0x200013e0
 8004e68:	200013dc 	.word	0x200013dc
 8004e6c:	20001444 	.word	0x20001444

08004e70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08a      	sub	sp, #40	; 0x28
 8004e74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004e7a:	f000 facb 	bl	8005414 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004e7e:	4b1c      	ldr	r3, [pc, #112]	; (8004ef0 <xTimerCreateTimerTask+0x80>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d021      	beq.n	8004eca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004e8e:	1d3a      	adds	r2, r7, #4
 8004e90:	f107 0108 	add.w	r1, r7, #8
 8004e94:	f107 030c 	add.w	r3, r7, #12
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7fe fb43 	bl	8003524 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	68fa      	ldr	r2, [r7, #12]
 8004ea4:	9202      	str	r2, [sp, #8]
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	2300      	movs	r3, #0
 8004eae:	460a      	mov	r2, r1
 8004eb0:	4910      	ldr	r1, [pc, #64]	; (8004ef4 <xTimerCreateTimerTask+0x84>)
 8004eb2:	4811      	ldr	r0, [pc, #68]	; (8004ef8 <xTimerCreateTimerTask+0x88>)
 8004eb4:	f7ff f8e4 	bl	8004080 <xTaskCreateStatic>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <xTimerCreateTimerTask+0x8c>)
 8004ebc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004ebe:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <xTimerCreateTimerTask+0x8c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10a      	bne.n	8004ee6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	613b      	str	r3, [r7, #16]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3718      	adds	r7, #24
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20001480 	.word	0x20001480
 8004ef4:	080065c8 	.word	0x080065c8
 8004ef8:	0800501d 	.word	0x0800501d
 8004efc:	20001484 	.word	0x20001484

08004f00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b08a      	sub	sp, #40	; 0x28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	60b9      	str	r1, [r7, #8]
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d10a      	bne.n	8004f2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	623b      	str	r3, [r7, #32]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004f2e:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <xTimerGenericCommand+0x98>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d02a      	beq.n	8004f8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b05      	cmp	r3, #5
 8004f46:	dc18      	bgt.n	8004f7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004f48:	f7ff feb2 	bl	8004cb0 <xTaskGetSchedulerState>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d109      	bne.n	8004f66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <xTimerGenericCommand+0x98>)
 8004f54:	6818      	ldr	r0, [r3, #0]
 8004f56:	f107 0110 	add.w	r1, r7, #16
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f5e:	f7fe fcad 	bl	80038bc <xQueueGenericSend>
 8004f62:	6278      	str	r0, [r7, #36]	; 0x24
 8004f64:	e012      	b.n	8004f8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004f66:	4b0c      	ldr	r3, [pc, #48]	; (8004f98 <xTimerGenericCommand+0x98>)
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	f107 0110 	add.w	r1, r7, #16
 8004f6e:	2300      	movs	r3, #0
 8004f70:	2200      	movs	r2, #0
 8004f72:	f7fe fca3 	bl	80038bc <xQueueGenericSend>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
 8004f78:	e008      	b.n	8004f8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004f7a:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <xTimerGenericCommand+0x98>)
 8004f7c:	6818      	ldr	r0, [r3, #0]
 8004f7e:	f107 0110 	add.w	r1, r7, #16
 8004f82:	2300      	movs	r3, #0
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	f7fe fd97 	bl	8003ab8 <xQueueGenericSendFromISR>
 8004f8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3728      	adds	r7, #40	; 0x28
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20001480 	.word	0x20001480

08004f9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af02      	add	r7, sp, #8
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <prvProcessExpiredTimer+0x7c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f7fe fb55 	bl	8003664 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d122      	bne.n	8005008 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	18d1      	adds	r1, r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	6978      	ldr	r0, [r7, #20]
 8004fd0:	f000 f8c8 	bl	8005164 <prvInsertTimerInActiveList>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d016      	beq.n	8005008 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004fda:	2300      	movs	r3, #0
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	6978      	ldr	r0, [r7, #20]
 8004fe6:	f7ff ff8b 	bl	8004f00 <xTimerGenericCommand>
 8004fea:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10a      	bne.n	8005008 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff6:	f383 8811 	msr	BASEPRI, r3
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	60fb      	str	r3, [r7, #12]
}
 8005004:	bf00      	nop
 8005006:	e7fe      	b.n	8005006 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	6978      	ldr	r0, [r7, #20]
 800500e:	4798      	blx	r3
}
 8005010:	bf00      	nop
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	20001478 	.word	0x20001478

0800501c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005024:	f107 0308 	add.w	r3, r7, #8
 8005028:	4618      	mov	r0, r3
 800502a:	f000 f857 	bl	80050dc <prvGetNextExpireTime>
 800502e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4619      	mov	r1, r3
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 f803 	bl	8005040 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800503a:	f000 f8d5 	bl	80051e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800503e:	e7f1      	b.n	8005024 <prvTimerTask+0x8>

08005040 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800504a:	f7ff fa4b 	bl	80044e4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800504e:	f107 0308 	add.w	r3, r7, #8
 8005052:	4618      	mov	r0, r3
 8005054:	f000 f866 	bl	8005124 <prvSampleTimeNow>
 8005058:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d130      	bne.n	80050c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <prvProcessTimerOrBlockTask+0x3c>
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	429a      	cmp	r2, r3
 800506c:	d806      	bhi.n	800507c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800506e:	f7ff fa47 	bl	8004500 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005072:	68f9      	ldr	r1, [r7, #12]
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f7ff ff91 	bl	8004f9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800507a:	e024      	b.n	80050c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005082:	4b13      	ldr	r3, [pc, #76]	; (80050d0 <prvProcessTimerOrBlockTask+0x90>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <prvProcessTimerOrBlockTask+0x94>)
 8005096:	6818      	ldr	r0, [r3, #0]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	683a      	ldr	r2, [r7, #0]
 80050a0:	4619      	mov	r1, r3
 80050a2:	f7fe ffb9 	bl	8004018 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80050a6:	f7ff fa2b 	bl	8004500 <xTaskResumeAll>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d10a      	bne.n	80050c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80050b0:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <prvProcessTimerOrBlockTask+0x98>)
 80050b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
}
 80050c0:	e001      	b.n	80050c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80050c2:	f7ff fa1d 	bl	8004500 <xTaskResumeAll>
}
 80050c6:	bf00      	nop
 80050c8:	3710      	adds	r7, #16
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2000147c 	.word	0x2000147c
 80050d4:	20001480 	.word	0x20001480
 80050d8:	e000ed04 	.word	0xe000ed04

080050dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <prvGetNextExpireTime+0x44>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d105      	bne.n	800510e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005102:	4b07      	ldr	r3, [pc, #28]	; (8005120 <prvGetNextExpireTime+0x44>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005112:	68fb      	ldr	r3, [r7, #12]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	bc80      	pop	{r7}
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	20001478 	.word	0x20001478

08005124 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b084      	sub	sp, #16
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800512c:	f7ff fa86 	bl	800463c <xTaskGetTickCount>
 8005130:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <prvSampleTimeNow+0x3c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	429a      	cmp	r2, r3
 800513a:	d205      	bcs.n	8005148 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800513c:	f000 f908 	bl	8005350 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]
 8005146:	e002      	b.n	800514e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <prvSampleTimeNow+0x3c>)
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005154:	68fb      	ldr	r3, [r7, #12]
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	20001488 	.word	0x20001488

08005164 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	68ba      	ldr	r2, [r7, #8]
 800517a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d812      	bhi.n	80051b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	1ad2      	subs	r2, r2, r3
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	429a      	cmp	r2, r3
 8005196:	d302      	bcc.n	800519e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005198:	2301      	movs	r3, #1
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e01b      	b.n	80051d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800519e:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <prvInsertTimerInActiveList+0x7c>)
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3304      	adds	r3, #4
 80051a6:	4619      	mov	r1, r3
 80051a8:	4610      	mov	r0, r2
 80051aa:	f7fe fa23 	bl	80035f4 <vListInsert>
 80051ae:	e012      	b.n	80051d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d206      	bcs.n	80051c6 <prvInsertTimerInActiveList+0x62>
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d302      	bcc.n	80051c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e007      	b.n	80051d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80051c6:	4b07      	ldr	r3, [pc, #28]	; (80051e4 <prvInsertTimerInActiveList+0x80>)
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	3304      	adds	r3, #4
 80051ce:	4619      	mov	r1, r3
 80051d0:	4610      	mov	r0, r2
 80051d2:	f7fe fa0f 	bl	80035f4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80051d6:	697b      	ldr	r3, [r7, #20]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	2000147c 	.word	0x2000147c
 80051e4:	20001478 	.word	0x20001478

080051e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	; 0x38
 80051ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051ee:	e09d      	b.n	800532c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	da18      	bge.n	8005228 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	3304      	adds	r3, #4
 80051fa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80051fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10a      	bne.n	8005218 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005206:	f383 8811 	msr	BASEPRI, r3
 800520a:	f3bf 8f6f 	isb	sy
 800520e:	f3bf 8f4f 	dsb	sy
 8005212:	61fb      	str	r3, [r7, #28]
}
 8005214:	bf00      	nop
 8005216:	e7fe      	b.n	8005216 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800521e:	6850      	ldr	r0, [r2, #4]
 8005220:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005222:	6892      	ldr	r2, [r2, #8]
 8005224:	4611      	mov	r1, r2
 8005226:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	db7d      	blt.n	800532a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	3304      	adds	r3, #4
 800523e:	4618      	mov	r0, r3
 8005240:	f7fe fa10 	bl	8003664 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005244:	463b      	mov	r3, r7
 8005246:	4618      	mov	r0, r3
 8005248:	f7ff ff6c 	bl	8005124 <prvSampleTimeNow>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2b09      	cmp	r3, #9
 8005252:	d86b      	bhi.n	800532c <prvProcessReceivedCommands+0x144>
 8005254:	a201      	add	r2, pc, #4	; (adr r2, 800525c <prvProcessReceivedCommands+0x74>)
 8005256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800525a:	bf00      	nop
 800525c:	08005285 	.word	0x08005285
 8005260:	08005285 	.word	0x08005285
 8005264:	08005285 	.word	0x08005285
 8005268:	0800532d 	.word	0x0800532d
 800526c:	080052e1 	.word	0x080052e1
 8005270:	08005319 	.word	0x08005319
 8005274:	08005285 	.word	0x08005285
 8005278:	08005285 	.word	0x08005285
 800527c:	0800532d 	.word	0x0800532d
 8005280:	080052e1 	.word	0x080052e1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	18d1      	adds	r1, r2, r3
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005290:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005292:	f7ff ff67 	bl	8005164 <prvInsertTimerInActiveList>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d047      	beq.n	800532c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800529c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d13f      	bne.n	800532c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80052ac:	68ba      	ldr	r2, [r7, #8]
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	441a      	add	r2, r3
 80052b4:	2300      	movs	r3, #0
 80052b6:	9300      	str	r3, [sp, #0]
 80052b8:	2300      	movs	r3, #0
 80052ba:	2100      	movs	r1, #0
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f7ff fe1f 	bl	8004f00 <xTimerGenericCommand>
 80052c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d130      	bne.n	800532c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80052ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	61bb      	str	r3, [r7, #24]
}
 80052dc:	bf00      	nop
 80052de:	e7fe      	b.n	80052de <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10a      	bne.n	8005304 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80052ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f2:	f383 8811 	msr	BASEPRI, r3
 80052f6:	f3bf 8f6f 	isb	sy
 80052fa:	f3bf 8f4f 	dsb	sy
 80052fe:	617b      	str	r3, [r7, #20]
}
 8005300:	bf00      	nop
 8005302:	e7fe      	b.n	8005302 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	699a      	ldr	r2, [r3, #24]
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	18d1      	adds	r1, r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005312:	f7ff ff27 	bl	8005164 <prvInsertTimerInActiveList>
					break;
 8005316:	e009      	b.n	800532c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8005322:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005324:	f000 fb6e 	bl	8005a04 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005328:	e000      	b.n	800532c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800532a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800532c:	4b07      	ldr	r3, [pc, #28]	; (800534c <prvProcessReceivedCommands+0x164>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	1d39      	adds	r1, r7, #4
 8005332:	2200      	movs	r2, #0
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fc57 	bl	8003be8 <xQueueReceive>
 800533a:	4603      	mov	r3, r0
 800533c:	2b00      	cmp	r3, #0
 800533e:	f47f af57 	bne.w	80051f0 <prvProcessReceivedCommands+0x8>
	}
}
 8005342:	bf00      	nop
 8005344:	bf00      	nop
 8005346:	3730      	adds	r7, #48	; 0x30
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	20001480 	.word	0x20001480

08005350 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005356:	e045      	b.n	80053e4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005358:	4b2c      	ldr	r3, [pc, #176]	; (800540c <prvSwitchTimerLists+0xbc>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005362:	4b2a      	ldr	r3, [pc, #168]	; (800540c <prvSwitchTimerLists+0xbc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3304      	adds	r3, #4
 8005370:	4618      	mov	r0, r3
 8005372:	f7fe f977 	bl	8003664 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d12e      	bne.n	80053e4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	4413      	add	r3, r2
 800538e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	429a      	cmp	r2, r3
 8005396:	d90e      	bls.n	80053b6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	68fa      	ldr	r2, [r7, #12]
 80053a2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053a4:	4b19      	ldr	r3, [pc, #100]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f7fe f920 	bl	80035f4 <vListInsert>
 80053b4:	e016      	b.n	80053e4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053b6:	2300      	movs	r3, #0
 80053b8:	9300      	str	r3, [sp, #0]
 80053ba:	2300      	movs	r3, #0
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	2100      	movs	r1, #0
 80053c0:	68f8      	ldr	r0, [r7, #12]
 80053c2:	f7ff fd9d 	bl	8004f00 <xTimerGenericCommand>
 80053c6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10a      	bne.n	80053e4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	603b      	str	r3, [r7, #0]
}
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80053e4:	4b09      	ldr	r3, [pc, #36]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1b4      	bne.n	8005358 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053ee:	4b07      	ldr	r3, [pc, #28]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053f4:	4b06      	ldr	r3, [pc, #24]	; (8005410 <prvSwitchTimerLists+0xc0>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <prvSwitchTimerLists+0xbc>)
 80053fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053fc:	4a04      	ldr	r2, [pc, #16]	; (8005410 <prvSwitchTimerLists+0xc0>)
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	6013      	str	r3, [r2, #0]
}
 8005402:	bf00      	nop
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20001478 	.word	0x20001478
 8005410:	2000147c 	.word	0x2000147c

08005414 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800541a:	f000 f92f 	bl	800567c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <prvCheckForValidListAndQueue+0x60>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d120      	bne.n	8005468 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005426:	4814      	ldr	r0, [pc, #80]	; (8005478 <prvCheckForValidListAndQueue+0x64>)
 8005428:	f7fe f896 	bl	8003558 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800542c:	4813      	ldr	r0, [pc, #76]	; (800547c <prvCheckForValidListAndQueue+0x68>)
 800542e:	f7fe f893 	bl	8003558 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <prvCheckForValidListAndQueue+0x6c>)
 8005434:	4a10      	ldr	r2, [pc, #64]	; (8005478 <prvCheckForValidListAndQueue+0x64>)
 8005436:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005438:	4b12      	ldr	r3, [pc, #72]	; (8005484 <prvCheckForValidListAndQueue+0x70>)
 800543a:	4a10      	ldr	r2, [pc, #64]	; (800547c <prvCheckForValidListAndQueue+0x68>)
 800543c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800543e:	2300      	movs	r3, #0
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4b11      	ldr	r3, [pc, #68]	; (8005488 <prvCheckForValidListAndQueue+0x74>)
 8005444:	4a11      	ldr	r2, [pc, #68]	; (800548c <prvCheckForValidListAndQueue+0x78>)
 8005446:	2110      	movs	r1, #16
 8005448:	200a      	movs	r0, #10
 800544a:	f7fe f99d 	bl	8003788 <xQueueGenericCreateStatic>
 800544e:	4603      	mov	r3, r0
 8005450:	4a08      	ldr	r2, [pc, #32]	; (8005474 <prvCheckForValidListAndQueue+0x60>)
 8005452:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005454:	4b07      	ldr	r3, [pc, #28]	; (8005474 <prvCheckForValidListAndQueue+0x60>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d005      	beq.n	8005468 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <prvCheckForValidListAndQueue+0x60>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	490b      	ldr	r1, [pc, #44]	; (8005490 <prvCheckForValidListAndQueue+0x7c>)
 8005462:	4618      	mov	r0, r3
 8005464:	f7fe fdb0 	bl	8003fc8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005468:	f000 f938 	bl	80056dc <vPortExitCritical>
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	20001480 	.word	0x20001480
 8005478:	20001450 	.word	0x20001450
 800547c:	20001464 	.word	0x20001464
 8005480:	20001478 	.word	0x20001478
 8005484:	2000147c 	.word	0x2000147c
 8005488:	2000152c 	.word	0x2000152c
 800548c:	2000148c 	.word	0x2000148c
 8005490:	080065d0 	.word	0x080065d0

08005494 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3b04      	subs	r3, #4
 80054a4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3b04      	subs	r3, #4
 80054b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f023 0201 	bic.w	r2, r3, #1
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80054c4:	4a08      	ldr	r2, [pc, #32]	; (80054e8 <pxPortInitialiseStack+0x54>)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	3b14      	subs	r3, #20
 80054ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	3b20      	subs	r3, #32
 80054da:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80054dc:	68fb      	ldr	r3, [r7, #12]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	080054ed 	.word	0x080054ed

080054ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054ec:	b480      	push	{r7}
 80054ee:	b085      	sub	sp, #20
 80054f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80054f2:	2300      	movs	r3, #0
 80054f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <prvTaskExitError+0x54>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d00a      	beq.n	8005516 <prvTaskExitError+0x2a>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <prvTaskExitError+0x28>
	__asm volatile
 8005516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800551a:	f383 8811 	msr	BASEPRI, r3
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	60bb      	str	r3, [r7, #8]
}
 8005528:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800552a:	bf00      	nop
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d0fc      	beq.n	800552c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	2000000c 	.word	0x2000000c
	...

08005550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005550:	4b07      	ldr	r3, [pc, #28]	; (8005570 <pxCurrentTCBConst2>)
 8005552:	6819      	ldr	r1, [r3, #0]
 8005554:	6808      	ldr	r0, [r1, #0]
 8005556:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800555a:	f380 8809 	msr	PSP, r0
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f04f 0000 	mov.w	r0, #0
 8005566:	f380 8811 	msr	BASEPRI, r0
 800556a:	f04e 0e0d 	orr.w	lr, lr, #13
 800556e:	4770      	bx	lr

08005570 <pxCurrentTCBConst2>:
 8005570:	20000f50 	.word	0x20000f50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005574:	bf00      	nop
 8005576:	bf00      	nop

08005578 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005578:	4806      	ldr	r0, [pc, #24]	; (8005594 <prvPortStartFirstTask+0x1c>)
 800557a:	6800      	ldr	r0, [r0, #0]
 800557c:	6800      	ldr	r0, [r0, #0]
 800557e:	f380 8808 	msr	MSP, r0
 8005582:	b662      	cpsie	i
 8005584:	b661      	cpsie	f
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	df00      	svc	0
 8005590:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005592:	bf00      	nop
 8005594:	e000ed08 	.word	0xe000ed08

08005598 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800559e:	4b32      	ldr	r3, [pc, #200]	; (8005668 <xPortStartScheduler+0xd0>)
 80055a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	22ff      	movs	r2, #255	; 0xff
 80055ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055b8:	78fb      	ldrb	r3, [r7, #3]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4b2a      	ldr	r3, [pc, #168]	; (800566c <xPortStartScheduler+0xd4>)
 80055c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055c6:	4b2a      	ldr	r3, [pc, #168]	; (8005670 <xPortStartScheduler+0xd8>)
 80055c8:	2207      	movs	r2, #7
 80055ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055cc:	e009      	b.n	80055e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80055ce:	4b28      	ldr	r3, [pc, #160]	; (8005670 <xPortStartScheduler+0xd8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4a26      	ldr	r2, [pc, #152]	; (8005670 <xPortStartScheduler+0xd8>)
 80055d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055d8:	78fb      	ldrb	r3, [r7, #3]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055e2:	78fb      	ldrb	r3, [r7, #3]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	2b80      	cmp	r3, #128	; 0x80
 80055ec:	d0ef      	beq.n	80055ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055ee:	4b20      	ldr	r3, [pc, #128]	; (8005670 <xPortStartScheduler+0xd8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f1c3 0307 	rsb	r3, r3, #7
 80055f6:	2b04      	cmp	r3, #4
 80055f8:	d00a      	beq.n	8005610 <xPortStartScheduler+0x78>
	__asm volatile
 80055fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055fe:	f383 8811 	msr	BASEPRI, r3
 8005602:	f3bf 8f6f 	isb	sy
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	60bb      	str	r3, [r7, #8]
}
 800560c:	bf00      	nop
 800560e:	e7fe      	b.n	800560e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <xPortStartScheduler+0xd8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	021b      	lsls	r3, r3, #8
 8005616:	4a16      	ldr	r2, [pc, #88]	; (8005670 <xPortStartScheduler+0xd8>)
 8005618:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800561a:	4b15      	ldr	r3, [pc, #84]	; (8005670 <xPortStartScheduler+0xd8>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005622:	4a13      	ldr	r2, [pc, #76]	; (8005670 <xPortStartScheduler+0xd8>)
 8005624:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800562e:	4b11      	ldr	r3, [pc, #68]	; (8005674 <xPortStartScheduler+0xdc>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a10      	ldr	r2, [pc, #64]	; (8005674 <xPortStartScheduler+0xdc>)
 8005634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005638:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800563a:	4b0e      	ldr	r3, [pc, #56]	; (8005674 <xPortStartScheduler+0xdc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a0d      	ldr	r2, [pc, #52]	; (8005674 <xPortStartScheduler+0xdc>)
 8005640:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005644:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005646:	f000 f8b9 	bl	80057bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800564a:	4b0b      	ldr	r3, [pc, #44]	; (8005678 <xPortStartScheduler+0xe0>)
 800564c:	2200      	movs	r2, #0
 800564e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005650:	f7ff ff92 	bl	8005578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005654:	f7ff f8be 	bl	80047d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005658:	f7ff ff48 	bl	80054ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3710      	adds	r7, #16
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
 8005666:	bf00      	nop
 8005668:	e000e400 	.word	0xe000e400
 800566c:	2000157c 	.word	0x2000157c
 8005670:	20001580 	.word	0x20001580
 8005674:	e000ed20 	.word	0xe000ed20
 8005678:	2000000c 	.word	0x2000000c

0800567c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
}
 8005694:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005696:	4b0f      	ldr	r3, [pc, #60]	; (80056d4 <vPortEnterCritical+0x58>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3301      	adds	r3, #1
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <vPortEnterCritical+0x58>)
 800569e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056a0:	4b0c      	ldr	r3, [pc, #48]	; (80056d4 <vPortEnterCritical+0x58>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d10f      	bne.n	80056c8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056a8:	4b0b      	ldr	r3, [pc, #44]	; (80056d8 <vPortEnterCritical+0x5c>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d00a      	beq.n	80056c8 <vPortEnterCritical+0x4c>
	__asm volatile
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	603b      	str	r3, [r7, #0]
}
 80056c4:	bf00      	nop
 80056c6:	e7fe      	b.n	80056c6 <vPortEnterCritical+0x4a>
	}
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bc80      	pop	{r7}
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	2000000c 	.word	0x2000000c
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056e2:	4b11      	ldr	r3, [pc, #68]	; (8005728 <vPortExitCritical+0x4c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d10a      	bne.n	8005700 <vPortExitCritical+0x24>
	__asm volatile
 80056ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ee:	f383 8811 	msr	BASEPRI, r3
 80056f2:	f3bf 8f6f 	isb	sy
 80056f6:	f3bf 8f4f 	dsb	sy
 80056fa:	607b      	str	r3, [r7, #4]
}
 80056fc:	bf00      	nop
 80056fe:	e7fe      	b.n	80056fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005700:	4b09      	ldr	r3, [pc, #36]	; (8005728 <vPortExitCritical+0x4c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	4a08      	ldr	r2, [pc, #32]	; (8005728 <vPortExitCritical+0x4c>)
 8005708:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800570a:	4b07      	ldr	r3, [pc, #28]	; (8005728 <vPortExitCritical+0x4c>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d105      	bne.n	800571e <vPortExitCritical+0x42>
 8005712:	2300      	movs	r3, #0
 8005714:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f383 8811 	msr	BASEPRI, r3
}
 800571c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	2000000c 	.word	0x2000000c
 800572c:	00000000 	.word	0x00000000

08005730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005730:	f3ef 8009 	mrs	r0, PSP
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <pxCurrentTCBConst>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005740:	6010      	str	r0, [r2, #0]
 8005742:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005746:	f04f 0050 	mov.w	r0, #80	; 0x50
 800574a:	f380 8811 	msr	BASEPRI, r0
 800574e:	f7ff f841 	bl	80047d4 <vTaskSwitchContext>
 8005752:	f04f 0000 	mov.w	r0, #0
 8005756:	f380 8811 	msr	BASEPRI, r0
 800575a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	6808      	ldr	r0, [r1, #0]
 8005762:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005766:	f380 8809 	msr	PSP, r0
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	4770      	bx	lr

08005770 <pxCurrentTCBConst>:
 8005770:	20000f50 	.word	0x20000f50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005774:	bf00      	nop
 8005776:	bf00      	nop

08005778 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
	__asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
}
 8005790:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005792:	f7fe ff61 	bl	8004658 <xTaskIncrementTick>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d003      	beq.n	80057a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800579c:	4b06      	ldr	r3, [pc, #24]	; (80057b8 <SysTick_Handler+0x40>)
 800579e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	2300      	movs	r3, #0
 80057a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	f383 8811 	msr	BASEPRI, r3
}
 80057ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80057b0:	bf00      	nop
 80057b2:	3708      	adds	r7, #8
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	e000ed04 	.word	0xe000ed04

080057bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057c0:	4b0a      	ldr	r3, [pc, #40]	; (80057ec <vPortSetupTimerInterrupt+0x30>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057c6:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <vPortSetupTimerInterrupt+0x34>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057cc:	4b09      	ldr	r3, [pc, #36]	; (80057f4 <vPortSetupTimerInterrupt+0x38>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a09      	ldr	r2, [pc, #36]	; (80057f8 <vPortSetupTimerInterrupt+0x3c>)
 80057d2:	fba2 2303 	umull	r2, r3, r2, r3
 80057d6:	099b      	lsrs	r3, r3, #6
 80057d8:	4a08      	ldr	r2, [pc, #32]	; (80057fc <vPortSetupTimerInterrupt+0x40>)
 80057da:	3b01      	subs	r3, #1
 80057dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057de:	4b03      	ldr	r3, [pc, #12]	; (80057ec <vPortSetupTimerInterrupt+0x30>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	601a      	str	r2, [r3, #0]
}
 80057e4:	bf00      	nop
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bc80      	pop	{r7}
 80057ea:	4770      	bx	lr
 80057ec:	e000e010 	.word	0xe000e010
 80057f0:	e000e018 	.word	0xe000e018
 80057f4:	20000000 	.word	0x20000000
 80057f8:	10624dd3 	.word	0x10624dd3
 80057fc:	e000e014 	.word	0xe000e014

08005800 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005806:	f3ef 8305 	mrs	r3, IPSR
 800580a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2b0f      	cmp	r3, #15
 8005810:	d914      	bls.n	800583c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005812:	4a16      	ldr	r2, [pc, #88]	; (800586c <vPortValidateInterruptPriority+0x6c>)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800581c:	4b14      	ldr	r3, [pc, #80]	; (8005870 <vPortValidateInterruptPriority+0x70>)
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	7afa      	ldrb	r2, [r7, #11]
 8005822:	429a      	cmp	r2, r3
 8005824:	d20a      	bcs.n	800583c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582a:	f383 8811 	msr	BASEPRI, r3
 800582e:	f3bf 8f6f 	isb	sy
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	607b      	str	r3, [r7, #4]
}
 8005838:	bf00      	nop
 800583a:	e7fe      	b.n	800583a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800583c:	4b0d      	ldr	r3, [pc, #52]	; (8005874 <vPortValidateInterruptPriority+0x74>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005844:	4b0c      	ldr	r3, [pc, #48]	; (8005878 <vPortValidateInterruptPriority+0x78>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d90a      	bls.n	8005862 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800584c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	603b      	str	r3, [r7, #0]
}
 800585e:	bf00      	nop
 8005860:	e7fe      	b.n	8005860 <vPortValidateInterruptPriority+0x60>
	}
 8005862:	bf00      	nop
 8005864:	3714      	adds	r7, #20
 8005866:	46bd      	mov	sp, r7
 8005868:	bc80      	pop	{r7}
 800586a:	4770      	bx	lr
 800586c:	e000e3f0 	.word	0xe000e3f0
 8005870:	2000157c 	.word	0x2000157c
 8005874:	e000ed0c 	.word	0xe000ed0c
 8005878:	20001580 	.word	0x20001580

0800587c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08a      	sub	sp, #40	; 0x28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005888:	f7fe fe2c 	bl	80044e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800588c:	4b58      	ldr	r3, [pc, #352]	; (80059f0 <pvPortMalloc+0x174>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005894:	f000 f910 	bl	8005ab8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005898:	4b56      	ldr	r3, [pc, #344]	; (80059f4 <pvPortMalloc+0x178>)
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	f040 808e 	bne.w	80059c2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d01d      	beq.n	80058e8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80058ac:	2208      	movs	r2, #8
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4413      	add	r3, r2
 80058b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f003 0307 	and.w	r3, r3, #7
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d014      	beq.n	80058e8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f023 0307 	bic.w	r3, r3, #7
 80058c4:	3308      	adds	r3, #8
 80058c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <pvPortMalloc+0x6c>
	__asm volatile
 80058d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d6:	f383 8811 	msr	BASEPRI, r3
 80058da:	f3bf 8f6f 	isb	sy
 80058de:	f3bf 8f4f 	dsb	sy
 80058e2:	617b      	str	r3, [r7, #20]
}
 80058e4:	bf00      	nop
 80058e6:	e7fe      	b.n	80058e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d069      	beq.n	80059c2 <pvPortMalloc+0x146>
 80058ee:	4b42      	ldr	r3, [pc, #264]	; (80059f8 <pvPortMalloc+0x17c>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d864      	bhi.n	80059c2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058f8:	4b40      	ldr	r3, [pc, #256]	; (80059fc <pvPortMalloc+0x180>)
 80058fa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058fc:	4b3f      	ldr	r3, [pc, #252]	; (80059fc <pvPortMalloc+0x180>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005902:	e004      	b.n	800590e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005906:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	429a      	cmp	r2, r3
 8005916:	d903      	bls.n	8005920 <pvPortMalloc+0xa4>
 8005918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f1      	bne.n	8005904 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005920:	4b33      	ldr	r3, [pc, #204]	; (80059f0 <pvPortMalloc+0x174>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005926:	429a      	cmp	r2, r3
 8005928:	d04b      	beq.n	80059c2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2208      	movs	r2, #8
 8005930:	4413      	add	r3, r2
 8005932:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	1ad2      	subs	r2, r2, r3
 8005944:	2308      	movs	r3, #8
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	429a      	cmp	r2, r3
 800594a:	d91f      	bls.n	800598c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800594c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4413      	add	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <pvPortMalloc+0xf8>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	613b      	str	r3, [r7, #16]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	685a      	ldr	r2, [r3, #4]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	1ad2      	subs	r2, r2, r3
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005986:	69b8      	ldr	r0, [r7, #24]
 8005988:	f000 f8f8 	bl	8005b7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800598c:	4b1a      	ldr	r3, [pc, #104]	; (80059f8 <pvPortMalloc+0x17c>)
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	4a18      	ldr	r2, [pc, #96]	; (80059f8 <pvPortMalloc+0x17c>)
 8005998:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <pvPortMalloc+0x17c>)
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	4b18      	ldr	r3, [pc, #96]	; (8005a00 <pvPortMalloc+0x184>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d203      	bcs.n	80059ae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059a6:	4b14      	ldr	r3, [pc, #80]	; (80059f8 <pvPortMalloc+0x17c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a15      	ldr	r2, [pc, #84]	; (8005a00 <pvPortMalloc+0x184>)
 80059ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	4b10      	ldr	r3, [pc, #64]	; (80059f4 <pvPortMalloc+0x178>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059c2:	f7fe fd9d 	bl	8004500 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00a      	beq.n	80059e6 <pvPortMalloc+0x16a>
	__asm volatile
 80059d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059d4:	f383 8811 	msr	BASEPRI, r3
 80059d8:	f3bf 8f6f 	isb	sy
 80059dc:	f3bf 8f4f 	dsb	sy
 80059e0:	60fb      	str	r3, [r7, #12]
}
 80059e2:	bf00      	nop
 80059e4:	e7fe      	b.n	80059e4 <pvPortMalloc+0x168>
	return pvReturn;
 80059e6:	69fb      	ldr	r3, [r7, #28]
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3728      	adds	r7, #40	; 0x28
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000218c 	.word	0x2000218c
 80059f4:	20002198 	.word	0x20002198
 80059f8:	20002190 	.word	0x20002190
 80059fc:	20002184 	.word	0x20002184
 8005a00:	20002194 	.word	0x20002194

08005a04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b086      	sub	sp, #24
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d048      	beq.n	8005aa8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a16:	2308      	movs	r3, #8
 8005a18:	425b      	negs	r3, r3
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	4b21      	ldr	r3, [pc, #132]	; (8005ab0 <vPortFree+0xac>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <vPortFree+0x44>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	60fb      	str	r3, [r7, #12]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <vPortFree+0x62>
	__asm volatile
 8005a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a54:	f383 8811 	msr	BASEPRI, r3
 8005a58:	f3bf 8f6f 	isb	sy
 8005a5c:	f3bf 8f4f 	dsb	sy
 8005a60:	60bb      	str	r3, [r7, #8]
}
 8005a62:	bf00      	nop
 8005a64:	e7fe      	b.n	8005a64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	685a      	ldr	r2, [r3, #4]
 8005a6a:	4b11      	ldr	r3, [pc, #68]	; (8005ab0 <vPortFree+0xac>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d019      	beq.n	8005aa8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a74:	693b      	ldr	r3, [r7, #16]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d115      	bne.n	8005aa8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	685a      	ldr	r2, [r3, #4]
 8005a80:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <vPortFree+0xac>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	43db      	mvns	r3, r3
 8005a86:	401a      	ands	r2, r3
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a8c:	f7fe fd2a 	bl	80044e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	4b07      	ldr	r3, [pc, #28]	; (8005ab4 <vPortFree+0xb0>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4413      	add	r3, r2
 8005a9a:	4a06      	ldr	r2, [pc, #24]	; (8005ab4 <vPortFree+0xb0>)
 8005a9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f000 f86c 	bl	8005b7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005aa4:	f7fe fd2c 	bl	8004500 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005aa8:	bf00      	nop
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	20002198 	.word	0x20002198
 8005ab4:	20002190 	.word	0x20002190

08005ab8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005abe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005ac2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ac4:	4b27      	ldr	r3, [pc, #156]	; (8005b64 <prvHeapInit+0xac>)
 8005ac6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00c      	beq.n	8005aec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3307      	adds	r3, #7
 8005ad6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 0307 	bic.w	r3, r3, #7
 8005ade:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	4a1f      	ldr	r2, [pc, #124]	; (8005b64 <prvHeapInit+0xac>)
 8005ae8:	4413      	add	r3, r2
 8005aea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005af0:	4a1d      	ldr	r2, [pc, #116]	; (8005b68 <prvHeapInit+0xb0>)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005af6:	4b1c      	ldr	r3, [pc, #112]	; (8005b68 <prvHeapInit+0xb0>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b04:	2208      	movs	r2, #8
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0307 	bic.w	r3, r3, #7
 8005b12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <prvHeapInit+0xb4>)
 8005b18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <prvHeapInit+0xb4>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b22:	4b12      	ldr	r3, [pc, #72]	; (8005b6c <prvHeapInit+0xb4>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	1ad2      	subs	r2, r2, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <prvHeapInit+0xb4>)
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <prvHeapInit+0xb8>)
 8005b46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	4a09      	ldr	r2, [pc, #36]	; (8005b74 <prvHeapInit+0xbc>)
 8005b4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b50:	4b09      	ldr	r3, [pc, #36]	; (8005b78 <prvHeapInit+0xc0>)
 8005b52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b56:	601a      	str	r2, [r3, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bc80      	pop	{r7}
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20001584 	.word	0x20001584
 8005b68:	20002184 	.word	0x20002184
 8005b6c:	2000218c 	.word	0x2000218c
 8005b70:	20002194 	.word	0x20002194
 8005b74:	20002190 	.word	0x20002190
 8005b78:	20002198 	.word	0x20002198

08005b7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b085      	sub	sp, #20
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b84:	4b27      	ldr	r3, [pc, #156]	; (8005c24 <prvInsertBlockIntoFreeList+0xa8>)
 8005b86:	60fb      	str	r3, [r7, #12]
 8005b88:	e002      	b.n	8005b90 <prvInsertBlockIntoFreeList+0x14>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d8f7      	bhi.n	8005b8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d108      	bne.n	8005bbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685a      	ldr	r2, [r3, #4]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	441a      	add	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	441a      	add	r2, r3
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d118      	bne.n	8005c04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <prvInsertBlockIntoFreeList+0xac>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	429a      	cmp	r2, r3
 8005bdc:	d00d      	beq.n	8005bfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	441a      	add	r2, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e008      	b.n	8005c0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <prvInsertBlockIntoFreeList+0xac>)
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	601a      	str	r2, [r3, #0]
 8005c02:	e003      	b.n	8005c0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d002      	beq.n	8005c1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bc80      	pop	{r7}
 8005c22:	4770      	bx	lr
 8005c24:	20002184 	.word	0x20002184
 8005c28:	2000218c 	.word	0x2000218c

08005c2c <__errno>:
 8005c2c:	4b01      	ldr	r3, [pc, #4]	; (8005c34 <__errno+0x8>)
 8005c2e:	6818      	ldr	r0, [r3, #0]
 8005c30:	4770      	bx	lr
 8005c32:	bf00      	nop
 8005c34:	20000010 	.word	0x20000010

08005c38 <__libc_init_array>:
 8005c38:	b570      	push	{r4, r5, r6, lr}
 8005c3a:	2600      	movs	r6, #0
 8005c3c:	4d0c      	ldr	r5, [pc, #48]	; (8005c70 <__libc_init_array+0x38>)
 8005c3e:	4c0d      	ldr	r4, [pc, #52]	; (8005c74 <__libc_init_array+0x3c>)
 8005c40:	1b64      	subs	r4, r4, r5
 8005c42:	10a4      	asrs	r4, r4, #2
 8005c44:	42a6      	cmp	r6, r4
 8005c46:	d109      	bne.n	8005c5c <__libc_init_array+0x24>
 8005c48:	f000 fc6e 	bl	8006528 <_init>
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	4d0a      	ldr	r5, [pc, #40]	; (8005c78 <__libc_init_array+0x40>)
 8005c50:	4c0a      	ldr	r4, [pc, #40]	; (8005c7c <__libc_init_array+0x44>)
 8005c52:	1b64      	subs	r4, r4, r5
 8005c54:	10a4      	asrs	r4, r4, #2
 8005c56:	42a6      	cmp	r6, r4
 8005c58:	d105      	bne.n	8005c66 <__libc_init_array+0x2e>
 8005c5a:	bd70      	pop	{r4, r5, r6, pc}
 8005c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c60:	4798      	blx	r3
 8005c62:	3601      	adds	r6, #1
 8005c64:	e7ee      	b.n	8005c44 <__libc_init_array+0xc>
 8005c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c6a:	4798      	blx	r3
 8005c6c:	3601      	adds	r6, #1
 8005c6e:	e7f2      	b.n	8005c56 <__libc_init_array+0x1e>
 8005c70:	080066d0 	.word	0x080066d0
 8005c74:	080066d0 	.word	0x080066d0
 8005c78:	080066d0 	.word	0x080066d0
 8005c7c:	080066d4 	.word	0x080066d4

08005c80 <memcpy>:
 8005c80:	440a      	add	r2, r1
 8005c82:	4291      	cmp	r1, r2
 8005c84:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c88:	d100      	bne.n	8005c8c <memcpy+0xc>
 8005c8a:	4770      	bx	lr
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c92:	4291      	cmp	r1, r2
 8005c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c98:	d1f9      	bne.n	8005c8e <memcpy+0xe>
 8005c9a:	bd10      	pop	{r4, pc}

08005c9c <memset>:
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	4402      	add	r2, r0
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d100      	bne.n	8005ca6 <memset+0xa>
 8005ca4:	4770      	bx	lr
 8005ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8005caa:	e7f9      	b.n	8005ca0 <memset+0x4>

08005cac <_printf_common>:
 8005cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cb0:	4616      	mov	r6, r2
 8005cb2:	4699      	mov	r9, r3
 8005cb4:	688a      	ldr	r2, [r1, #8]
 8005cb6:	690b      	ldr	r3, [r1, #16]
 8005cb8:	4607      	mov	r7, r0
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	bfb8      	it	lt
 8005cbe:	4613      	movlt	r3, r2
 8005cc0:	6033      	str	r3, [r6, #0]
 8005cc2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ccc:	b10a      	cbz	r2, 8005cd2 <_printf_common+0x26>
 8005cce:	3301      	adds	r3, #1
 8005cd0:	6033      	str	r3, [r6, #0]
 8005cd2:	6823      	ldr	r3, [r4, #0]
 8005cd4:	0699      	lsls	r1, r3, #26
 8005cd6:	bf42      	ittt	mi
 8005cd8:	6833      	ldrmi	r3, [r6, #0]
 8005cda:	3302      	addmi	r3, #2
 8005cdc:	6033      	strmi	r3, [r6, #0]
 8005cde:	6825      	ldr	r5, [r4, #0]
 8005ce0:	f015 0506 	ands.w	r5, r5, #6
 8005ce4:	d106      	bne.n	8005cf4 <_printf_common+0x48>
 8005ce6:	f104 0a19 	add.w	sl, r4, #25
 8005cea:	68e3      	ldr	r3, [r4, #12]
 8005cec:	6832      	ldr	r2, [r6, #0]
 8005cee:	1a9b      	subs	r3, r3, r2
 8005cf0:	42ab      	cmp	r3, r5
 8005cf2:	dc28      	bgt.n	8005d46 <_printf_common+0x9a>
 8005cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005cf8:	1e13      	subs	r3, r2, #0
 8005cfa:	6822      	ldr	r2, [r4, #0]
 8005cfc:	bf18      	it	ne
 8005cfe:	2301      	movne	r3, #1
 8005d00:	0692      	lsls	r2, r2, #26
 8005d02:	d42d      	bmi.n	8005d60 <_printf_common+0xb4>
 8005d04:	4649      	mov	r1, r9
 8005d06:	4638      	mov	r0, r7
 8005d08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d0c:	47c0      	blx	r8
 8005d0e:	3001      	adds	r0, #1
 8005d10:	d020      	beq.n	8005d54 <_printf_common+0xa8>
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	68e5      	ldr	r5, [r4, #12]
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	2b04      	cmp	r3, #4
 8005d1c:	bf18      	it	ne
 8005d1e:	2500      	movne	r5, #0
 8005d20:	6832      	ldr	r2, [r6, #0]
 8005d22:	f04f 0600 	mov.w	r6, #0
 8005d26:	68a3      	ldr	r3, [r4, #8]
 8005d28:	bf08      	it	eq
 8005d2a:	1aad      	subeq	r5, r5, r2
 8005d2c:	6922      	ldr	r2, [r4, #16]
 8005d2e:	bf08      	it	eq
 8005d30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d34:	4293      	cmp	r3, r2
 8005d36:	bfc4      	itt	gt
 8005d38:	1a9b      	subgt	r3, r3, r2
 8005d3a:	18ed      	addgt	r5, r5, r3
 8005d3c:	341a      	adds	r4, #26
 8005d3e:	42b5      	cmp	r5, r6
 8005d40:	d11a      	bne.n	8005d78 <_printf_common+0xcc>
 8005d42:	2000      	movs	r0, #0
 8005d44:	e008      	b.n	8005d58 <_printf_common+0xac>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4649      	mov	r1, r9
 8005d4c:	4638      	mov	r0, r7
 8005d4e:	47c0      	blx	r8
 8005d50:	3001      	adds	r0, #1
 8005d52:	d103      	bne.n	8005d5c <_printf_common+0xb0>
 8005d54:	f04f 30ff 	mov.w	r0, #4294967295
 8005d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d5c:	3501      	adds	r5, #1
 8005d5e:	e7c4      	b.n	8005cea <_printf_common+0x3e>
 8005d60:	2030      	movs	r0, #48	; 0x30
 8005d62:	18e1      	adds	r1, r4, r3
 8005d64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d6e:	4422      	add	r2, r4
 8005d70:	3302      	adds	r3, #2
 8005d72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d76:	e7c5      	b.n	8005d04 <_printf_common+0x58>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	4622      	mov	r2, r4
 8005d7c:	4649      	mov	r1, r9
 8005d7e:	4638      	mov	r0, r7
 8005d80:	47c0      	blx	r8
 8005d82:	3001      	adds	r0, #1
 8005d84:	d0e6      	beq.n	8005d54 <_printf_common+0xa8>
 8005d86:	3601      	adds	r6, #1
 8005d88:	e7d9      	b.n	8005d3e <_printf_common+0x92>
	...

08005d8c <_printf_i>:
 8005d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d90:	460c      	mov	r4, r1
 8005d92:	7e27      	ldrb	r7, [r4, #24]
 8005d94:	4691      	mov	r9, r2
 8005d96:	2f78      	cmp	r7, #120	; 0x78
 8005d98:	4680      	mov	r8, r0
 8005d9a:	469a      	mov	sl, r3
 8005d9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005d9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da2:	d807      	bhi.n	8005db4 <_printf_i+0x28>
 8005da4:	2f62      	cmp	r7, #98	; 0x62
 8005da6:	d80a      	bhi.n	8005dbe <_printf_i+0x32>
 8005da8:	2f00      	cmp	r7, #0
 8005daa:	f000 80d9 	beq.w	8005f60 <_printf_i+0x1d4>
 8005dae:	2f58      	cmp	r7, #88	; 0x58
 8005db0:	f000 80a4 	beq.w	8005efc <_printf_i+0x170>
 8005db4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005db8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005dbc:	e03a      	b.n	8005e34 <_printf_i+0xa8>
 8005dbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005dc2:	2b15      	cmp	r3, #21
 8005dc4:	d8f6      	bhi.n	8005db4 <_printf_i+0x28>
 8005dc6:	a001      	add	r0, pc, #4	; (adr r0, 8005dcc <_printf_i+0x40>)
 8005dc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005dcc:	08005e25 	.word	0x08005e25
 8005dd0:	08005e39 	.word	0x08005e39
 8005dd4:	08005db5 	.word	0x08005db5
 8005dd8:	08005db5 	.word	0x08005db5
 8005ddc:	08005db5 	.word	0x08005db5
 8005de0:	08005db5 	.word	0x08005db5
 8005de4:	08005e39 	.word	0x08005e39
 8005de8:	08005db5 	.word	0x08005db5
 8005dec:	08005db5 	.word	0x08005db5
 8005df0:	08005db5 	.word	0x08005db5
 8005df4:	08005db5 	.word	0x08005db5
 8005df8:	08005f47 	.word	0x08005f47
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005f29 	.word	0x08005f29
 8005e04:	08005db5 	.word	0x08005db5
 8005e08:	08005db5 	.word	0x08005db5
 8005e0c:	08005f69 	.word	0x08005f69
 8005e10:	08005db5 	.word	0x08005db5
 8005e14:	08005e69 	.word	0x08005e69
 8005e18:	08005db5 	.word	0x08005db5
 8005e1c:	08005db5 	.word	0x08005db5
 8005e20:	08005f31 	.word	0x08005f31
 8005e24:	680b      	ldr	r3, [r1, #0]
 8005e26:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e2a:	1d1a      	adds	r2, r3, #4
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	600a      	str	r2, [r1, #0]
 8005e30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e34:	2301      	movs	r3, #1
 8005e36:	e0a4      	b.n	8005f82 <_printf_i+0x1f6>
 8005e38:	6825      	ldr	r5, [r4, #0]
 8005e3a:	6808      	ldr	r0, [r1, #0]
 8005e3c:	062e      	lsls	r6, r5, #24
 8005e3e:	f100 0304 	add.w	r3, r0, #4
 8005e42:	d50a      	bpl.n	8005e5a <_printf_i+0xce>
 8005e44:	6805      	ldr	r5, [r0, #0]
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	2d00      	cmp	r5, #0
 8005e4a:	da03      	bge.n	8005e54 <_printf_i+0xc8>
 8005e4c:	232d      	movs	r3, #45	; 0x2d
 8005e4e:	426d      	negs	r5, r5
 8005e50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e54:	230a      	movs	r3, #10
 8005e56:	485e      	ldr	r0, [pc, #376]	; (8005fd0 <_printf_i+0x244>)
 8005e58:	e019      	b.n	8005e8e <_printf_i+0x102>
 8005e5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e5e:	6805      	ldr	r5, [r0, #0]
 8005e60:	600b      	str	r3, [r1, #0]
 8005e62:	bf18      	it	ne
 8005e64:	b22d      	sxthne	r5, r5
 8005e66:	e7ef      	b.n	8005e48 <_printf_i+0xbc>
 8005e68:	680b      	ldr	r3, [r1, #0]
 8005e6a:	6825      	ldr	r5, [r4, #0]
 8005e6c:	1d18      	adds	r0, r3, #4
 8005e6e:	6008      	str	r0, [r1, #0]
 8005e70:	0628      	lsls	r0, r5, #24
 8005e72:	d501      	bpl.n	8005e78 <_printf_i+0xec>
 8005e74:	681d      	ldr	r5, [r3, #0]
 8005e76:	e002      	b.n	8005e7e <_printf_i+0xf2>
 8005e78:	0669      	lsls	r1, r5, #25
 8005e7a:	d5fb      	bpl.n	8005e74 <_printf_i+0xe8>
 8005e7c:	881d      	ldrh	r5, [r3, #0]
 8005e7e:	2f6f      	cmp	r7, #111	; 0x6f
 8005e80:	bf0c      	ite	eq
 8005e82:	2308      	moveq	r3, #8
 8005e84:	230a      	movne	r3, #10
 8005e86:	4852      	ldr	r0, [pc, #328]	; (8005fd0 <_printf_i+0x244>)
 8005e88:	2100      	movs	r1, #0
 8005e8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005e8e:	6866      	ldr	r6, [r4, #4]
 8005e90:	2e00      	cmp	r6, #0
 8005e92:	bfa8      	it	ge
 8005e94:	6821      	ldrge	r1, [r4, #0]
 8005e96:	60a6      	str	r6, [r4, #8]
 8005e98:	bfa4      	itt	ge
 8005e9a:	f021 0104 	bicge.w	r1, r1, #4
 8005e9e:	6021      	strge	r1, [r4, #0]
 8005ea0:	b90d      	cbnz	r5, 8005ea6 <_printf_i+0x11a>
 8005ea2:	2e00      	cmp	r6, #0
 8005ea4:	d04d      	beq.n	8005f42 <_printf_i+0x1b6>
 8005ea6:	4616      	mov	r6, r2
 8005ea8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005eac:	fb03 5711 	mls	r7, r3, r1, r5
 8005eb0:	5dc7      	ldrb	r7, [r0, r7]
 8005eb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005eb6:	462f      	mov	r7, r5
 8005eb8:	42bb      	cmp	r3, r7
 8005eba:	460d      	mov	r5, r1
 8005ebc:	d9f4      	bls.n	8005ea8 <_printf_i+0x11c>
 8005ebe:	2b08      	cmp	r3, #8
 8005ec0:	d10b      	bne.n	8005eda <_printf_i+0x14e>
 8005ec2:	6823      	ldr	r3, [r4, #0]
 8005ec4:	07df      	lsls	r7, r3, #31
 8005ec6:	d508      	bpl.n	8005eda <_printf_i+0x14e>
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	6861      	ldr	r1, [r4, #4]
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	bfde      	ittt	le
 8005ed0:	2330      	movle	r3, #48	; 0x30
 8005ed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005eda:	1b92      	subs	r2, r2, r6
 8005edc:	6122      	str	r2, [r4, #16]
 8005ede:	464b      	mov	r3, r9
 8005ee0:	4621      	mov	r1, r4
 8005ee2:	4640      	mov	r0, r8
 8005ee4:	f8cd a000 	str.w	sl, [sp]
 8005ee8:	aa03      	add	r2, sp, #12
 8005eea:	f7ff fedf 	bl	8005cac <_printf_common>
 8005eee:	3001      	adds	r0, #1
 8005ef0:	d14c      	bne.n	8005f8c <_printf_i+0x200>
 8005ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef6:	b004      	add	sp, #16
 8005ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005efc:	4834      	ldr	r0, [pc, #208]	; (8005fd0 <_printf_i+0x244>)
 8005efe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f02:	680e      	ldr	r6, [r1, #0]
 8005f04:	6823      	ldr	r3, [r4, #0]
 8005f06:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f0a:	061f      	lsls	r7, r3, #24
 8005f0c:	600e      	str	r6, [r1, #0]
 8005f0e:	d514      	bpl.n	8005f3a <_printf_i+0x1ae>
 8005f10:	07d9      	lsls	r1, r3, #31
 8005f12:	bf44      	itt	mi
 8005f14:	f043 0320 	orrmi.w	r3, r3, #32
 8005f18:	6023      	strmi	r3, [r4, #0]
 8005f1a:	b91d      	cbnz	r5, 8005f24 <_printf_i+0x198>
 8005f1c:	6823      	ldr	r3, [r4, #0]
 8005f1e:	f023 0320 	bic.w	r3, r3, #32
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	2310      	movs	r3, #16
 8005f26:	e7af      	b.n	8005e88 <_printf_i+0xfc>
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	f043 0320 	orr.w	r3, r3, #32
 8005f2e:	6023      	str	r3, [r4, #0]
 8005f30:	2378      	movs	r3, #120	; 0x78
 8005f32:	4828      	ldr	r0, [pc, #160]	; (8005fd4 <_printf_i+0x248>)
 8005f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f38:	e7e3      	b.n	8005f02 <_printf_i+0x176>
 8005f3a:	065e      	lsls	r6, r3, #25
 8005f3c:	bf48      	it	mi
 8005f3e:	b2ad      	uxthmi	r5, r5
 8005f40:	e7e6      	b.n	8005f10 <_printf_i+0x184>
 8005f42:	4616      	mov	r6, r2
 8005f44:	e7bb      	b.n	8005ebe <_printf_i+0x132>
 8005f46:	680b      	ldr	r3, [r1, #0]
 8005f48:	6826      	ldr	r6, [r4, #0]
 8005f4a:	1d1d      	adds	r5, r3, #4
 8005f4c:	6960      	ldr	r0, [r4, #20]
 8005f4e:	600d      	str	r5, [r1, #0]
 8005f50:	0635      	lsls	r5, r6, #24
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	d501      	bpl.n	8005f5a <_printf_i+0x1ce>
 8005f56:	6018      	str	r0, [r3, #0]
 8005f58:	e002      	b.n	8005f60 <_printf_i+0x1d4>
 8005f5a:	0671      	lsls	r1, r6, #25
 8005f5c:	d5fb      	bpl.n	8005f56 <_printf_i+0x1ca>
 8005f5e:	8018      	strh	r0, [r3, #0]
 8005f60:	2300      	movs	r3, #0
 8005f62:	4616      	mov	r6, r2
 8005f64:	6123      	str	r3, [r4, #16]
 8005f66:	e7ba      	b.n	8005ede <_printf_i+0x152>
 8005f68:	680b      	ldr	r3, [r1, #0]
 8005f6a:	1d1a      	adds	r2, r3, #4
 8005f6c:	600a      	str	r2, [r1, #0]
 8005f6e:	681e      	ldr	r6, [r3, #0]
 8005f70:	2100      	movs	r1, #0
 8005f72:	4630      	mov	r0, r6
 8005f74:	6862      	ldr	r2, [r4, #4]
 8005f76:	f000 f863 	bl	8006040 <memchr>
 8005f7a:	b108      	cbz	r0, 8005f80 <_printf_i+0x1f4>
 8005f7c:	1b80      	subs	r0, r0, r6
 8005f7e:	6060      	str	r0, [r4, #4]
 8005f80:	6863      	ldr	r3, [r4, #4]
 8005f82:	6123      	str	r3, [r4, #16]
 8005f84:	2300      	movs	r3, #0
 8005f86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f8a:	e7a8      	b.n	8005ede <_printf_i+0x152>
 8005f8c:	4632      	mov	r2, r6
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4640      	mov	r0, r8
 8005f92:	6923      	ldr	r3, [r4, #16]
 8005f94:	47d0      	blx	sl
 8005f96:	3001      	adds	r0, #1
 8005f98:	d0ab      	beq.n	8005ef2 <_printf_i+0x166>
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	079b      	lsls	r3, r3, #30
 8005f9e:	d413      	bmi.n	8005fc8 <_printf_i+0x23c>
 8005fa0:	68e0      	ldr	r0, [r4, #12]
 8005fa2:	9b03      	ldr	r3, [sp, #12]
 8005fa4:	4298      	cmp	r0, r3
 8005fa6:	bfb8      	it	lt
 8005fa8:	4618      	movlt	r0, r3
 8005faa:	e7a4      	b.n	8005ef6 <_printf_i+0x16a>
 8005fac:	2301      	movs	r3, #1
 8005fae:	4632      	mov	r2, r6
 8005fb0:	4649      	mov	r1, r9
 8005fb2:	4640      	mov	r0, r8
 8005fb4:	47d0      	blx	sl
 8005fb6:	3001      	adds	r0, #1
 8005fb8:	d09b      	beq.n	8005ef2 <_printf_i+0x166>
 8005fba:	3501      	adds	r5, #1
 8005fbc:	68e3      	ldr	r3, [r4, #12]
 8005fbe:	9903      	ldr	r1, [sp, #12]
 8005fc0:	1a5b      	subs	r3, r3, r1
 8005fc2:	42ab      	cmp	r3, r5
 8005fc4:	dcf2      	bgt.n	8005fac <_printf_i+0x220>
 8005fc6:	e7eb      	b.n	8005fa0 <_printf_i+0x214>
 8005fc8:	2500      	movs	r5, #0
 8005fca:	f104 0619 	add.w	r6, r4, #25
 8005fce:	e7f5      	b.n	8005fbc <_printf_i+0x230>
 8005fd0:	08006638 	.word	0x08006638
 8005fd4:	08006649 	.word	0x08006649

08005fd8 <siprintf>:
 8005fd8:	b40e      	push	{r1, r2, r3}
 8005fda:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fde:	b500      	push	{lr}
 8005fe0:	b09c      	sub	sp, #112	; 0x70
 8005fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	9107      	str	r1, [sp, #28]
 8005fea:	9104      	str	r1, [sp, #16]
 8005fec:	4808      	ldr	r0, [pc, #32]	; (8006010 <siprintf+0x38>)
 8005fee:	4909      	ldr	r1, [pc, #36]	; (8006014 <siprintf+0x3c>)
 8005ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff4:	9105      	str	r1, [sp, #20]
 8005ff6:	6800      	ldr	r0, [r0, #0]
 8005ff8:	a902      	add	r1, sp, #8
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	f000 f970 	bl	80062e0 <_svfiprintf_r>
 8006000:	2200      	movs	r2, #0
 8006002:	9b02      	ldr	r3, [sp, #8]
 8006004:	701a      	strb	r2, [r3, #0]
 8006006:	b01c      	add	sp, #112	; 0x70
 8006008:	f85d eb04 	ldr.w	lr, [sp], #4
 800600c:	b003      	add	sp, #12
 800600e:	4770      	bx	lr
 8006010:	20000010 	.word	0x20000010
 8006014:	ffff0208 	.word	0xffff0208

08006018 <strncmp>:
 8006018:	b510      	push	{r4, lr}
 800601a:	b16a      	cbz	r2, 8006038 <strncmp+0x20>
 800601c:	3901      	subs	r1, #1
 800601e:	1884      	adds	r4, r0, r2
 8006020:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006024:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006028:	4293      	cmp	r3, r2
 800602a:	d103      	bne.n	8006034 <strncmp+0x1c>
 800602c:	42a0      	cmp	r0, r4
 800602e:	d001      	beq.n	8006034 <strncmp+0x1c>
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1f5      	bne.n	8006020 <strncmp+0x8>
 8006034:	1a98      	subs	r0, r3, r2
 8006036:	bd10      	pop	{r4, pc}
 8006038:	4610      	mov	r0, r2
 800603a:	e7fc      	b.n	8006036 <strncmp+0x1e>

0800603c <__retarget_lock_acquire_recursive>:
 800603c:	4770      	bx	lr

0800603e <__retarget_lock_release_recursive>:
 800603e:	4770      	bx	lr

08006040 <memchr>:
 8006040:	4603      	mov	r3, r0
 8006042:	b510      	push	{r4, lr}
 8006044:	b2c9      	uxtb	r1, r1
 8006046:	4402      	add	r2, r0
 8006048:	4293      	cmp	r3, r2
 800604a:	4618      	mov	r0, r3
 800604c:	d101      	bne.n	8006052 <memchr+0x12>
 800604e:	2000      	movs	r0, #0
 8006050:	e003      	b.n	800605a <memchr+0x1a>
 8006052:	7804      	ldrb	r4, [r0, #0]
 8006054:	3301      	adds	r3, #1
 8006056:	428c      	cmp	r4, r1
 8006058:	d1f6      	bne.n	8006048 <memchr+0x8>
 800605a:	bd10      	pop	{r4, pc}

0800605c <memmove>:
 800605c:	4288      	cmp	r0, r1
 800605e:	b510      	push	{r4, lr}
 8006060:	eb01 0402 	add.w	r4, r1, r2
 8006064:	d902      	bls.n	800606c <memmove+0x10>
 8006066:	4284      	cmp	r4, r0
 8006068:	4623      	mov	r3, r4
 800606a:	d807      	bhi.n	800607c <memmove+0x20>
 800606c:	1e43      	subs	r3, r0, #1
 800606e:	42a1      	cmp	r1, r4
 8006070:	d008      	beq.n	8006084 <memmove+0x28>
 8006072:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006076:	f803 2f01 	strb.w	r2, [r3, #1]!
 800607a:	e7f8      	b.n	800606e <memmove+0x12>
 800607c:	4601      	mov	r1, r0
 800607e:	4402      	add	r2, r0
 8006080:	428a      	cmp	r2, r1
 8006082:	d100      	bne.n	8006086 <memmove+0x2a>
 8006084:	bd10      	pop	{r4, pc}
 8006086:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800608a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800608e:	e7f7      	b.n	8006080 <memmove+0x24>

08006090 <_free_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4605      	mov	r5, r0
 8006094:	2900      	cmp	r1, #0
 8006096:	d043      	beq.n	8006120 <_free_r+0x90>
 8006098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800609c:	1f0c      	subs	r4, r1, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	bfb8      	it	lt
 80060a2:	18e4      	addlt	r4, r4, r3
 80060a4:	f000 fa2c 	bl	8006500 <__malloc_lock>
 80060a8:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <_free_r+0x94>)
 80060aa:	6813      	ldr	r3, [r2, #0]
 80060ac:	4610      	mov	r0, r2
 80060ae:	b933      	cbnz	r3, 80060be <_free_r+0x2e>
 80060b0:	6063      	str	r3, [r4, #4]
 80060b2:	6014      	str	r4, [r2, #0]
 80060b4:	4628      	mov	r0, r5
 80060b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ba:	f000 ba27 	b.w	800650c <__malloc_unlock>
 80060be:	42a3      	cmp	r3, r4
 80060c0:	d90a      	bls.n	80060d8 <_free_r+0x48>
 80060c2:	6821      	ldr	r1, [r4, #0]
 80060c4:	1862      	adds	r2, r4, r1
 80060c6:	4293      	cmp	r3, r2
 80060c8:	bf01      	itttt	eq
 80060ca:	681a      	ldreq	r2, [r3, #0]
 80060cc:	685b      	ldreq	r3, [r3, #4]
 80060ce:	1852      	addeq	r2, r2, r1
 80060d0:	6022      	streq	r2, [r4, #0]
 80060d2:	6063      	str	r3, [r4, #4]
 80060d4:	6004      	str	r4, [r0, #0]
 80060d6:	e7ed      	b.n	80060b4 <_free_r+0x24>
 80060d8:	461a      	mov	r2, r3
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	b10b      	cbz	r3, 80060e2 <_free_r+0x52>
 80060de:	42a3      	cmp	r3, r4
 80060e0:	d9fa      	bls.n	80060d8 <_free_r+0x48>
 80060e2:	6811      	ldr	r1, [r2, #0]
 80060e4:	1850      	adds	r0, r2, r1
 80060e6:	42a0      	cmp	r0, r4
 80060e8:	d10b      	bne.n	8006102 <_free_r+0x72>
 80060ea:	6820      	ldr	r0, [r4, #0]
 80060ec:	4401      	add	r1, r0
 80060ee:	1850      	adds	r0, r2, r1
 80060f0:	4283      	cmp	r3, r0
 80060f2:	6011      	str	r1, [r2, #0]
 80060f4:	d1de      	bne.n	80060b4 <_free_r+0x24>
 80060f6:	6818      	ldr	r0, [r3, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	4401      	add	r1, r0
 80060fc:	6011      	str	r1, [r2, #0]
 80060fe:	6053      	str	r3, [r2, #4]
 8006100:	e7d8      	b.n	80060b4 <_free_r+0x24>
 8006102:	d902      	bls.n	800610a <_free_r+0x7a>
 8006104:	230c      	movs	r3, #12
 8006106:	602b      	str	r3, [r5, #0]
 8006108:	e7d4      	b.n	80060b4 <_free_r+0x24>
 800610a:	6820      	ldr	r0, [r4, #0]
 800610c:	1821      	adds	r1, r4, r0
 800610e:	428b      	cmp	r3, r1
 8006110:	bf01      	itttt	eq
 8006112:	6819      	ldreq	r1, [r3, #0]
 8006114:	685b      	ldreq	r3, [r3, #4]
 8006116:	1809      	addeq	r1, r1, r0
 8006118:	6021      	streq	r1, [r4, #0]
 800611a:	6063      	str	r3, [r4, #4]
 800611c:	6054      	str	r4, [r2, #4]
 800611e:	e7c9      	b.n	80060b4 <_free_r+0x24>
 8006120:	bd38      	pop	{r3, r4, r5, pc}
 8006122:	bf00      	nop
 8006124:	2000219c 	.word	0x2000219c

08006128 <_malloc_r>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	1ccd      	adds	r5, r1, #3
 800612c:	f025 0503 	bic.w	r5, r5, #3
 8006130:	3508      	adds	r5, #8
 8006132:	2d0c      	cmp	r5, #12
 8006134:	bf38      	it	cc
 8006136:	250c      	movcc	r5, #12
 8006138:	2d00      	cmp	r5, #0
 800613a:	4606      	mov	r6, r0
 800613c:	db01      	blt.n	8006142 <_malloc_r+0x1a>
 800613e:	42a9      	cmp	r1, r5
 8006140:	d903      	bls.n	800614a <_malloc_r+0x22>
 8006142:	230c      	movs	r3, #12
 8006144:	6033      	str	r3, [r6, #0]
 8006146:	2000      	movs	r0, #0
 8006148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800614a:	f000 f9d9 	bl	8006500 <__malloc_lock>
 800614e:	4921      	ldr	r1, [pc, #132]	; (80061d4 <_malloc_r+0xac>)
 8006150:	680a      	ldr	r2, [r1, #0]
 8006152:	4614      	mov	r4, r2
 8006154:	b99c      	cbnz	r4, 800617e <_malloc_r+0x56>
 8006156:	4f20      	ldr	r7, [pc, #128]	; (80061d8 <_malloc_r+0xb0>)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	b923      	cbnz	r3, 8006166 <_malloc_r+0x3e>
 800615c:	4621      	mov	r1, r4
 800615e:	4630      	mov	r0, r6
 8006160:	f000 f9be 	bl	80064e0 <_sbrk_r>
 8006164:	6038      	str	r0, [r7, #0]
 8006166:	4629      	mov	r1, r5
 8006168:	4630      	mov	r0, r6
 800616a:	f000 f9b9 	bl	80064e0 <_sbrk_r>
 800616e:	1c43      	adds	r3, r0, #1
 8006170:	d123      	bne.n	80061ba <_malloc_r+0x92>
 8006172:	230c      	movs	r3, #12
 8006174:	4630      	mov	r0, r6
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	f000 f9c8 	bl	800650c <__malloc_unlock>
 800617c:	e7e3      	b.n	8006146 <_malloc_r+0x1e>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	1b5b      	subs	r3, r3, r5
 8006182:	d417      	bmi.n	80061b4 <_malloc_r+0x8c>
 8006184:	2b0b      	cmp	r3, #11
 8006186:	d903      	bls.n	8006190 <_malloc_r+0x68>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	441c      	add	r4, r3
 800618c:	6025      	str	r5, [r4, #0]
 800618e:	e004      	b.n	800619a <_malloc_r+0x72>
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	42a2      	cmp	r2, r4
 8006194:	bf0c      	ite	eq
 8006196:	600b      	streq	r3, [r1, #0]
 8006198:	6053      	strne	r3, [r2, #4]
 800619a:	4630      	mov	r0, r6
 800619c:	f000 f9b6 	bl	800650c <__malloc_unlock>
 80061a0:	f104 000b 	add.w	r0, r4, #11
 80061a4:	1d23      	adds	r3, r4, #4
 80061a6:	f020 0007 	bic.w	r0, r0, #7
 80061aa:	1ac2      	subs	r2, r0, r3
 80061ac:	d0cc      	beq.n	8006148 <_malloc_r+0x20>
 80061ae:	1a1b      	subs	r3, r3, r0
 80061b0:	50a3      	str	r3, [r4, r2]
 80061b2:	e7c9      	b.n	8006148 <_malloc_r+0x20>
 80061b4:	4622      	mov	r2, r4
 80061b6:	6864      	ldr	r4, [r4, #4]
 80061b8:	e7cc      	b.n	8006154 <_malloc_r+0x2c>
 80061ba:	1cc4      	adds	r4, r0, #3
 80061bc:	f024 0403 	bic.w	r4, r4, #3
 80061c0:	42a0      	cmp	r0, r4
 80061c2:	d0e3      	beq.n	800618c <_malloc_r+0x64>
 80061c4:	1a21      	subs	r1, r4, r0
 80061c6:	4630      	mov	r0, r6
 80061c8:	f000 f98a 	bl	80064e0 <_sbrk_r>
 80061cc:	3001      	adds	r0, #1
 80061ce:	d1dd      	bne.n	800618c <_malloc_r+0x64>
 80061d0:	e7cf      	b.n	8006172 <_malloc_r+0x4a>
 80061d2:	bf00      	nop
 80061d4:	2000219c 	.word	0x2000219c
 80061d8:	200021a0 	.word	0x200021a0

080061dc <_realloc_r>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	4607      	mov	r7, r0
 80061e0:	4614      	mov	r4, r2
 80061e2:	460e      	mov	r6, r1
 80061e4:	b921      	cbnz	r1, 80061f0 <_realloc_r+0x14>
 80061e6:	4611      	mov	r1, r2
 80061e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80061ec:	f7ff bf9c 	b.w	8006128 <_malloc_r>
 80061f0:	b922      	cbnz	r2, 80061fc <_realloc_r+0x20>
 80061f2:	f7ff ff4d 	bl	8006090 <_free_r>
 80061f6:	4625      	mov	r5, r4
 80061f8:	4628      	mov	r0, r5
 80061fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fc:	f000 f98c 	bl	8006518 <_malloc_usable_size_r>
 8006200:	42a0      	cmp	r0, r4
 8006202:	d20f      	bcs.n	8006224 <_realloc_r+0x48>
 8006204:	4621      	mov	r1, r4
 8006206:	4638      	mov	r0, r7
 8006208:	f7ff ff8e 	bl	8006128 <_malloc_r>
 800620c:	4605      	mov	r5, r0
 800620e:	2800      	cmp	r0, #0
 8006210:	d0f2      	beq.n	80061f8 <_realloc_r+0x1c>
 8006212:	4631      	mov	r1, r6
 8006214:	4622      	mov	r2, r4
 8006216:	f7ff fd33 	bl	8005c80 <memcpy>
 800621a:	4631      	mov	r1, r6
 800621c:	4638      	mov	r0, r7
 800621e:	f7ff ff37 	bl	8006090 <_free_r>
 8006222:	e7e9      	b.n	80061f8 <_realloc_r+0x1c>
 8006224:	4635      	mov	r5, r6
 8006226:	e7e7      	b.n	80061f8 <_realloc_r+0x1c>

08006228 <__ssputs_r>:
 8006228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800622c:	688e      	ldr	r6, [r1, #8]
 800622e:	4682      	mov	sl, r0
 8006230:	429e      	cmp	r6, r3
 8006232:	460c      	mov	r4, r1
 8006234:	4690      	mov	r8, r2
 8006236:	461f      	mov	r7, r3
 8006238:	d838      	bhi.n	80062ac <__ssputs_r+0x84>
 800623a:	898a      	ldrh	r2, [r1, #12]
 800623c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006240:	d032      	beq.n	80062a8 <__ssputs_r+0x80>
 8006242:	6825      	ldr	r5, [r4, #0]
 8006244:	6909      	ldr	r1, [r1, #16]
 8006246:	3301      	adds	r3, #1
 8006248:	eba5 0901 	sub.w	r9, r5, r1
 800624c:	6965      	ldr	r5, [r4, #20]
 800624e:	444b      	add	r3, r9
 8006250:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006254:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006258:	106d      	asrs	r5, r5, #1
 800625a:	429d      	cmp	r5, r3
 800625c:	bf38      	it	cc
 800625e:	461d      	movcc	r5, r3
 8006260:	0553      	lsls	r3, r2, #21
 8006262:	d531      	bpl.n	80062c8 <__ssputs_r+0xa0>
 8006264:	4629      	mov	r1, r5
 8006266:	f7ff ff5f 	bl	8006128 <_malloc_r>
 800626a:	4606      	mov	r6, r0
 800626c:	b950      	cbnz	r0, 8006284 <__ssputs_r+0x5c>
 800626e:	230c      	movs	r3, #12
 8006270:	f04f 30ff 	mov.w	r0, #4294967295
 8006274:	f8ca 3000 	str.w	r3, [sl]
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006284:	464a      	mov	r2, r9
 8006286:	6921      	ldr	r1, [r4, #16]
 8006288:	f7ff fcfa 	bl	8005c80 <memcpy>
 800628c:	89a3      	ldrh	r3, [r4, #12]
 800628e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006296:	81a3      	strh	r3, [r4, #12]
 8006298:	6126      	str	r6, [r4, #16]
 800629a:	444e      	add	r6, r9
 800629c:	6026      	str	r6, [r4, #0]
 800629e:	463e      	mov	r6, r7
 80062a0:	6165      	str	r5, [r4, #20]
 80062a2:	eba5 0509 	sub.w	r5, r5, r9
 80062a6:	60a5      	str	r5, [r4, #8]
 80062a8:	42be      	cmp	r6, r7
 80062aa:	d900      	bls.n	80062ae <__ssputs_r+0x86>
 80062ac:	463e      	mov	r6, r7
 80062ae:	4632      	mov	r2, r6
 80062b0:	4641      	mov	r1, r8
 80062b2:	6820      	ldr	r0, [r4, #0]
 80062b4:	f7ff fed2 	bl	800605c <memmove>
 80062b8:	68a3      	ldr	r3, [r4, #8]
 80062ba:	6822      	ldr	r2, [r4, #0]
 80062bc:	1b9b      	subs	r3, r3, r6
 80062be:	4432      	add	r2, r6
 80062c0:	2000      	movs	r0, #0
 80062c2:	60a3      	str	r3, [r4, #8]
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	e7db      	b.n	8006280 <__ssputs_r+0x58>
 80062c8:	462a      	mov	r2, r5
 80062ca:	f7ff ff87 	bl	80061dc <_realloc_r>
 80062ce:	4606      	mov	r6, r0
 80062d0:	2800      	cmp	r0, #0
 80062d2:	d1e1      	bne.n	8006298 <__ssputs_r+0x70>
 80062d4:	4650      	mov	r0, sl
 80062d6:	6921      	ldr	r1, [r4, #16]
 80062d8:	f7ff feda 	bl	8006090 <_free_r>
 80062dc:	e7c7      	b.n	800626e <__ssputs_r+0x46>
	...

080062e0 <_svfiprintf_r>:
 80062e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e4:	4698      	mov	r8, r3
 80062e6:	898b      	ldrh	r3, [r1, #12]
 80062e8:	4607      	mov	r7, r0
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	460d      	mov	r5, r1
 80062ee:	4614      	mov	r4, r2
 80062f0:	b09d      	sub	sp, #116	; 0x74
 80062f2:	d50e      	bpl.n	8006312 <_svfiprintf_r+0x32>
 80062f4:	690b      	ldr	r3, [r1, #16]
 80062f6:	b963      	cbnz	r3, 8006312 <_svfiprintf_r+0x32>
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	f7ff ff15 	bl	8006128 <_malloc_r>
 80062fe:	6028      	str	r0, [r5, #0]
 8006300:	6128      	str	r0, [r5, #16]
 8006302:	b920      	cbnz	r0, 800630e <_svfiprintf_r+0x2e>
 8006304:	230c      	movs	r3, #12
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f04f 30ff 	mov.w	r0, #4294967295
 800630c:	e0d1      	b.n	80064b2 <_svfiprintf_r+0x1d2>
 800630e:	2340      	movs	r3, #64	; 0x40
 8006310:	616b      	str	r3, [r5, #20]
 8006312:	2300      	movs	r3, #0
 8006314:	9309      	str	r3, [sp, #36]	; 0x24
 8006316:	2320      	movs	r3, #32
 8006318:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800631c:	2330      	movs	r3, #48	; 0x30
 800631e:	f04f 0901 	mov.w	r9, #1
 8006322:	f8cd 800c 	str.w	r8, [sp, #12]
 8006326:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064cc <_svfiprintf_r+0x1ec>
 800632a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800632e:	4623      	mov	r3, r4
 8006330:	469a      	mov	sl, r3
 8006332:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006336:	b10a      	cbz	r2, 800633c <_svfiprintf_r+0x5c>
 8006338:	2a25      	cmp	r2, #37	; 0x25
 800633a:	d1f9      	bne.n	8006330 <_svfiprintf_r+0x50>
 800633c:	ebba 0b04 	subs.w	fp, sl, r4
 8006340:	d00b      	beq.n	800635a <_svfiprintf_r+0x7a>
 8006342:	465b      	mov	r3, fp
 8006344:	4622      	mov	r2, r4
 8006346:	4629      	mov	r1, r5
 8006348:	4638      	mov	r0, r7
 800634a:	f7ff ff6d 	bl	8006228 <__ssputs_r>
 800634e:	3001      	adds	r0, #1
 8006350:	f000 80aa 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006354:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006356:	445a      	add	r2, fp
 8006358:	9209      	str	r2, [sp, #36]	; 0x24
 800635a:	f89a 3000 	ldrb.w	r3, [sl]
 800635e:	2b00      	cmp	r3, #0
 8006360:	f000 80a2 	beq.w	80064a8 <_svfiprintf_r+0x1c8>
 8006364:	2300      	movs	r3, #0
 8006366:	f04f 32ff 	mov.w	r2, #4294967295
 800636a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800636e:	f10a 0a01 	add.w	sl, sl, #1
 8006372:	9304      	str	r3, [sp, #16]
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800637a:	931a      	str	r3, [sp, #104]	; 0x68
 800637c:	4654      	mov	r4, sl
 800637e:	2205      	movs	r2, #5
 8006380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006384:	4851      	ldr	r0, [pc, #324]	; (80064cc <_svfiprintf_r+0x1ec>)
 8006386:	f7ff fe5b 	bl	8006040 <memchr>
 800638a:	9a04      	ldr	r2, [sp, #16]
 800638c:	b9d8      	cbnz	r0, 80063c6 <_svfiprintf_r+0xe6>
 800638e:	06d0      	lsls	r0, r2, #27
 8006390:	bf44      	itt	mi
 8006392:	2320      	movmi	r3, #32
 8006394:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006398:	0711      	lsls	r1, r2, #28
 800639a:	bf44      	itt	mi
 800639c:	232b      	movmi	r3, #43	; 0x2b
 800639e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063a2:	f89a 3000 	ldrb.w	r3, [sl]
 80063a6:	2b2a      	cmp	r3, #42	; 0x2a
 80063a8:	d015      	beq.n	80063d6 <_svfiprintf_r+0xf6>
 80063aa:	4654      	mov	r4, sl
 80063ac:	2000      	movs	r0, #0
 80063ae:	f04f 0c0a 	mov.w	ip, #10
 80063b2:	9a07      	ldr	r2, [sp, #28]
 80063b4:	4621      	mov	r1, r4
 80063b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063ba:	3b30      	subs	r3, #48	; 0x30
 80063bc:	2b09      	cmp	r3, #9
 80063be:	d94e      	bls.n	800645e <_svfiprintf_r+0x17e>
 80063c0:	b1b0      	cbz	r0, 80063f0 <_svfiprintf_r+0x110>
 80063c2:	9207      	str	r2, [sp, #28]
 80063c4:	e014      	b.n	80063f0 <_svfiprintf_r+0x110>
 80063c6:	eba0 0308 	sub.w	r3, r0, r8
 80063ca:	fa09 f303 	lsl.w	r3, r9, r3
 80063ce:	4313      	orrs	r3, r2
 80063d0:	46a2      	mov	sl, r4
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	e7d2      	b.n	800637c <_svfiprintf_r+0x9c>
 80063d6:	9b03      	ldr	r3, [sp, #12]
 80063d8:	1d19      	adds	r1, r3, #4
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	9103      	str	r1, [sp, #12]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	bfbb      	ittet	lt
 80063e2:	425b      	neglt	r3, r3
 80063e4:	f042 0202 	orrlt.w	r2, r2, #2
 80063e8:	9307      	strge	r3, [sp, #28]
 80063ea:	9307      	strlt	r3, [sp, #28]
 80063ec:	bfb8      	it	lt
 80063ee:	9204      	strlt	r2, [sp, #16]
 80063f0:	7823      	ldrb	r3, [r4, #0]
 80063f2:	2b2e      	cmp	r3, #46	; 0x2e
 80063f4:	d10c      	bne.n	8006410 <_svfiprintf_r+0x130>
 80063f6:	7863      	ldrb	r3, [r4, #1]
 80063f8:	2b2a      	cmp	r3, #42	; 0x2a
 80063fa:	d135      	bne.n	8006468 <_svfiprintf_r+0x188>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	3402      	adds	r4, #2
 8006400:	1d1a      	adds	r2, r3, #4
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	9203      	str	r2, [sp, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	f04f 33ff 	movlt.w	r3, #4294967295
 800640e:	9305      	str	r3, [sp, #20]
 8006410:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064dc <_svfiprintf_r+0x1fc>
 8006414:	2203      	movs	r2, #3
 8006416:	4650      	mov	r0, sl
 8006418:	7821      	ldrb	r1, [r4, #0]
 800641a:	f7ff fe11 	bl	8006040 <memchr>
 800641e:	b140      	cbz	r0, 8006432 <_svfiprintf_r+0x152>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	eba0 000a 	sub.w	r0, r0, sl
 8006426:	fa03 f000 	lsl.w	r0, r3, r0
 800642a:	9b04      	ldr	r3, [sp, #16]
 800642c:	3401      	adds	r4, #1
 800642e:	4303      	orrs	r3, r0
 8006430:	9304      	str	r3, [sp, #16]
 8006432:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006436:	2206      	movs	r2, #6
 8006438:	4825      	ldr	r0, [pc, #148]	; (80064d0 <_svfiprintf_r+0x1f0>)
 800643a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800643e:	f7ff fdff 	bl	8006040 <memchr>
 8006442:	2800      	cmp	r0, #0
 8006444:	d038      	beq.n	80064b8 <_svfiprintf_r+0x1d8>
 8006446:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <_svfiprintf_r+0x1f4>)
 8006448:	bb1b      	cbnz	r3, 8006492 <_svfiprintf_r+0x1b2>
 800644a:	9b03      	ldr	r3, [sp, #12]
 800644c:	3307      	adds	r3, #7
 800644e:	f023 0307 	bic.w	r3, r3, #7
 8006452:	3308      	adds	r3, #8
 8006454:	9303      	str	r3, [sp, #12]
 8006456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006458:	4433      	add	r3, r6
 800645a:	9309      	str	r3, [sp, #36]	; 0x24
 800645c:	e767      	b.n	800632e <_svfiprintf_r+0x4e>
 800645e:	460c      	mov	r4, r1
 8006460:	2001      	movs	r0, #1
 8006462:	fb0c 3202 	mla	r2, ip, r2, r3
 8006466:	e7a5      	b.n	80063b4 <_svfiprintf_r+0xd4>
 8006468:	2300      	movs	r3, #0
 800646a:	f04f 0c0a 	mov.w	ip, #10
 800646e:	4619      	mov	r1, r3
 8006470:	3401      	adds	r4, #1
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	4620      	mov	r0, r4
 8006476:	f810 2b01 	ldrb.w	r2, [r0], #1
 800647a:	3a30      	subs	r2, #48	; 0x30
 800647c:	2a09      	cmp	r2, #9
 800647e:	d903      	bls.n	8006488 <_svfiprintf_r+0x1a8>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0c5      	beq.n	8006410 <_svfiprintf_r+0x130>
 8006484:	9105      	str	r1, [sp, #20]
 8006486:	e7c3      	b.n	8006410 <_svfiprintf_r+0x130>
 8006488:	4604      	mov	r4, r0
 800648a:	2301      	movs	r3, #1
 800648c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006490:	e7f0      	b.n	8006474 <_svfiprintf_r+0x194>
 8006492:	ab03      	add	r3, sp, #12
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	462a      	mov	r2, r5
 8006498:	4638      	mov	r0, r7
 800649a:	4b0f      	ldr	r3, [pc, #60]	; (80064d8 <_svfiprintf_r+0x1f8>)
 800649c:	a904      	add	r1, sp, #16
 800649e:	f3af 8000 	nop.w
 80064a2:	1c42      	adds	r2, r0, #1
 80064a4:	4606      	mov	r6, r0
 80064a6:	d1d6      	bne.n	8006456 <_svfiprintf_r+0x176>
 80064a8:	89ab      	ldrh	r3, [r5, #12]
 80064aa:	065b      	lsls	r3, r3, #25
 80064ac:	f53f af2c 	bmi.w	8006308 <_svfiprintf_r+0x28>
 80064b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80064b2:	b01d      	add	sp, #116	; 0x74
 80064b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064b8:	ab03      	add	r3, sp, #12
 80064ba:	9300      	str	r3, [sp, #0]
 80064bc:	462a      	mov	r2, r5
 80064be:	4638      	mov	r0, r7
 80064c0:	4b05      	ldr	r3, [pc, #20]	; (80064d8 <_svfiprintf_r+0x1f8>)
 80064c2:	a904      	add	r1, sp, #16
 80064c4:	f7ff fc62 	bl	8005d8c <_printf_i>
 80064c8:	e7eb      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064ca:	bf00      	nop
 80064cc:	080066bc 	.word	0x080066bc
 80064d0:	080066c6 	.word	0x080066c6
 80064d4:	00000000 	.word	0x00000000
 80064d8:	08006229 	.word	0x08006229
 80064dc:	080066c2 	.word	0x080066c2

080064e0 <_sbrk_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	2300      	movs	r3, #0
 80064e4:	4d05      	ldr	r5, [pc, #20]	; (80064fc <_sbrk_r+0x1c>)
 80064e6:	4604      	mov	r4, r0
 80064e8:	4608      	mov	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fa faa2 	bl	8000a34 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d102      	bne.n	80064fa <_sbrk_r+0x1a>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	b103      	cbz	r3, 80064fa <_sbrk_r+0x1a>
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	bd38      	pop	{r3, r4, r5, pc}
 80064fc:	20002324 	.word	0x20002324

08006500 <__malloc_lock>:
 8006500:	4801      	ldr	r0, [pc, #4]	; (8006508 <__malloc_lock+0x8>)
 8006502:	f7ff bd9b 	b.w	800603c <__retarget_lock_acquire_recursive>
 8006506:	bf00      	nop
 8006508:	2000231c 	.word	0x2000231c

0800650c <__malloc_unlock>:
 800650c:	4801      	ldr	r0, [pc, #4]	; (8006514 <__malloc_unlock+0x8>)
 800650e:	f7ff bd96 	b.w	800603e <__retarget_lock_release_recursive>
 8006512:	bf00      	nop
 8006514:	2000231c 	.word	0x2000231c

08006518 <_malloc_usable_size_r>:
 8006518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800651c:	1f18      	subs	r0, r3, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	bfbc      	itt	lt
 8006522:	580b      	ldrlt	r3, [r1, r0]
 8006524:	18c0      	addlt	r0, r0, r3
 8006526:	4770      	bx	lr

08006528 <_init>:
 8006528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652a:	bf00      	nop
 800652c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800652e:	bc08      	pop	{r3}
 8006530:	469e      	mov	lr, r3
 8006532:	4770      	bx	lr

08006534 <_fini>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr
