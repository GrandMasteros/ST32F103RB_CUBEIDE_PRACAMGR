
STM32_NUCLEO_mgr_free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d98  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f48  08004f48  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004f48  08004f48  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f48  08004f48  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e38  20000010  08004f60  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e48  08004f60  00021e48  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001797d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316e  00000000  00000000  000379b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  0003ab28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e0  00000000  00000000  0003be50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003195  00000000  00000000  0003d030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014092  00000000  00000000  000401c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092ffb  00000000  00000000  00054257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7252  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000503c  00000000  00000000  000e72a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e90 	.word	0x08004e90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004e90 	.word	0x08004e90

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fb52 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f828 	bl	80001ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f8d8 	bl	8000310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f8ac 	bl	80002bc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f864 	bl	8000230 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000168:	f002 f9ac 	bl	80024c4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of USART_Task */
  USART_TaskHandle = osThreadNew(USART_Process, NULL, &USART_Task_attributes);
 800016c:	4a09      	ldr	r2, [pc, #36]	; (8000194 <main+0x44>)
 800016e:	2100      	movs	r1, #0
 8000170:	4809      	ldr	r0, [pc, #36]	; (8000198 <main+0x48>)
 8000172:	f002 fa0d 	bl	8002590 <osThreadNew>
 8000176:	4603      	mov	r3, r0
 8000178:	4a08      	ldr	r2, [pc, #32]	; (800019c <main+0x4c>)
 800017a:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Task */
  GPIO_TaskHandle = osThreadNew(GPIO_Process, NULL, &GPIO_Task_attributes);
 800017c:	4a08      	ldr	r2, [pc, #32]	; (80001a0 <main+0x50>)
 800017e:	2100      	movs	r1, #0
 8000180:	4808      	ldr	r0, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	f002 fa05 	bl	8002590 <osThreadNew>
 8000186:	4603      	mov	r3, r0
 8000188:	4a07      	ldr	r2, [pc, #28]	; (80001a8 <main+0x58>)
 800018a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800018c:	f002 f9cc 	bl	8002528 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000190:	e7fe      	b.n	8000190 <main+0x40>
 8000192:	bf00      	nop
 8000194:	08004ee8 	.word	0x08004ee8
 8000198:	0800043d 	.word	0x0800043d
 800019c:	20001d78 	.word	0x20001d78
 80001a0:	08004f0c 	.word	0x08004f0c
 80001a4:	08000469 	.word	0x08000469
 80001a8:	20001d74 	.word	0x20001d74

080001ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b090      	sub	sp, #64	; 0x40
 80001b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b2:	f107 0318 	add.w	r3, r7, #24
 80001b6:	2228      	movs	r2, #40	; 0x28
 80001b8:	2100      	movs	r1, #0
 80001ba:	4618      	mov	r0, r3
 80001bc:	f004 fe60 	bl	8004e80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c0:	1d3b      	adds	r3, r7, #4
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d2:	2301      	movs	r3, #1
 80001d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001d6:	2310      	movs	r3, #16
 80001d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001da:	2302      	movs	r3, #2
 80001dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001de:	2300      	movs	r3, #0
 80001e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001e2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e8:	f107 0318 	add.w	r3, r7, #24
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 fe4b 	bl	8000e88 <HAL_RCC_OscConfig>
 80001f2:	4603      	mov	r3, r0
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d001      	beq.n	80001fc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001f8:	f000 f98c 	bl	8000514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001fc:	230f      	movs	r3, #15
 80001fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000200:	2302      	movs	r3, #2
 8000202:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000204:	2300      	movs	r3, #0
 8000206:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800020c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800020e:	2300      	movs	r3, #0
 8000210:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	2102      	movs	r1, #2
 8000216:	4618      	mov	r0, r3
 8000218:	f001 f8b6 	bl	8001388 <HAL_RCC_ClockConfig>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d001      	beq.n	8000226 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000222:	f000 f977 	bl	8000514 <Error_Handler>
  }
}
 8000226:	bf00      	nop
 8000228:	3740      	adds	r7, #64	; 0x40
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
	...

08000230 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio;
  gpio.Mode = GPIO_MODE_AF_PP;
 8000236:	2302      	movs	r3, #2
 8000238:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_9;
 800023a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800023e:	603b      	str	r3, [r7, #0]
  gpio.Pull = GPIO_NOPULL;
 8000240:	2300      	movs	r3, #0
 8000242:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000244:	2302      	movs	r3, #2
 8000246:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &gpio);
 8000248:	463b      	mov	r3, r7
 800024a:	4619      	mov	r1, r3
 800024c:	4818      	ldr	r0, [pc, #96]	; (80002b0 <MX_USART1_UART_Init+0x80>)
 800024e:	f000 fc5d 	bl	8000b0c <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_AF_INPUT;
 8000252:	2300      	movs	r3, #0
 8000254:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_10;
 8000256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800025a:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &gpio);
 800025c:	463b      	mov	r3, r7
 800025e:	4619      	mov	r1, r3
 8000260:	4813      	ldr	r0, [pc, #76]	; (80002b0 <MX_USART1_UART_Init+0x80>)
 8000262:	f000 fc53 	bl	8000b0c <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000266:	4b13      	ldr	r3, [pc, #76]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 8000268:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <MX_USART1_UART_Init+0x88>)
 800026a:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800026c:	4b11      	ldr	r3, [pc, #68]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 800026e:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000272:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 8000276:	2200      	movs	r2, #0
 8000278:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 800027c:	2200      	movs	r2, #0
 800027e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000280:	4b0c      	ldr	r3, [pc, #48]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000286:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 8000288:	220c      	movs	r2, #12
 800028a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 800028e:	2200      	movs	r2, #0
 8000290:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000292:	4b08      	ldr	r3, [pc, #32]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 8000294:	2200      	movs	r2, #0
 8000296:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000298:	4806      	ldr	r0, [pc, #24]	; (80002b4 <MX_USART1_UART_Init+0x84>)
 800029a:	f001 fc89 	bl	8001bb0 <HAL_UART_Init>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80002a4:	f000 f936 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002a8:	bf00      	nop
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	40010800 	.word	0x40010800
 80002b4:	20001d34 	.word	0x20001d34
 80002b8:	40013800 	.word	0x40013800

080002bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002c0:	4b11      	ldr	r3, [pc, #68]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c2:	4a12      	ldr	r2, [pc, #72]	; (800030c <MX_USART2_UART_Init+0x50>)
 80002c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002c6:	4b10      	ldr	r3, [pc, #64]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002ce:	4b0e      	ldr	r3, [pc, #56]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002d4:	4b0c      	ldr	r3, [pc, #48]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002da:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e0:	4b09      	ldr	r3, [pc, #36]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e2:	220c      	movs	r2, #12
 80002e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002e6:	4b08      	ldr	r3, [pc, #32]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	4b06      	ldr	r3, [pc, #24]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f2:	4805      	ldr	r0, [pc, #20]	; (8000308 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f001 fc5c 	bl	8001bb0 <HAL_UART_Init>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002fe:	f000 f909 	bl	8000514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000302:	bf00      	nop
 8000304:	bd80      	pop	{r7, pc}
 8000306:	bf00      	nop
 8000308:	20001d7c 	.word	0x20001d7c
 800030c:	40004400 	.word	0x40004400

08000310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000316:	f107 0310 	add.w	r3, r7, #16
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000324:	4b37      	ldr	r3, [pc, #220]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000326:	699b      	ldr	r3, [r3, #24]
 8000328:	4a36      	ldr	r2, [pc, #216]	; (8000404 <MX_GPIO_Init+0xf4>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6193      	str	r3, [r2, #24]
 8000330:	4b34      	ldr	r3, [pc, #208]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000332:	699b      	ldr	r3, [r3, #24]
 8000334:	f003 0310 	and.w	r3, r3, #16
 8000338:	60fb      	str	r3, [r7, #12]
 800033a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800033c:	4b31      	ldr	r3, [pc, #196]	; (8000404 <MX_GPIO_Init+0xf4>)
 800033e:	699b      	ldr	r3, [r3, #24]
 8000340:	4a30      	ldr	r2, [pc, #192]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000342:	f043 0320 	orr.w	r3, r3, #32
 8000346:	6193      	str	r3, [r2, #24]
 8000348:	4b2e      	ldr	r3, [pc, #184]	; (8000404 <MX_GPIO_Init+0xf4>)
 800034a:	699b      	ldr	r3, [r3, #24]
 800034c:	f003 0320 	and.w	r3, r3, #32
 8000350:	60bb      	str	r3, [r7, #8]
 8000352:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000354:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000356:	699b      	ldr	r3, [r3, #24]
 8000358:	4a2a      	ldr	r2, [pc, #168]	; (8000404 <MX_GPIO_Init+0xf4>)
 800035a:	f043 0304 	orr.w	r3, r3, #4
 800035e:	6193      	str	r3, [r2, #24]
 8000360:	4b28      	ldr	r3, [pc, #160]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	607b      	str	r3, [r7, #4]
 800036a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b25      	ldr	r3, [pc, #148]	; (8000404 <MX_GPIO_Init+0xf4>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a24      	ldr	r2, [pc, #144]	; (8000404 <MX_GPIO_Init+0xf4>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b22      	ldr	r3, [pc, #136]	; (8000404 <MX_GPIO_Init+0xf4>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	603b      	str	r3, [r7, #0]
 8000382:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2120      	movs	r1, #32
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <MX_GPIO_Init+0xf8>)
 800038a:	f000 fd43 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2107      	movs	r1, #7
 8000392:	481e      	ldr	r0, [pc, #120]	; (800040c <MX_GPIO_Init+0xfc>)
 8000394:	f000 fd3e 	bl	8000e14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800039e:	4b1c      	ldr	r3, [pc, #112]	; (8000410 <MX_GPIO_Init+0x100>)
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	4819      	ldr	r0, [pc, #100]	; (8000414 <MX_GPIO_Init+0x104>)
 80003ae:	f000 fbad 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003b2:	2320      	movs	r3, #32
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b6:	2301      	movs	r3, #1
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003be:	2302      	movs	r3, #2
 80003c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80003c2:	f107 0310 	add.w	r3, r7, #16
 80003c6:	4619      	mov	r1, r3
 80003c8:	480f      	ldr	r0, [pc, #60]	; (8000408 <MX_GPIO_Init+0xf8>)
 80003ca:	f000 fb9f 	bl	8000b0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80003ce:	2307      	movs	r3, #7
 80003d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d2:	2301      	movs	r3, #1
 80003d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003da:	2302      	movs	r3, #2
 80003dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	4619      	mov	r1, r3
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <MX_GPIO_Init+0xfc>)
 80003e6:	f000 fb91 	bl	8000b0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2105      	movs	r1, #5
 80003ee:	2028      	movs	r0, #40	; 0x28
 80003f0:	f000 faeb 	bl	80009ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003f4:	2028      	movs	r0, #40	; 0x28
 80003f6:	f000 fb04 	bl	8000a02 <HAL_NVIC_EnableIRQ>

}
 80003fa:	bf00      	nop
 80003fc:	3720      	adds	r7, #32
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000
 8000408:	40010800 	.word	0x40010800
 800040c:	40010c00 	.word	0x40010c00
 8000410:	10110000 	.word	0x10110000
 8000414:	40011000 	.word	0x40011000

08000418 <USART_POLL_WriteString>:

void USART_POLL_WriteString(const char *s)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)s, 1, 1000);
 8000420:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000424:	2201      	movs	r2, #1
 8000426:	6879      	ldr	r1, [r7, #4]
 8000428:	4803      	ldr	r0, [pc, #12]	; (8000438 <USART_POLL_WriteString+0x20>)
 800042a:	f001 fc0e 	bl	8001c4a <HAL_UART_Transmit>
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20001d34 	.word	0x20001d34

0800043c <USART_Process>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_USART_Process */
void USART_Process(void *argument)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 1, 100) == HAL_OK)
 8000444:	2364      	movs	r3, #100	; 0x64
 8000446:	2201      	movs	r2, #1
 8000448:	4905      	ldr	r1, [pc, #20]	; (8000460 <USART_Process+0x24>)
 800044a:	4806      	ldr	r0, [pc, #24]	; (8000464 <USART_Process+0x28>)
 800044c:	f001 fc8f 	bl	8001d6e <HAL_UART_Receive>
 8000450:	4603      	mov	r3, r0
 8000452:	2b00      	cmp	r3, #0
 8000454:	d1f6      	bne.n	8000444 <USART_Process+0x8>
    {
      USART_POLL_WriteString(RingBufferData_Rx);
 8000456:	4802      	ldr	r0, [pc, #8]	; (8000460 <USART_Process+0x24>)
 8000458:	f7ff ffde 	bl	8000418 <USART_POLL_WriteString>
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 1, 100) == HAL_OK)
 800045c:	e7f2      	b.n	8000444 <USART_Process+0x8>
 800045e:	bf00      	nop
 8000460:	2000002c 	.word	0x2000002c
 8000464:	20001d34 	.word	0x20001d34

08000468 <GPIO_Process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPIO_Process */
void GPIO_Process(void *argument)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b084      	sub	sp, #16
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_Process */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2102      	movs	r1, #2
 8000474:	481d      	ldr	r0, [pc, #116]	; (80004ec <GPIO_Process+0x84>)
 8000476:	f000 fccd 	bl	8000e14 <HAL_GPIO_WritePin>
    for (int i=0 ; i < 100; i++)
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	e012      	b.n	80004a6 <GPIO_Process+0x3e>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2101      	movs	r1, #1
 8000484:	4819      	ldr	r0, [pc, #100]	; (80004ec <GPIO_Process+0x84>)
 8000486:	f000 fcc5 	bl	8000e14 <HAL_GPIO_WritePin>
      vTaskDelay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f003 f888 	bl	80035a0 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2101      	movs	r1, #1
 8000494:	4815      	ldr	r0, [pc, #84]	; (80004ec <GPIO_Process+0x84>)
 8000496:	f000 fcbd 	bl	8000e14 <HAL_GPIO_WritePin>
      vTaskDelay(10);
 800049a:	200a      	movs	r0, #10
 800049c:	f003 f880 	bl	80035a0 <vTaskDelay>
    for (int i=0 ; i < 100; i++)
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	3301      	adds	r3, #1
 80004a4:	60fb      	str	r3, [r7, #12]
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	2b63      	cmp	r3, #99	; 0x63
 80004aa:	dde9      	ble.n	8000480 <GPIO_Process+0x18>
    }
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2102      	movs	r1, #2
 80004b0:	480e      	ldr	r0, [pc, #56]	; (80004ec <GPIO_Process+0x84>)
 80004b2:	f000 fcaf 	bl	8000e14 <HAL_GPIO_WritePin>
    for (int i=0 ; i < 100; i++)
 80004b6:	2300      	movs	r3, #0
 80004b8:	60bb      	str	r3, [r7, #8]
 80004ba:	e012      	b.n	80004e2 <GPIO_Process+0x7a>
    {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004bc:	2201      	movs	r2, #1
 80004be:	2101      	movs	r1, #1
 80004c0:	480a      	ldr	r0, [pc, #40]	; (80004ec <GPIO_Process+0x84>)
 80004c2:	f000 fca7 	bl	8000e14 <HAL_GPIO_WritePin>
      vTaskDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f003 f86a 	bl	80035a0 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004cc:	2200      	movs	r2, #0
 80004ce:	2101      	movs	r1, #1
 80004d0:	4806      	ldr	r0, [pc, #24]	; (80004ec <GPIO_Process+0x84>)
 80004d2:	f000 fc9f 	bl	8000e14 <HAL_GPIO_WritePin>
      vTaskDelay(10);
 80004d6:	200a      	movs	r0, #10
 80004d8:	f003 f862 	bl	80035a0 <vTaskDelay>
    for (int i=0 ; i < 100; i++)
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	3301      	adds	r3, #1
 80004e0:	60bb      	str	r3, [r7, #8]
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	2b63      	cmp	r3, #99	; 0x63
 80004e6:	dde9      	ble.n	80004bc <GPIO_Process+0x54>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 80004e8:	e7c2      	b.n	8000470 <GPIO_Process+0x8>
 80004ea:	bf00      	nop
 80004ec:	40010c00 	.word	0x40010c00

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 f991 	bl	8000828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40000800 	.word	0x40000800

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000518:	b672      	cpsid	i
}
 800051a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800051c:	e7fe      	b.n	800051c <Error_Handler+0x8>
	...

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <HAL_MspInit+0x68>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x68>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <HAL_MspInit+0x68>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x68>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	210f      	movs	r1, #15
 800055a:	f06f 0001 	mvn.w	r0, #1
 800055e:	f000 fa34 	bl	80009ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_MspInit+0x6c>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_MspInit+0x6c>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010000 	.word	0x40010000

08000590 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08a      	sub	sp, #40	; 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000598:	f107 0318 	add.w	r3, r7, #24
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	4a35      	ldr	r2, [pc, #212]	; (8000680 <HAL_UART_MspInit+0xf0>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d13a      	bne.n	8000626 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005b0:	4b34      	ldr	r3, [pc, #208]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a33      	ldr	r2, [pc, #204]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b31      	ldr	r3, [pc, #196]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c8:	4b2e      	ldr	r3, [pc, #184]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a2d      	ldr	r2, [pc, #180]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005ce:	f043 0304 	orr.w	r3, r3, #4
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b2b      	ldr	r3, [pc, #172]	; (8000684 <HAL_UART_MspInit+0xf4>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0304 	and.w	r3, r3, #4
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ee:	f107 0318 	add.w	r3, r7, #24
 80005f2:	4619      	mov	r1, r3
 80005f4:	4824      	ldr	r0, [pc, #144]	; (8000688 <HAL_UART_MspInit+0xf8>)
 80005f6:	f000 fa89 	bl	8000b0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000600:	2300      	movs	r3, #0
 8000602:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000604:	2300      	movs	r3, #0
 8000606:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f107 0318 	add.w	r3, r7, #24
 800060c:	4619      	mov	r1, r3
 800060e:	481e      	ldr	r0, [pc, #120]	; (8000688 <HAL_UART_MspInit+0xf8>)
 8000610:	f000 fa7c 	bl	8000b0c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2105      	movs	r1, #5
 8000618:	2025      	movs	r0, #37	; 0x25
 800061a:	f000 f9d6 	bl	80009ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800061e:	2025      	movs	r0, #37	; 0x25
 8000620:	f000 f9ef 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000624:	e028      	b.n	8000678 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a18      	ldr	r2, [pc, #96]	; (800068c <HAL_UART_MspInit+0xfc>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d123      	bne.n	8000678 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000630:	4b14      	ldr	r3, [pc, #80]	; (8000684 <HAL_UART_MspInit+0xf4>)
 8000632:	69db      	ldr	r3, [r3, #28]
 8000634:	4a13      	ldr	r2, [pc, #76]	; (8000684 <HAL_UART_MspInit+0xf4>)
 8000636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800063a:	61d3      	str	r3, [r2, #28]
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <HAL_UART_MspInit+0xf4>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <HAL_UART_MspInit+0xf4>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <HAL_UART_MspInit+0xf4>)
 800064e:	f043 0304 	orr.w	r3, r3, #4
 8000652:	6193      	str	r3, [r2, #24]
 8000654:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <HAL_UART_MspInit+0xf4>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f003 0304 	and.w	r3, r3, #4
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000660:	230c      	movs	r3, #12
 8000662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000664:	2302      	movs	r3, #2
 8000666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2302      	movs	r3, #2
 800066a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 0318 	add.w	r3, r7, #24
 8000670:	4619      	mov	r1, r3
 8000672:	4805      	ldr	r0, [pc, #20]	; (8000688 <HAL_UART_MspInit+0xf8>)
 8000674:	f000 fa4a 	bl	8000b0c <HAL_GPIO_Init>
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	; 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40013800 	.word	0x40013800
 8000684:	40021000 	.word	0x40021000
 8000688:	40010800 	.word	0x40010800
 800068c:	40004400 	.word	0x40004400

08000690 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000698:	2300      	movs	r3, #0
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	201e      	movs	r0, #30
 80006a6:	f000 f990 	bl	80009ca <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80006aa:	201e      	movs	r0, #30
 80006ac:	f000 f9a9 	bl	8000a02 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <HAL_InitTick+0xa0>)
 80006b2:	69db      	ldr	r3, [r3, #28]
 80006b4:	4a1e      	ldr	r2, [pc, #120]	; (8000730 <HAL_InitTick+0xa0>)
 80006b6:	f043 0304 	orr.w	r3, r3, #4
 80006ba:	61d3      	str	r3, [r2, #28]
 80006bc:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <HAL_InitTick+0xa0>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	f003 0304 	and.w	r3, r3, #4
 80006c4:	60fb      	str	r3, [r7, #12]
 80006c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80006c8:	f107 0210 	add.w	r2, r7, #16
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	4611      	mov	r1, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 ffd4 	bl	8001680 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80006d8:	f000 ffaa 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 80006dc:	4603      	mov	r3, r0
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80006e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e4:	4a13      	ldr	r2, [pc, #76]	; (8000734 <HAL_InitTick+0xa4>)
 80006e6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ea:	0c9b      	lsrs	r3, r3, #18
 80006ec:	3b01      	subs	r3, #1
 80006ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <HAL_InitTick+0xa8>)
 80006f2:	4a12      	ldr	r2, [pc, #72]	; (800073c <HAL_InitTick+0xac>)
 80006f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <HAL_InitTick+0xa8>)
 80006f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fc:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <HAL_InitTick+0xa8>)
 8000700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000702:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <HAL_InitTick+0xa8>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070a:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <HAL_InitTick+0xa8>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000710:	4809      	ldr	r0, [pc, #36]	; (8000738 <HAL_InitTick+0xa8>)
 8000712:	f001 f803 	bl	800171c <HAL_TIM_Base_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d104      	bne.n	8000726 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800071c:	4806      	ldr	r0, [pc, #24]	; (8000738 <HAL_InitTick+0xa8>)
 800071e:	f001 f855 	bl	80017cc <HAL_TIM_Base_Start_IT>
 8000722:	4603      	mov	r3, r0
 8000724:	e000      	b.n	8000728 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000726:	2301      	movs	r3, #1
}
 8000728:	4618      	mov	r0, r3
 800072a:	3730      	adds	r7, #48	; 0x30
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40021000 	.word	0x40021000
 8000734:	431bde83 	.word	0x431bde83
 8000738:	20001dbc 	.word	0x20001dbc
 800073c:	40000800 	.word	0x40000800

08000740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000744:	e7fe      	b.n	8000744 <NMI_Handler+0x4>

08000746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000746:	b480      	push	{r7}
 8000748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074a:	e7fe      	b.n	800074a <HardFault_Handler+0x4>

0800074c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000750:	e7fe      	b.n	8000750 <MemManage_Handler+0x4>

08000752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000752:	b480      	push	{r7}
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000756:	e7fe      	b.n	8000756 <BusFault_Handler+0x4>

08000758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075c:	e7fe      	b.n	800075c <UsageFault_Handler+0x4>

0800075e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075e:	b480      	push	{r7}
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
	...

0800076c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <TIM4_IRQHandler+0x10>)
 8000772:	f001 f87d 	bl	8001870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20001dbc 	.word	0x20001dbc

08000780 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USART1_IRQHandler+0x10>)
 8000786:	f001 fb91 	bl	8001eac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20001d34 	.word	0x20001d34

08000794 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000798:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800079c:	f000 fb52 	bl	8000e44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007b0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007b2:	e003      	b.n	80007bc <LoopCopyDataInit>

080007b4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007b4:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007b6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007b8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007ba:	3104      	adds	r1, #4

080007bc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007bc:	480a      	ldr	r0, [pc, #40]	; (80007e8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007c0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007c2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007c4:	d3f6      	bcc.n	80007b4 <CopyDataInit>
  ldr r2, =_sbss
 80007c6:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007c8:	e002      	b.n	80007d0 <LoopFillZerobss>

080007ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ca:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007cc:	f842 3b04 	str.w	r3, [r2], #4

080007d0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007d2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007d4:	d3f9      	bcc.n	80007ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007d6:	f7ff ffe5 	bl	80007a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007da:	f004 fb1f 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fcb7 	bl	8000150 <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r3, =_sidata
 80007e4:	08004f50 	.word	0x08004f50
  ldr r0, =_sdata
 80007e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007ec:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80007f0:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80007f4:	20001e48 	.word	0x20001e48

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f8d1 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	2000      	movs	r0, #0
 8000814:	f7ff ff3c 	bl	8000690 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe82 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800082c:	4b05      	ldr	r3, [pc, #20]	; (8000844 <HAL_IncTick+0x1c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <HAL_IncTick+0x20>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4413      	add	r3, r2
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <HAL_IncTick+0x20>)
 800083a:	6013      	str	r3, [r2, #0]
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	20000008 	.word	0x20000008
 8000848:	20001e04 	.word	0x20001e04

0800084c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return uwTick;
 8000850:	4b02      	ldr	r3, [pc, #8]	; (800085c <HAL_GetTick+0x10>)
 8000852:	681b      	ldr	r3, [r3, #0]
}
 8000854:	4618      	mov	r0, r3
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20001e04 	.word	0x20001e04

08000860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000860:	b480      	push	{r7}
 8000862:	b085      	sub	sp, #20
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f003 0307 	and.w	r3, r3, #7
 800086e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000872:	68db      	ldr	r3, [r3, #12]
 8000874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000876:	68ba      	ldr	r2, [r7, #8]
 8000878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800087c:	4013      	ands	r3, r2
 800087e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800088c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000892:	4a04      	ldr	r2, [pc, #16]	; (80008a4 <__NVIC_SetPriorityGrouping+0x44>)
 8000894:	68bb      	ldr	r3, [r7, #8]
 8000896:	60d3      	str	r3, [r2, #12]
}
 8000898:	bf00      	nop
 800089a:	3714      	adds	r7, #20
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008ac:	4b04      	ldr	r3, [pc, #16]	; (80008c0 <__NVIC_GetPriorityGrouping+0x18>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	0a1b      	lsrs	r3, r3, #8
 80008b2:	f003 0307 	and.w	r3, r3, #7
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bc80      	pop	{r7}
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000ed00 	.word	0xe000ed00

080008c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	4603      	mov	r3, r0
 80008cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	db0b      	blt.n	80008ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	f003 021f 	and.w	r2, r3, #31
 80008dc:	4906      	ldr	r1, [pc, #24]	; (80008f8 <__NVIC_EnableIRQ+0x34>)
 80008de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e2:	095b      	lsrs	r3, r3, #5
 80008e4:	2001      	movs	r0, #1
 80008e6:	fa00 f202 	lsl.w	r2, r0, r2
 80008ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008ee:	bf00      	nop
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bc80      	pop	{r7}
 80008f6:	4770      	bx	lr
 80008f8:	e000e100 	.word	0xe000e100

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff ff4f 	bl	8000860 <__NVIC_SetPriorityGrouping>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	4603      	mov	r3, r0
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009dc:	f7ff ff64 	bl	80008a8 <__NVIC_GetPriorityGrouping>
 80009e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff ffb2 	bl	8000950 <NVIC_EncodePriority>
 80009ec:	4602      	mov	r2, r0
 80009ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff81 	bl	80008fc <__NVIC_SetPriority>
}
 80009fa:	bf00      	nop
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	b082      	sub	sp, #8
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	4603      	mov	r3, r0
 8000a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff ff57 	bl	80008c4 <__NVIC_EnableIRQ>
}
 8000a16:	bf00      	nop
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a32:	2b02      	cmp	r3, #2
 8000a34:	d005      	beq.n	8000a42 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2204      	movs	r2, #4
 8000a3a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	e051      	b.n	8000ae6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f022 020e 	bic.w	r2, r2, #14
 8000a50:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f022 0201 	bic.w	r2, r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <HAL_DMA_Abort_IT+0xd0>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d029      	beq.n	8000ac0 <HAL_DMA_Abort_IT+0xa0>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a20      	ldr	r2, [pc, #128]	; (8000af4 <HAL_DMA_Abort_IT+0xd4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d022      	beq.n	8000abc <HAL_DMA_Abort_IT+0x9c>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_DMA_Abort_IT+0xd8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d01a      	beq.n	8000ab6 <HAL_DMA_Abort_IT+0x96>
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a1d      	ldr	r2, [pc, #116]	; (8000afc <HAL_DMA_Abort_IT+0xdc>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d012      	beq.n	8000ab0 <HAL_DMA_Abort_IT+0x90>
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_DMA_Abort_IT+0xe0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d00a      	beq.n	8000aaa <HAL_DMA_Abort_IT+0x8a>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_DMA_Abort_IT+0xe4>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d102      	bne.n	8000aa4 <HAL_DMA_Abort_IT+0x84>
 8000a9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000aa2:	e00e      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000aa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aa8:	e00b      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000aaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aae:	e008      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ab0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab4:	e005      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aba:	e002      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000abc:	2310      	movs	r3, #16
 8000abe:	e000      	b.n	8000ac2 <HAL_DMA_Abort_IT+0xa2>
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	4a11      	ldr	r2, [pc, #68]	; (8000b08 <HAL_DMA_Abort_IT+0xe8>)
 8000ac4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d003      	beq.n	8000ae6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	4798      	blx	r3
    } 
  }
  return status;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40020008 	.word	0x40020008
 8000af4:	4002001c 	.word	0x4002001c
 8000af8:	40020030 	.word	0x40020030
 8000afc:	40020044 	.word	0x40020044
 8000b00:	40020058 	.word	0x40020058
 8000b04:	4002006c 	.word	0x4002006c
 8000b08:	40020000 	.word	0x40020000

08000b0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b08b      	sub	sp, #44	; 0x2c
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b1e:	e169      	b.n	8000df4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b20:	2201      	movs	r2, #1
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	4013      	ands	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	f040 8158 	bne.w	8000dee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4a9a      	ldr	r2, [pc, #616]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d05e      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b48:	4a98      	ldr	r2, [pc, #608]	; (8000dac <HAL_GPIO_Init+0x2a0>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d875      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b4e:	4a98      	ldr	r2, [pc, #608]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d058      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b54:	4a96      	ldr	r2, [pc, #600]	; (8000db0 <HAL_GPIO_Init+0x2a4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d86f      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b5a:	4a96      	ldr	r2, [pc, #600]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d052      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b60:	4a94      	ldr	r2, [pc, #592]	; (8000db4 <HAL_GPIO_Init+0x2a8>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d869      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b66:	4a94      	ldr	r2, [pc, #592]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d04c      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b6c:	4a92      	ldr	r2, [pc, #584]	; (8000db8 <HAL_GPIO_Init+0x2ac>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d863      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b72:	4a92      	ldr	r2, [pc, #584]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b74:	4293      	cmp	r3, r2
 8000b76:	d046      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
 8000b78:	4a90      	ldr	r2, [pc, #576]	; (8000dbc <HAL_GPIO_Init+0x2b0>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d85d      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b7e:	2b12      	cmp	r3, #18
 8000b80:	d82a      	bhi.n	8000bd8 <HAL_GPIO_Init+0xcc>
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d859      	bhi.n	8000c3a <HAL_GPIO_Init+0x12e>
 8000b86:	a201      	add	r2, pc, #4	; (adr r2, 8000b8c <HAL_GPIO_Init+0x80>)
 8000b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b8c:	08000c07 	.word	0x08000c07
 8000b90:	08000be1 	.word	0x08000be1
 8000b94:	08000bf3 	.word	0x08000bf3
 8000b98:	08000c35 	.word	0x08000c35
 8000b9c:	08000c3b 	.word	0x08000c3b
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c3b 	.word	0x08000c3b
 8000ba8:	08000c3b 	.word	0x08000c3b
 8000bac:	08000c3b 	.word	0x08000c3b
 8000bb0:	08000c3b 	.word	0x08000c3b
 8000bb4:	08000c3b 	.word	0x08000c3b
 8000bb8:	08000c3b 	.word	0x08000c3b
 8000bbc:	08000c3b 	.word	0x08000c3b
 8000bc0:	08000c3b 	.word	0x08000c3b
 8000bc4:	08000c3b 	.word	0x08000c3b
 8000bc8:	08000c3b 	.word	0x08000c3b
 8000bcc:	08000c3b 	.word	0x08000c3b
 8000bd0:	08000be9 	.word	0x08000be9
 8000bd4:	08000bfd 	.word	0x08000bfd
 8000bd8:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <HAL_GPIO_Init+0x2b4>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d013      	beq.n	8000c06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bde:	e02c      	b.n	8000c3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	623b      	str	r3, [r7, #32]
          break;
 8000be6:	e029      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	3304      	adds	r3, #4
 8000bee:	623b      	str	r3, [r7, #32]
          break;
 8000bf0:	e024      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	623b      	str	r3, [r7, #32]
          break;
 8000bfa:	e01f      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	330c      	adds	r3, #12
 8000c02:	623b      	str	r3, [r7, #32]
          break;
 8000c04:	e01a      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c0e:	2304      	movs	r3, #4
 8000c10:	623b      	str	r3, [r7, #32]
          break;
 8000c12:	e013      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d105      	bne.n	8000c28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	611a      	str	r2, [r3, #16]
          break;
 8000c26:	e009      	b.n	8000c3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	69fa      	ldr	r2, [r7, #28]
 8000c30:	615a      	str	r2, [r3, #20]
          break;
 8000c32:	e003      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
          break;
 8000c38:	e000      	b.n	8000c3c <HAL_GPIO_Init+0x130>
          break;
 8000c3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	2bff      	cmp	r3, #255	; 0xff
 8000c40:	d801      	bhi.n	8000c46 <HAL_GPIO_Init+0x13a>
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	e001      	b.n	8000c4a <HAL_GPIO_Init+0x13e>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2bff      	cmp	r3, #255	; 0xff
 8000c50:	d802      	bhi.n	8000c58 <HAL_GPIO_Init+0x14c>
 8000c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	e002      	b.n	8000c5e <HAL_GPIO_Init+0x152>
 8000c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5a:	3b08      	subs	r3, #8
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	210f      	movs	r1, #15
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	401a      	ands	r2, r3
 8000c70:	6a39      	ldr	r1, [r7, #32]
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	431a      	orrs	r2, r3
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80b1 	beq.w	8000dee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c8c:	4b4d      	ldr	r3, [pc, #308]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	4a4c      	ldr	r2, [pc, #304]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c92:	f043 0301 	orr.w	r3, r3, #1
 8000c96:	6193      	str	r3, [r2, #24]
 8000c98:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_GPIO_Init+0x2b8>)
 8000c9a:	699b      	ldr	r3, [r3, #24]
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ca4:	4a48      	ldr	r2, [pc, #288]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	220f      	movs	r2, #15
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a40      	ldr	r2, [pc, #256]	; (8000dcc <HAL_GPIO_Init+0x2c0>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d013      	beq.n	8000cf8 <HAL_GPIO_Init+0x1ec>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3f      	ldr	r2, [pc, #252]	; (8000dd0 <HAL_GPIO_Init+0x2c4>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d00d      	beq.n	8000cf4 <HAL_GPIO_Init+0x1e8>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <HAL_GPIO_Init+0x2c8>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x1e4>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a3d      	ldr	r2, [pc, #244]	; (8000dd8 <HAL_GPIO_Init+0x2cc>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d101      	bne.n	8000cec <HAL_GPIO_Init+0x1e0>
 8000ce8:	2303      	movs	r3, #3
 8000cea:	e006      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cec:	2304      	movs	r3, #4
 8000cee:	e004      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	e002      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <HAL_GPIO_Init+0x1ee>
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cfc:	f002 0203 	and.w	r2, r2, #3
 8000d00:	0092      	lsls	r2, r2, #2
 8000d02:	4093      	lsls	r3, r2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d0a:	492f      	ldr	r1, [pc, #188]	; (8000dc8 <HAL_GPIO_Init+0x2bc>)
 8000d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0e:	089b      	lsrs	r3, r3, #2
 8000d10:	3302      	adds	r3, #2
 8000d12:	68fa      	ldr	r2, [r7, #12]
 8000d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d006      	beq.n	8000d32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	492c      	ldr	r1, [pc, #176]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	600b      	str	r3, [r1, #0]
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	69bb      	ldr	r3, [r7, #24]
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	4928      	ldr	r1, [pc, #160]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d006      	beq.n	8000d5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	604b      	str	r3, [r1, #4]
 8000d58:	e006      	b.n	8000d68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	69bb      	ldr	r3, [r7, #24]
 8000d60:	43db      	mvns	r3, r3
 8000d62:	491e      	ldr	r1, [pc, #120]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d64:	4013      	ands	r3, r2
 8000d66:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d006      	beq.n	8000d82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	4918      	ldr	r1, [pc, #96]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	608b      	str	r3, [r1, #8]
 8000d80:	e006      	b.n	8000d90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d82:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	69bb      	ldr	r3, [r7, #24]
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	4914      	ldr	r1, [pc, #80]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d021      	beq.n	8000de0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <HAL_GPIO_Init+0x2d0>)
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	60cb      	str	r3, [r1, #12]
 8000da8:	e021      	b.n	8000dee <HAL_GPIO_Init+0x2e2>
 8000daa:	bf00      	nop
 8000dac:	10320000 	.word	0x10320000
 8000db0:	10310000 	.word	0x10310000
 8000db4:	10220000 	.word	0x10220000
 8000db8:	10210000 	.word	0x10210000
 8000dbc:	10120000 	.word	0x10120000
 8000dc0:	10110000 	.word	0x10110000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	40010000 	.word	0x40010000
 8000dcc:	40010800 	.word	0x40010800
 8000dd0:	40010c00 	.word	0x40010c00
 8000dd4:	40011000 	.word	0x40011000
 8000dd8:	40011400 	.word	0x40011400
 8000ddc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de0:	4b0b      	ldr	r3, [pc, #44]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	4909      	ldr	r1, [pc, #36]	; (8000e10 <HAL_GPIO_Init+0x304>)
 8000dea:	4013      	ands	r3, r2
 8000dec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df0:	3301      	adds	r3, #1
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f47f ae8e 	bne.w	8000b20 <HAL_GPIO_Init+0x14>
  }
}
 8000e04:	bf00      	nop
 8000e06:	bf00      	nop
 8000e08:	372c      	adds	r7, #44	; 0x2c
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	807b      	strh	r3, [r7, #2]
 8000e20:	4613      	mov	r3, r2
 8000e22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e24:	787b      	ldrb	r3, [r7, #1]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d003      	beq.n	8000e32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e2a:	887a      	ldrh	r2, [r7, #2]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e30:	e003      	b.n	8000e3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e32:	887b      	ldrh	r3, [r7, #2]
 8000e34:	041a      	lsls	r2, r3, #16
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e50:	695a      	ldr	r2, [r3, #20]
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	4013      	ands	r3, r2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d006      	beq.n	8000e68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e5a:	4a05      	ldr	r2, [pc, #20]	; (8000e70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f806 	bl	8000e74 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40010400 	.word	0x40010400

08000e74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr

08000e88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b086      	sub	sp, #24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d101      	bne.n	8000e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e26c      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	f000 8087 	beq.w	8000fb6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea8:	4b92      	ldr	r3, [pc, #584]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 030c 	and.w	r3, r3, #12
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d00c      	beq.n	8000ece <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eb4:	4b8f      	ldr	r3, [pc, #572]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	2b08      	cmp	r3, #8
 8000ebe:	d112      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
 8000ec0:	4b8c      	ldr	r3, [pc, #560]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ecc:	d10b      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ece:	4b89      	ldr	r3, [pc, #548]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d06c      	beq.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d168      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e246      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eee:	d106      	bne.n	8000efe <HAL_RCC_OscConfig+0x76>
 8000ef0:	4b80      	ldr	r3, [pc, #512]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a7f      	ldr	r2, [pc, #508]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	e02e      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d10c      	bne.n	8000f20 <HAL_RCC_OscConfig+0x98>
 8000f06:	4b7b      	ldr	r3, [pc, #492]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a7a      	ldr	r2, [pc, #488]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b78      	ldr	r3, [pc, #480]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a77      	ldr	r2, [pc, #476]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	e01d      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f28:	d10c      	bne.n	8000f44 <HAL_RCC_OscConfig+0xbc>
 8000f2a:	4b72      	ldr	r3, [pc, #456]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a71      	ldr	r2, [pc, #452]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f34:	6013      	str	r3, [r2, #0]
 8000f36:	4b6f      	ldr	r3, [pc, #444]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a6e      	ldr	r2, [pc, #440]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f40:	6013      	str	r3, [r2, #0]
 8000f42:	e00b      	b.n	8000f5c <HAL_RCC_OscConfig+0xd4>
 8000f44:	4b6b      	ldr	r3, [pc, #428]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a6a      	ldr	r2, [pc, #424]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f4e:	6013      	str	r3, [r2, #0]
 8000f50:	4b68      	ldr	r3, [pc, #416]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a67      	ldr	r2, [pc, #412]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f5a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f64:	f7ff fc72 	bl	800084c <HAL_GetTick>
 8000f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	e008      	b.n	8000f7e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f6c:	f7ff fc6e 	bl	800084c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	2b64      	cmp	r3, #100	; 0x64
 8000f78:	d901      	bls.n	8000f7e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	e1fa      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7e:	4b5d      	ldr	r3, [pc, #372]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f0      	beq.n	8000f6c <HAL_RCC_OscConfig+0xe4>
 8000f8a:	e014      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f8c:	f7ff fc5e 	bl	800084c <HAL_GetTick>
 8000f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f92:	e008      	b.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f94:	f7ff fc5a 	bl	800084c <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	2b64      	cmp	r3, #100	; 0x64
 8000fa0:	d901      	bls.n	8000fa6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	e1e6      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa6:	4b53      	ldr	r3, [pc, #332]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d1f0      	bne.n	8000f94 <HAL_RCC_OscConfig+0x10c>
 8000fb2:	e000      	b.n	8000fb6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d063      	beq.n	800108a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 030c 	and.w	r3, r3, #12
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d00b      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fce:	4b49      	ldr	r3, [pc, #292]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 030c 	and.w	r3, r3, #12
 8000fd6:	2b08      	cmp	r3, #8
 8000fd8:	d11c      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
 8000fda:	4b46      	ldr	r3, [pc, #280]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe6:	4b43      	ldr	r3, [pc, #268]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d001      	beq.n	8000ffe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e1ba      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	00db      	lsls	r3, r3, #3
 800100c:	4939      	ldr	r1, [pc, #228]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001012:	e03a      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	691b      	ldr	r3, [r3, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d020      	beq.n	800105e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800101c:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 800101e:	2201      	movs	r2, #1
 8001020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001022:	f7ff fc13 	bl	800084c <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800102a:	f7ff fc0f 	bl	800084c <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e19b      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0f0      	beq.n	800102a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001048:	4b2a      	ldr	r3, [pc, #168]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	695b      	ldr	r3, [r3, #20]
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001058:	4313      	orrs	r3, r2
 800105a:	600b      	str	r3, [r1, #0]
 800105c:	e015      	b.n	800108a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_RCC_OscConfig+0x270>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fbf2 	bl	800084c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800106c:	f7ff fbee 	bl	800084c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e17a      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800107e:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0308 	and.w	r3, r3, #8
 8001092:	2b00      	cmp	r3, #0
 8001094:	d03a      	beq.n	800110c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d019      	beq.n	80010d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a4:	f7ff fbd2 	bl	800084c <HAL_GetTick>
 80010a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010ac:	f7ff fbce 	bl	800084c <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e15a      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010be:	4b0d      	ldr	r3, [pc, #52]	; (80010f4 <HAL_RCC_OscConfig+0x26c>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d0f0      	beq.n	80010ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ca:	2001      	movs	r0, #1
 80010cc:	f000 fb08 	bl	80016e0 <RCC_Delay>
 80010d0:	e01c      	b.n	800110c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_RCC_OscConfig+0x274>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010d8:	f7ff fbb8 	bl	800084c <HAL_GetTick>
 80010dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010de:	e00f      	b.n	8001100 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010e0:	f7ff fbb4 	bl	800084c <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d908      	bls.n	8001100 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e140      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
 80010f2:	bf00      	nop
 80010f4:	40021000 	.word	0x40021000
 80010f8:	42420000 	.word	0x42420000
 80010fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001100:	4b9e      	ldr	r3, [pc, #632]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1e9      	bne.n	80010e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0304 	and.w	r3, r3, #4
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 80a6 	beq.w	8001266 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800111e:	4b97      	ldr	r3, [pc, #604]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d10d      	bne.n	8001146 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800112a:	4b94      	ldr	r3, [pc, #592]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	4a93      	ldr	r2, [pc, #588]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001134:	61d3      	str	r3, [r2, #28]
 8001136:	4b91      	ldr	r3, [pc, #580]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001142:	2301      	movs	r3, #1
 8001144:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001146:	4b8e      	ldr	r3, [pc, #568]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800114e:	2b00      	cmp	r3, #0
 8001150:	d118      	bne.n	8001184 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001152:	4b8b      	ldr	r3, [pc, #556]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a8a      	ldr	r2, [pc, #552]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 8001158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb75 	bl	800084c <HAL_GetTick>
 8001162:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001164:	e008      	b.n	8001178 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001166:	f7ff fb71 	bl	800084c <HAL_GetTick>
 800116a:	4602      	mov	r2, r0
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	1ad3      	subs	r3, r2, r3
 8001170:	2b64      	cmp	r3, #100	; 0x64
 8001172:	d901      	bls.n	8001178 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001174:	2303      	movs	r3, #3
 8001176:	e0fd      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4b81      	ldr	r3, [pc, #516]	; (8001380 <HAL_RCC_OscConfig+0x4f8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001180:	2b00      	cmp	r3, #0
 8001182:	d0f0      	beq.n	8001166 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d106      	bne.n	800119a <HAL_RCC_OscConfig+0x312>
 800118c:	4b7b      	ldr	r3, [pc, #492]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800118e:	6a1b      	ldr	r3, [r3, #32]
 8001190:	4a7a      	ldr	r2, [pc, #488]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6213      	str	r3, [r2, #32]
 8001198:	e02d      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d10c      	bne.n	80011bc <HAL_RCC_OscConfig+0x334>
 80011a2:	4b76      	ldr	r3, [pc, #472]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011a4:	6a1b      	ldr	r3, [r3, #32]
 80011a6:	4a75      	ldr	r2, [pc, #468]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011a8:	f023 0301 	bic.w	r3, r3, #1
 80011ac:	6213      	str	r3, [r2, #32]
 80011ae:	4b73      	ldr	r3, [pc, #460]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	4a72      	ldr	r2, [pc, #456]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011b4:	f023 0304 	bic.w	r3, r3, #4
 80011b8:	6213      	str	r3, [r2, #32]
 80011ba:	e01c      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b05      	cmp	r3, #5
 80011c2:	d10c      	bne.n	80011de <HAL_RCC_OscConfig+0x356>
 80011c4:	4b6d      	ldr	r3, [pc, #436]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	4a6c      	ldr	r2, [pc, #432]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6213      	str	r3, [r2, #32]
 80011d0:	4b6a      	ldr	r3, [pc, #424]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a69      	ldr	r2, [pc, #420]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	e00b      	b.n	80011f6 <HAL_RCC_OscConfig+0x36e>
 80011de:	4b67      	ldr	r3, [pc, #412]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a66      	ldr	r2, [pc, #408]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011e4:	f023 0301 	bic.w	r3, r3, #1
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	4b64      	ldr	r3, [pc, #400]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	4a63      	ldr	r2, [pc, #396]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	f023 0304 	bic.w	r3, r3, #4
 80011f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d015      	beq.n	800122a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011fe:	f7ff fb25 	bl	800084c <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001204:	e00a      	b.n	800121c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001206:	f7ff fb21 	bl	800084c <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	f241 3288 	movw	r2, #5000	; 0x1388
 8001214:	4293      	cmp	r3, r2
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e0ab      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800121c:	4b57      	ldr	r3, [pc, #348]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0ee      	beq.n	8001206 <HAL_RCC_OscConfig+0x37e>
 8001228:	e014      	b.n	8001254 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800122a:	f7ff fb0f 	bl	800084c <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001232:	f7ff fb0b 	bl	800084c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001240:	4293      	cmp	r3, r2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e095      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001248:	4b4c      	ldr	r3, [pc, #304]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800124a:	6a1b      	ldr	r3, [r3, #32]
 800124c:	f003 0302 	and.w	r3, r3, #2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1ee      	bne.n	8001232 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001254:	7dfb      	ldrb	r3, [r7, #23]
 8001256:	2b01      	cmp	r3, #1
 8001258:	d105      	bne.n	8001266 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800125a:	4b48      	ldr	r3, [pc, #288]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a47      	ldr	r2, [pc, #284]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8081 	beq.w	8001372 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001270:	4b42      	ldr	r3, [pc, #264]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 030c 	and.w	r3, r3, #12
 8001278:	2b08      	cmp	r3, #8
 800127a:	d061      	beq.n	8001340 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	2b02      	cmp	r3, #2
 8001282:	d146      	bne.n	8001312 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001284:	4b3f      	ldr	r3, [pc, #252]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128a:	f7ff fadf 	bl	800084c <HAL_GetTick>
 800128e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001290:	e008      	b.n	80012a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001292:	f7ff fadb 	bl	800084c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d901      	bls.n	80012a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012a0:	2303      	movs	r3, #3
 80012a2:	e067      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f0      	bne.n	8001292 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a1b      	ldr	r3, [r3, #32]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d108      	bne.n	80012cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012ba:	4b30      	ldr	r3, [pc, #192]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	492d      	ldr	r1, [pc, #180]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	4313      	orrs	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012cc:	4b2b      	ldr	r3, [pc, #172]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a19      	ldr	r1, [r3, #32]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012dc:	430b      	orrs	r3, r1
 80012de:	4927      	ldr	r1, [pc, #156]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012e4:	4b27      	ldr	r3, [pc, #156]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ea:	f7ff faaf 	bl	800084c <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012f2:	f7ff faab 	bl	800084c <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e037      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001304:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x46a>
 8001310:	e02f      	b.n	8001372 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b1c      	ldr	r3, [pc, #112]	; (8001384 <HAL_RCC_OscConfig+0x4fc>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fa98 	bl	800084c <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fa94 	bl	800084c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e020      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001332:	4b12      	ldr	r3, [pc, #72]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x498>
 800133e:	e018      	b.n	8001372 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69db      	ldr	r3, [r3, #28]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e013      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800134c:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_RCC_OscConfig+0x4f4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	429a      	cmp	r2, r3
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d001      	beq.n	8001372 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40021000 	.word	0x40021000
 8001380:	40007000 	.word	0x40007000
 8001384:	42420060 	.word	0x42420060

08001388 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e0d0      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800139c:	4b6a      	ldr	r3, [pc, #424]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d910      	bls.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b67      	ldr	r3, [pc, #412]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0207 	bic.w	r2, r3, #7
 80013b2:	4965      	ldr	r1, [pc, #404]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b63      	ldr	r3, [pc, #396]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e0b8      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d020      	beq.n	800141a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0304 	and.w	r3, r3, #4
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013e4:	4b59      	ldr	r3, [pc, #356]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a58      	ldr	r2, [pc, #352]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80013ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0308 	and.w	r3, r3, #8
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d005      	beq.n	8001408 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013fc:	4b53      	ldr	r3, [pc, #332]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	4a52      	ldr	r2, [pc, #328]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001406:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001408:	4b50      	ldr	r3, [pc, #320]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	494d      	ldr	r1, [pc, #308]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001416:	4313      	orrs	r3, r2
 8001418:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d040      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d107      	bne.n	800143e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142e:	4b47      	ldr	r3, [pc, #284]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d115      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e07f      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d107      	bne.n	8001456 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d109      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e073      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001456:	4b3d      	ldr	r3, [pc, #244]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e06b      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001466:	4b39      	ldr	r3, [pc, #228]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 0203 	bic.w	r2, r3, #3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	4936      	ldr	r1, [pc, #216]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001478:	f7ff f9e8 	bl	800084c <HAL_GetTick>
 800147c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800147e:	e00a      	b.n	8001496 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001480:	f7ff f9e4 	bl	800084c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e053      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f003 020c 	and.w	r2, r3, #12
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d1eb      	bne.n	8001480 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0307 	and.w	r3, r3, #7
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d210      	bcs.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f023 0207 	bic.w	r2, r3, #7
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	4b20      	ldr	r3, [pc, #128]	; (8001548 <HAL_RCC_ClockConfig+0x1c0>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	683a      	ldr	r2, [r7, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d001      	beq.n	80014d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e032      	b.n	800153e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0304 	and.w	r3, r3, #4
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d008      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	4916      	ldr	r1, [pc, #88]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001502:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	691b      	ldr	r3, [r3, #16]
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	490e      	ldr	r1, [pc, #56]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001516:	f000 f821 	bl	800155c <HAL_RCC_GetSysClockFreq>
 800151a:	4602      	mov	r2, r0
 800151c:	4b0b      	ldr	r3, [pc, #44]	; (800154c <HAL_RCC_ClockConfig+0x1c4>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	490a      	ldr	r1, [pc, #40]	; (8001550 <HAL_RCC_ClockConfig+0x1c8>)
 8001528:	5ccb      	ldrb	r3, [r1, r3]
 800152a:	fa22 f303 	lsr.w	r3, r2, r3
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <HAL_RCC_ClockConfig+0x1cc>)
 8001530:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <HAL_RCC_ClockConfig+0x1d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f8aa 	bl	8000690 <HAL_InitTick>

  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	3710      	adds	r7, #16
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40022000 	.word	0x40022000
 800154c:	40021000 	.word	0x40021000
 8001550:	08004f30 	.word	0x08004f30
 8001554:	20000000 	.word	0x20000000
 8001558:	20000004 	.word	0x20000004

0800155c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800155c:	b490      	push	{r4, r7}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001564:	1d3c      	adds	r4, r7, #4
 8001566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001568:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800156c:	f240 2301 	movw	r3, #513	; 0x201
 8001570:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f003 030c 	and.w	r3, r3, #12
 8001592:	2b04      	cmp	r3, #4
 8001594:	d002      	beq.n	800159c <HAL_RCC_GetSysClockFreq+0x40>
 8001596:	2b08      	cmp	r3, #8
 8001598:	d003      	beq.n	80015a2 <HAL_RCC_GetSysClockFreq+0x46>
 800159a:	e02d      	b.n	80015f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800159c:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 800159e:	623b      	str	r3, [r7, #32]
      break;
 80015a0:	e02d      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	0c9b      	lsrs	r3, r3, #18
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ae:	4413      	add	r3, r2
 80015b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d013      	beq.n	80015e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_RCC_GetSysClockFreq+0xb4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	0c5b      	lsrs	r3, r3, #17
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ce:	4413      	add	r3, r2
 80015d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4a0e      	ldr	r2, [pc, #56]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015da:	fb02 f203 	mul.w	r2, r2, r3
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
 80015e6:	e004      	b.n	80015f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	; (8001618 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015ec:	fb02 f303 	mul.w	r3, r2, r3
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80015f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f4:	623b      	str	r3, [r7, #32]
      break;
 80015f6:	e002      	b.n	80015fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015fa:	623b      	str	r3, [r7, #32]
      break;
 80015fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001600:	4618      	mov	r0, r3
 8001602:	3728      	adds	r7, #40	; 0x28
 8001604:	46bd      	mov	sp, r7
 8001606:	bc90      	pop	{r4, r7}
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	08004ec0 	.word	0x08004ec0
 8001610:	40021000 	.word	0x40021000
 8001614:	007a1200 	.word	0x007a1200
 8001618:	003d0900 	.word	0x003d0900

0800161c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <HAL_RCC_GetHCLKFreq+0x10>)
 8001622:	681b      	ldr	r3, [r3, #0]
}
 8001624:	4618      	mov	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000000 	.word	0x20000000

08001630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001634:	f7ff fff2 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001638:	4602      	mov	r2, r0
 800163a:	4b05      	ldr	r3, [pc, #20]	; (8001650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	0a1b      	lsrs	r3, r3, #8
 8001640:	f003 0307 	and.w	r3, r3, #7
 8001644:	4903      	ldr	r1, [pc, #12]	; (8001654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001646:	5ccb      	ldrb	r3, [r1, r3]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800164c:	4618      	mov	r0, r3
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	08004f40 	.word	0x08004f40

08001658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800165c:	f7ff ffde 	bl	800161c <HAL_RCC_GetHCLKFreq>
 8001660:	4602      	mov	r2, r0
 8001662:	4b05      	ldr	r3, [pc, #20]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	0adb      	lsrs	r3, r3, #11
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	4903      	ldr	r1, [pc, #12]	; (800167c <HAL_RCC_GetPCLK2Freq+0x24>)
 800166e:	5ccb      	ldrb	r3, [r1, r3]
 8001670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001674:	4618      	mov	r0, r3
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40021000 	.word	0x40021000
 800167c:	08004f40 	.word	0x08004f40

08001680 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	220f      	movs	r2, #15
 800168e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0203 	and.w	r2, r3, #3
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_RCC_GetClockConfig+0x58>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_RCC_GetClockConfig+0x5c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0207 	and.w	r2, r3, #7
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40022000 	.word	0x40022000

080016e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <RCC_Delay+0x34>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <RCC_Delay+0x38>)
 80016ee:	fba2 2303 	umull	r2, r3, r2, r3
 80016f2:	0a5b      	lsrs	r3, r3, #9
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	fb02 f303 	mul.w	r3, r2, r3
 80016fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016fc:	bf00      	nop
  }
  while (Delay --);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e5a      	subs	r2, r3, #1
 8001702:	60fa      	str	r2, [r7, #12]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f9      	bne.n	80016fc <RCC_Delay+0x1c>
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000000 	.word	0x20000000
 8001718:	10624dd3 	.word	0x10624dd3

0800171c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e041      	b.n	80017b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001734:	b2db      	uxtb	r3, r3
 8001736:	2b00      	cmp	r3, #0
 8001738:	d106      	bne.n	8001748 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 f839 	bl	80017ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3304      	adds	r3, #4
 8001758:	4619      	mov	r1, r3
 800175a:	4610      	mov	r0, r2
 800175c:	f000 f9b4 	bl	8001ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2201      	movs	r2, #1
 800176c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2201      	movs	r2, #1
 8001774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2201      	movs	r2, #1
 800177c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2201      	movs	r2, #1
 8001794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2201      	movs	r2, #1
 800179c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2201      	movs	r2, #1
 80017ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b083      	sub	sp, #12
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr

080017cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d001      	beq.n	80017e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e03a      	b.n	800185a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68da      	ldr	r2, [r3, #12]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a18      	ldr	r2, [pc, #96]	; (8001864 <HAL_TIM_Base_Start_IT+0x98>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800180e:	d009      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_TIM_Base_Start_IT+0x9c>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_TIM_Base_Start_IT+0x58>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <HAL_TIM_Base_Start_IT+0xa0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d111      	bne.n	8001848 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d010      	beq.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001846:	e007      	b.n	8001858 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40012c00 	.word	0x40012c00
 8001868:	40000400 	.word	0x40000400
 800186c:	40000800 	.word	0x40000800

08001870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b02      	cmp	r3, #2
 8001884:	d122      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b02      	cmp	r3, #2
 8001892:	d11b      	bne.n	80018cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0202 	mvn.w	r2, #2
 800189c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0303 	and.w	r3, r3, #3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d003      	beq.n	80018ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f000 f8ed 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80018b8:	e005      	b.n	80018c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f000 f8e0 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f000 f8ef 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	d122      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d11b      	bne.n	8001920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f06f 0204 	mvn.w	r2, #4
 80018f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2202      	movs	r2, #2
 80018f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001902:	2b00      	cmp	r3, #0
 8001904:	d003      	beq.n	800190e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f000 f8c3 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 800190c:	e005      	b.n	800191a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f8b6 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f000 f8c5 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	691b      	ldr	r3, [r3, #16]
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	2b08      	cmp	r3, #8
 800192c:	d122      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b08      	cmp	r3, #8
 800193a:	d11b      	bne.n	8001974 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f06f 0208 	mvn.w	r2, #8
 8001944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2204      	movs	r2, #4
 800194a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d003      	beq.n	8001962 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 f899 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 8001960:	e005      	b.n	800196e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 f88c 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 f89b 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	f003 0310 	and.w	r3, r3, #16
 800197e:	2b10      	cmp	r3, #16
 8001980:	d122      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	f003 0310 	and.w	r3, r3, #16
 800198c:	2b10      	cmp	r3, #16
 800198e:	d11b      	bne.n	80019c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f06f 0210 	mvn.w	r2, #16
 8001998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2208      	movs	r2, #8
 800199e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69db      	ldr	r3, [r3, #28]
 80019a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f86f 	bl	8001a92 <HAL_TIM_IC_CaptureCallback>
 80019b4:	e005      	b.n	80019c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f000 f862 	bl	8001a80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f000 f871 	bl	8001aa4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d10e      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d107      	bne.n	80019f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f06f 0201 	mvn.w	r2, #1
 80019ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7fe fd7e 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019fe:	2b80      	cmp	r3, #128	; 0x80
 8001a00:	d10e      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0c:	2b80      	cmp	r3, #128	; 0x80
 8001a0e:	d107      	bne.n	8001a20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f000 f8bf 	bl	8001b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a2a:	2b40      	cmp	r3, #64	; 0x40
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	2b40      	cmp	r3, #64	; 0x40
 8001a3a:	d107      	bne.n	8001a4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f000 f835 	bl	8001ab6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	d10e      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	d107      	bne.n	8001a78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f06f 0220 	mvn.w	r2, #32
 8001a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f000 f88a 	bl	8001b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	4a29      	ldr	r2, [pc, #164]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d00b      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae6:	d007      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a26      	ldr	r2, [pc, #152]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d003      	beq.n	8001af8 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a25      	ldr	r2, [pc, #148]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d108      	bne.n	8001b0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001afe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d00b      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d007      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	; (8001b84 <TIM_Base_SetConfig+0xbc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d003      	beq.n	8001b2a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <TIM_Base_SetConfig+0xc0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d108      	bne.n	8001b3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <TIM_Base_SetConfig+0xb8>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d103      	bne.n	8001b70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	691a      	ldr	r2, [r3, #16]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	615a      	str	r2, [r3, #20]
}
 8001b76:	bf00      	nop
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40012c00 	.word	0x40012c00
 8001b84:	40000400 	.word	0x40000400
 8001b88:	40000800 	.word	0x40000800

08001b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bc80      	pop	{r7}
 8001b9c:	4770      	bx	lr

08001b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e03f      	b.n	8001c42 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fcda 	bl	8000590 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fbd7 	bl	80023a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b08a      	sub	sp, #40	; 0x28
 8001c4e:	af02      	add	r7, sp, #8
 8001c50:	60f8      	str	r0, [r7, #12]
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	603b      	str	r3, [r7, #0]
 8001c56:	4613      	mov	r3, r2
 8001c58:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b20      	cmp	r3, #32
 8001c68:	d17c      	bne.n	8001d64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d002      	beq.n	8001c76 <HAL_UART_Transmit+0x2c>
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e075      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_UART_Transmit+0x3e>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e06e      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2200      	movs	r2, #0
 8001c94:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2221      	movs	r2, #33	; 0x21
 8001c9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c9e:	f7fe fdd5 	bl	800084c <HAL_GetTick>
 8001ca2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	88fa      	ldrh	r2, [r7, #6]
 8001ca8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	88fa      	ldrh	r2, [r7, #6]
 8001cae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cb8:	d108      	bne.n	8001ccc <HAL_UART_Transmit+0x82>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d104      	bne.n	8001ccc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	61bb      	str	r3, [r7, #24]
 8001cca:	e003      	b.n	8001cd4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001cdc:	e02a      	b.n	8001d34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2180      	movs	r1, #128	; 0x80
 8001ce8:	68f8      	ldr	r0, [r7, #12]
 8001cea:	f000 f9fa 	bl	80020e2 <UART_WaitOnFlagUntilTimeout>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e036      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d10b      	bne.n	8001d16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	881b      	ldrh	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3302      	adds	r3, #2
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	e007      	b.n	8001d26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	3301      	adds	r3, #1
 8001d24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1cf      	bne.n	8001cde <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f9ca 	bl	80020e2 <UART_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2220      	movs	r2, #32
 8001d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	e000      	b.n	8001d66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d64:	2302      	movs	r3, #2
  }
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3720      	adds	r7, #32
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b08a      	sub	sp, #40	; 0x28
 8001d72:	af02      	add	r7, sp, #8
 8001d74:	60f8      	str	r0, [r7, #12]
 8001d76:	60b9      	str	r1, [r7, #8]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b20      	cmp	r3, #32
 8001d8c:	f040 8089 	bne.w	8001ea2 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_UART_Receive+0x2e>
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e081      	b.n	8001ea4 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Receive+0x40>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e07a      	b.n	8001ea4 <HAL_UART_Receive+0x136>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2200      	movs	r2, #0
 8001dba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2222      	movs	r2, #34	; 0x22
 8001dc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001dc4:	f7fe fd42 	bl	800084c <HAL_GetTick>
 8001dc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	88fa      	ldrh	r2, [r7, #6]
 8001dce:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dde:	d108      	bne.n	8001df2 <HAL_UART_Receive+0x84>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d104      	bne.n	8001df2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	61bb      	str	r3, [r7, #24]
 8001df0:	e003      	b.n	8001dfa <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001e02:	e043      	b.n	8001e8c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2120      	movs	r1, #32
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 f967 	bl	80020e2 <UART_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e042      	b.n	8001ea4 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10c      	bne.n	8001e3e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	3302      	adds	r3, #2
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	e01f      	b.n	8001e7e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e46:	d007      	beq.n	8001e58 <HAL_UART_Receive+0xea>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d10a      	bne.n	8001e66 <HAL_UART_Receive+0xf8>
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d106      	bne.n	8001e66 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	701a      	strb	r2, [r3, #0]
 8001e64:	e008      	b.n	8001e78 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1b6      	bne.n	8001e04 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	e000      	b.n	8001ea4 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3720      	adds	r7, #32
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10d      	bne.n	8001efe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x52>
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f9d5 	bl	80022a6 <UART_Receive_IT>
      return;
 8001efc:	e0d0      	b.n	80020a0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80b0 	beq.w	8002066 <HAL_UART_IRQHandler+0x1ba>
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d105      	bne.n	8001f1c <HAL_UART_IRQHandler+0x70>
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	f000 80a5 	beq.w	8002066 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00a      	beq.n	8001f3c <HAL_UART_IRQHandler+0x90>
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	f043 0201 	orr.w	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d00a      	beq.n	8001f5c <HAL_UART_IRQHandler+0xb0>
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d005      	beq.n	8001f5c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f54:	f043 0202 	orr.w	r2, r3, #2
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00a      	beq.n	8001f7c <HAL_UART_IRQHandler+0xd0>
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00f      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xfa>
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d104      	bne.n	8001f9a <HAL_UART_IRQHandler+0xee>
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	f043 0208 	orr.w	r2, r3, #8
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d077      	beq.n	800209e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f003 0320 	and.w	r3, r3, #32
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_UART_IRQHandler+0x11c>
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	f003 0320 	and.w	r3, r3, #32
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d002      	beq.n	8001fc8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f96f 	bl	80022a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf14      	ite	ne
 8001fd6:	2301      	movne	r3, #1
 8001fd8:	2300      	moveq	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d102      	bne.n	8001ff0 <HAL_UART_IRQHandler+0x144>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d031      	beq.n	8002054 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f8c0 	bl	8002176 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002012:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002020:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <HAL_UART_IRQHandler+0x1fc>)
 8002022:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fcf9 	bl	8000a20 <HAL_DMA_Abort_IT>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d016      	beq.n	8002062 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800203e:	4610      	mov	r0, r2
 8002040:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002042:	e00e      	b.n	8002062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f843 	bl	80020d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800204a:	e00a      	b.n	8002062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f83f 	bl	80020d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002052:	e006      	b.n	8002062 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f83b 	bl	80020d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002060:	e01d      	b.n	800209e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002062:	bf00      	nop
    return;
 8002064:	e01b      	b.n	800209e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b00      	cmp	r3, #0
 800206e:	d008      	beq.n	8002082 <HAL_UART_IRQHandler+0x1d6>
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8ac 	bl	80021d8 <UART_Transmit_IT>
    return;
 8002080:	e00e      	b.n	80020a0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_UART_IRQHandler+0x1f4>
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d004      	beq.n	80020a0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8ed 	bl	8002276 <UART_EndTransmit_IT>
    return;
 800209c:	e000      	b.n	80020a0 <HAL_UART_IRQHandler+0x1f4>
    return;
 800209e:	bf00      	nop
  }
}
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	080021b1 	.word	0x080021b1

080020ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	bc80      	pop	{r7}
 80020e0:	4770      	bx	lr

080020e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b084      	sub	sp, #16
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	4613      	mov	r3, r2
 80020f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020f2:	e02c      	b.n	800214e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d028      	beq.n	800214e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <UART_WaitOnFlagUntilTimeout+0x30>
 8002102:	f7fe fba3 	bl	800084c <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	429a      	cmp	r2, r3
 8002110:	d21d      	bcs.n	800214e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002120:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	695a      	ldr	r2, [r3, #20]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 0201 	bic.w	r2, r2, #1
 8002130:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e00f      	b.n	800216e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4013      	ands	r3, r2
 8002158:	68ba      	ldr	r2, [r7, #8]
 800215a:	429a      	cmp	r2, r3
 800215c:	bf0c      	ite	eq
 800215e:	2301      	moveq	r3, #1
 8002160:	2300      	movne	r3, #0
 8002162:	b2db      	uxtb	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	79fb      	ldrb	r3, [r7, #7]
 8002168:	429a      	cmp	r2, r3
 800216a:	d0c3      	beq.n	80020f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	68da      	ldr	r2, [r3, #12]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800218c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	695a      	ldr	r2, [r3, #20]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0201 	bic.w	r2, r2, #1
 800219c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2220      	movs	r2, #32
 80021a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2200      	movs	r2, #0
 80021c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2200      	movs	r2, #0
 80021c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f7ff ff80 	bl	80020d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021d0:	bf00      	nop
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b21      	cmp	r3, #33	; 0x21
 80021ea:	d13e      	bne.n	800226a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f4:	d114      	bne.n	8002220 <UART_Transmit_IT+0x48>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d110      	bne.n	8002220 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	461a      	mov	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002212:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	1c9a      	adds	r2, r3, #2
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	621a      	str	r2, [r3, #32]
 800221e:	e008      	b.n	8002232 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6a1b      	ldr	r3, [r3, #32]
 8002224:	1c59      	adds	r1, r3, #1
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6211      	str	r1, [r2, #32]
 800222a:	781a      	ldrb	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002236:	b29b      	uxth	r3, r3
 8002238:	3b01      	subs	r3, #1
 800223a:	b29b      	uxth	r3, r3
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	4619      	mov	r1, r3
 8002240:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10f      	bne.n	8002266 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002254:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68da      	ldr	r2, [r3, #12]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002264:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e000      	b.n	800226c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800226a:	2302      	movs	r3, #2
  }
}
 800226c:	4618      	mov	r0, r3
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr

08002276 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800228c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ff08 	bl	80020ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b22      	cmp	r3, #34	; 0x22
 80022b8:	d170      	bne.n	800239c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d117      	bne.n	80022f4 <UART_Receive_IT+0x4e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d113      	bne.n	80022f4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	b29b      	uxth	r3, r3
 80022de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ec:	1c9a      	adds	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	629a      	str	r2, [r3, #40]	; 0x28
 80022f2:	e026      	b.n	8002342 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002306:	d007      	beq.n	8002318 <UART_Receive_IT+0x72>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <UART_Receive_IT+0x80>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	701a      	strb	r2, [r3, #0]
 8002324:	e008      	b.n	8002338 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	1c5a      	adds	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002346:	b29b      	uxth	r3, r3
 8002348:	3b01      	subs	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	4619      	mov	r1, r3
 8002350:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002352:	2b00      	cmp	r3, #0
 8002354:	d120      	bne.n	8002398 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 0220 	bic.w	r2, r2, #32
 8002364:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002374:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2220      	movs	r2, #32
 800238a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe95 	bl	80020be <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002394:	2300      	movs	r3, #0
 8002396:	e002      	b.n	800239e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	e000      	b.n	800239e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800239c:	2302      	movs	r3, #2
  }
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023e2:	f023 030c 	bic.w	r3, r3, #12
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6812      	ldr	r2, [r2, #0]
 80023ea:	68b9      	ldr	r1, [r7, #8]
 80023ec:	430b      	orrs	r3, r1
 80023ee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <UART_SetConfig+0x114>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d103      	bne.n	8002418 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002410:	f7ff f922 	bl	8001658 <HAL_RCC_GetPCLK2Freq>
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	e002      	b.n	800241e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002418:	f7ff f90a 	bl	8001630 <HAL_RCC_GetPCLK1Freq>
 800241c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fbb2 f3f3 	udiv	r3, r2, r3
 8002434:	4a22      	ldr	r2, [pc, #136]	; (80024c0 <UART_SetConfig+0x118>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	0119      	lsls	r1, r3, #4
 800243e:	68fa      	ldr	r2, [r7, #12]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	009a      	lsls	r2, r3, #2
 8002448:	441a      	add	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fbb2 f2f3 	udiv	r2, r2, r3
 8002454:	4b1a      	ldr	r3, [pc, #104]	; (80024c0 <UART_SetConfig+0x118>)
 8002456:	fba3 0302 	umull	r0, r3, r3, r2
 800245a:	095b      	lsrs	r3, r3, #5
 800245c:	2064      	movs	r0, #100	; 0x64
 800245e:	fb00 f303 	mul.w	r3, r0, r3
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	3332      	adds	r3, #50	; 0x32
 8002468:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <UART_SetConfig+0x118>)
 800246a:	fba2 2303 	umull	r2, r3, r2, r3
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002474:	4419      	add	r1, r3
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	4613      	mov	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	4413      	add	r3, r2
 800247e:	009a      	lsls	r2, r3, #2
 8002480:	441a      	add	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	fbb2 f2f3 	udiv	r2, r2, r3
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <UART_SetConfig+0x118>)
 800248e:	fba3 0302 	umull	r0, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	2064      	movs	r0, #100	; 0x64
 8002496:	fb00 f303 	mul.w	r3, r0, r3
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	3332      	adds	r3, #50	; 0x32
 80024a0:	4a07      	ldr	r2, [pc, #28]	; (80024c0 <UART_SetConfig+0x118>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	440a      	add	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024b4:	bf00      	nop
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40013800 	.word	0x40013800
 80024c0:	51eb851f 	.word	0x51eb851f

080024c4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024ca:	f3ef 8305 	mrs	r3, IPSR
 80024ce:	60bb      	str	r3, [r7, #8]
  return(result);
 80024d0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024d6:	f3ef 8310 	mrs	r3, PRIMASK
 80024da:	607b      	str	r3, [r7, #4]
  return(result);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <osKernelInitialize+0x32>
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <osKernelInitialize+0x60>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d109      	bne.n	80024fe <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80024ea:	f3ef 8311 	mrs	r3, BASEPRI
 80024ee:	603b      	str	r3, [r7, #0]
  return(result);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80024f6:	f06f 0305 	mvn.w	r3, #5
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e00c      	b.n	8002518 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <osKernelInitialize+0x60>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d105      	bne.n	8002512 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002506:	4b07      	ldr	r3, [pc, #28]	; (8002524 <osKernelInitialize+0x60>)
 8002508:	2201      	movs	r2, #1
 800250a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	e002      	b.n	8002518 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002518:	68fb      	ldr	r3, [r7, #12]
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	2000042c 	.word	0x2000042c

08002528 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800252e:	f3ef 8305 	mrs	r3, IPSR
 8002532:	60bb      	str	r3, [r7, #8]
  return(result);
 8002534:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10f      	bne.n	800255a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253a:	f3ef 8310 	mrs	r3, PRIMASK
 800253e:	607b      	str	r3, [r7, #4]
  return(result);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <osKernelStart+0x32>
 8002546:	4b11      	ldr	r3, [pc, #68]	; (800258c <osKernelStart+0x64>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d109      	bne.n	8002562 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800254e:	f3ef 8311 	mrs	r3, BASEPRI
 8002552:	603b      	str	r3, [r7, #0]
  return(result);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <osKernelStart+0x3a>
    stat = osErrorISR;
 800255a:	f06f 0305 	mvn.w	r3, #5
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e00e      	b.n	8002580 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <osKernelStart+0x64>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d107      	bne.n	800257a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800256a:	4b08      	ldr	r3, [pc, #32]	; (800258c <osKernelStart+0x64>)
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002570:	f001 f84a 	bl	8003608 <vTaskStartScheduler>
      stat = osOK;
 8002574:	2300      	movs	r3, #0
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e002      	b.n	8002580 <osKernelStart+0x58>
    } else {
      stat = osError;
 800257a:	f04f 33ff 	mov.w	r3, #4294967295
 800257e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002580:	68fb      	ldr	r3, [r7, #12]
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000042c 	.word	0x2000042c

08002590 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002590:	b580      	push	{r7, lr}
 8002592:	b092      	sub	sp, #72	; 0x48
 8002594:	af04      	add	r7, sp, #16
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a0:	f3ef 8305 	mrs	r3, IPSR
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f040 8094 	bne.w	80026d6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025ae:	f3ef 8310 	mrs	r3, PRIMASK
 80025b2:	623b      	str	r3, [r7, #32]
  return(result);
 80025b4:	6a3b      	ldr	r3, [r7, #32]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 808d 	bne.w	80026d6 <osThreadNew+0x146>
 80025bc:	4b48      	ldr	r3, [pc, #288]	; (80026e0 <osThreadNew+0x150>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d106      	bne.n	80025d2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c4:	f3ef 8311 	mrs	r3, BASEPRI
 80025c8:	61fb      	str	r3, [r7, #28]
  return(result);
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f040 8082 	bne.w	80026d6 <osThreadNew+0x146>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d07e      	beq.n	80026d6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80025dc:	2318      	movs	r3, #24
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80025e0:	2300      	movs	r3, #0
 80025e2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80025e4:	f107 031b 	add.w	r3, r7, #27
 80025e8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80025ea:	f04f 33ff 	mov.w	r3, #4294967295
 80025ee:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d045      	beq.n	8002682 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <osThreadNew+0x74>
        name = attr->name;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d002      	beq.n	8002612 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <osThreadNew+0x9a>
 8002618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261a:	2b38      	cmp	r3, #56	; 0x38
 800261c:	d805      	bhi.n	800262a <osThreadNew+0x9a>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <osThreadNew+0x9e>
        return (NULL);
 800262a:	2300      	movs	r3, #0
 800262c:	e054      	b.n	80026d8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00e      	beq.n	8002664 <osThreadNew+0xd4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b5b      	cmp	r3, #91	; 0x5b
 800264c:	d90a      	bls.n	8002664 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002652:	2b00      	cmp	r3, #0
 8002654:	d006      	beq.n	8002664 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <osThreadNew+0xd4>
        mem = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	e010      	b.n	8002686 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10c      	bne.n	8002686 <osThreadNew+0xf6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d108      	bne.n	8002686 <osThreadNew+0xf6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	691b      	ldr	r3, [r3, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d104      	bne.n	8002686 <osThreadNew+0xf6>
          mem = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002680:	e001      	b.n	8002686 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002688:	2b01      	cmp	r3, #1
 800268a:	d110      	bne.n	80026ae <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002694:	9202      	str	r2, [sp, #8]
 8002696:	9301      	str	r3, [sp, #4]
 8002698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800269a:	9300      	str	r3, [sp, #0]
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 fde4 	bl	8003270 <xTaskCreateStatic>
 80026a8:	4603      	mov	r3, r0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	e013      	b.n	80026d6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d110      	bne.n	80026d6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f107 0314 	add.w	r3, r7, #20
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 fe2e 	bl	8003328 <xTaskCreate>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d001      	beq.n	80026d6 <osThreadNew+0x146>
          hTask = NULL;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026d6:	697b      	ldr	r3, [r7, #20]
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3738      	adds	r7, #56	; 0x38
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	2000042c 	.word	0x2000042c

080026e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	4a06      	ldr	r2, [pc, #24]	; (800270c <vApplicationGetIdleTaskMemory+0x28>)
 80026f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4a05      	ldr	r2, [pc, #20]	; (8002710 <vApplicationGetIdleTaskMemory+0x2c>)
 80026fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2280      	movs	r2, #128	; 0x80
 8002700:	601a      	str	r2, [r3, #0]
}
 8002702:	bf00      	nop
 8002704:	3714      	adds	r7, #20
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000430 	.word	0x20000430
 8002710:	2000048c 	.word	0x2000048c

08002714 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4a07      	ldr	r2, [pc, #28]	; (8002740 <vApplicationGetTimerTaskMemory+0x2c>)
 8002724:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <vApplicationGetTimerTaskMemory+0x30>)
 800272a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002732:	601a      	str	r2, [r3, #0]
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000068c 	.word	0x2000068c
 8002744:	200006e8 	.word	0x200006e8

08002748 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0208 	add.w	r2, r3, #8
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f04f 32ff 	mov.w	r2, #4294967295
 8002760:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f103 0208 	add.w	r2, r3, #8
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f103 0208 	add.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr

08002786 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	bc80      	pop	{r7}
 800279c:	4770      	bx	lr

0800279e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800279e:	b480      	push	{r7}
 80027a0:	b085      	sub	sp, #20
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689a      	ldr	r2, [r3, #8]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	601a      	str	r2, [r3, #0]
}
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d103      	bne.n	8002804 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	e00c      	b.n	800281e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3308      	adds	r3, #8
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	e002      	b.n	8002812 <vListInsert+0x2e>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	429a      	cmp	r2, r3
 800281c:	d2f6      	bcs.n	800280c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	1c5a      	adds	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	601a      	str	r2, [r3, #0]
}
 800284a:	bf00      	nop
 800284c:	3714      	adds	r7, #20
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr

08002854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	6892      	ldr	r2, [r2, #8]
 800286a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6852      	ldr	r2, [r2, #4]
 8002874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	429a      	cmp	r2, r3
 800287e:	d103      	bne.n	8002888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	1e5a      	subs	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bc80      	pop	{r7}
 80028a4:	4770      	bx	lr
	...

080028a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028d2:	f001 ffcb 	bl	800486c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028de:	68f9      	ldr	r1, [r7, #12]
 80028e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028e2:	fb01 f303 	mul.w	r3, r1, r3
 80028e6:	441a      	add	r2, r3
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002902:	3b01      	subs	r3, #1
 8002904:	68f9      	ldr	r1, [r7, #12]
 8002906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	441a      	add	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	22ff      	movs	r2, #255	; 0xff
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d114      	bne.n	8002952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d01a      	beq.n	8002966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3310      	adds	r3, #16
 8002934:	4618      	mov	r0, r3
 8002936:	f001 f8f1 	bl	8003b1c <xTaskRemoveFromEventList>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d012      	beq.n	8002966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <xQueueGenericReset+0xcc>)
 8002942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	f3bf 8f4f 	dsb	sy
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	e009      	b.n	8002966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3310      	adds	r3, #16
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff fef6 	bl	8002748 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3324      	adds	r3, #36	; 0x24
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff fef1 	bl	8002748 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002966:	f001 ffb1 	bl	80048cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800296a:	2301      	movs	r3, #1
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	e000ed04 	.word	0xe000ed04

08002978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	; 0x38
 800297c:	af02      	add	r7, sp, #8
 800297e:	60f8      	str	r0, [r7, #12]
 8002980:	60b9      	str	r1, [r7, #8]
 8002982:	607a      	str	r2, [r7, #4]
 8002984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800299e:	bf00      	nop
 80029a0:	e7fe      	b.n	80029a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80029a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ac:	f383 8811 	msr	BASEPRI, r3
 80029b0:	f3bf 8f6f 	isb	sy
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80029ba:	bf00      	nop
 80029bc:	e7fe      	b.n	80029bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <xQueueGenericCreateStatic+0x52>
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <xQueueGenericCreateStatic+0x56>
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <xQueueGenericCreateStatic+0x58>
 80029ce:	2300      	movs	r3, #0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d10a      	bne.n	80029ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	623b      	str	r3, [r7, #32]
}
 80029e6:	bf00      	nop
 80029e8:	e7fe      	b.n	80029e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d102      	bne.n	80029f6 <xQueueGenericCreateStatic+0x7e>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <xQueueGenericCreateStatic+0x82>
 80029f6:	2301      	movs	r3, #1
 80029f8:	e000      	b.n	80029fc <xQueueGenericCreateStatic+0x84>
 80029fa:	2300      	movs	r3, #0
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10a      	bne.n	8002a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a04:	f383 8811 	msr	BASEPRI, r3
 8002a08:	f3bf 8f6f 	isb	sy
 8002a0c:	f3bf 8f4f 	dsb	sy
 8002a10:	61fb      	str	r3, [r7, #28]
}
 8002a12:	bf00      	nop
 8002a14:	e7fe      	b.n	8002a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a16:	2350      	movs	r3, #80	; 0x50
 8002a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b50      	cmp	r3, #80	; 0x50
 8002a1e:	d00a      	beq.n	8002a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a24:	f383 8811 	msr	BASEPRI, r3
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	f3bf 8f4f 	dsb	sy
 8002a30:	61bb      	str	r3, [r7, #24]
}
 8002a32:	bf00      	nop
 8002a34:	e7fe      	b.n	8002a34 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00d      	beq.n	8002a5c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4613      	mov	r3, r2
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	68b9      	ldr	r1, [r7, #8]
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f805 	bl	8002a66 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3730      	adds	r7, #48	; 0x30
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}

08002a66 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b084      	sub	sp, #16
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	60f8      	str	r0, [r7, #12]
 8002a6e:	60b9      	str	r1, [r7, #8]
 8002a70:	607a      	str	r2, [r7, #4]
 8002a72:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e002      	b.n	8002a88 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a94:	2101      	movs	r1, #1
 8002a96:	69b8      	ldr	r0, [r7, #24]
 8002a98:	f7ff ff06 	bl	80028a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08e      	sub	sp, #56	; 0x38
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
 8002ab8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002aba:	2300      	movs	r3, #0
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10a      	bne.n	8002ade <xQueueGenericSend+0x32>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ada:	bf00      	nop
 8002adc:	e7fe      	b.n	8002adc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d103      	bne.n	8002aec <xQueueGenericSend+0x40>
 8002ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d101      	bne.n	8002af0 <xQueueGenericSend+0x44>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <xQueueGenericSend+0x46>
 8002af0:	2300      	movs	r3, #0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10a      	bne.n	8002b0c <xQueueGenericSend+0x60>
	__asm volatile
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b08:	bf00      	nop
 8002b0a:	e7fe      	b.n	8002b0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d103      	bne.n	8002b1a <xQueueGenericSend+0x6e>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <xQueueGenericSend+0x72>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <xQueueGenericSend+0x74>
 8002b1e:	2300      	movs	r3, #0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10a      	bne.n	8002b3a <xQueueGenericSend+0x8e>
	__asm volatile
 8002b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b28:	f383 8811 	msr	BASEPRI, r3
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	f3bf 8f4f 	dsb	sy
 8002b34:	623b      	str	r3, [r7, #32]
}
 8002b36:	bf00      	nop
 8002b38:	e7fe      	b.n	8002b38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b3a:	f001 f9b1 	bl	8003ea0 <xTaskGetSchedulerState>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <xQueueGenericSend+0x9e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <xQueueGenericSend+0xa2>
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e000      	b.n	8002b50 <xQueueGenericSend+0xa4>
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d10a      	bne.n	8002b6a <xQueueGenericSend+0xbe>
	__asm volatile
 8002b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b58:	f383 8811 	msr	BASEPRI, r3
 8002b5c:	f3bf 8f6f 	isb	sy
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	61fb      	str	r3, [r7, #28]
}
 8002b66:	bf00      	nop
 8002b68:	e7fe      	b.n	8002b68 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b6a:	f001 fe7f 	bl	800486c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d302      	bcc.n	8002b80 <xQueueGenericSend+0xd4>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d129      	bne.n	8002bd4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	68b9      	ldr	r1, [r7, #8]
 8002b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b86:	f000 fa07 	bl	8002f98 <prvCopyDataToQueue>
 8002b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	3324      	adds	r3, #36	; 0x24
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 ffbf 	bl	8003b1c <xTaskRemoveFromEventList>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d013      	beq.n	8002bcc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ba4:	4b3f      	ldr	r3, [pc, #252]	; (8002ca4 <xQueueGenericSend+0x1f8>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	e00a      	b.n	8002bcc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d007      	beq.n	8002bcc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002bbc:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <xQueueGenericSend+0x1f8>)
 8002bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bcc:	f001 fe7e 	bl	80048cc <vPortExitCritical>
				return pdPASS;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e063      	b.n	8002c9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d103      	bne.n	8002be2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bda:	f001 fe77 	bl	80048cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	e05c      	b.n	8002c9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d106      	bne.n	8002bf6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002be8:	f107 0314 	add.w	r3, r7, #20
 8002bec:	4618      	mov	r0, r3
 8002bee:	f000 fff9 	bl	8003be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bf6:	f001 fe69 	bl	80048cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bfa:	f000 fd6b 	bl	80036d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bfe:	f001 fe35 	bl	800486c <vPortEnterCritical>
 8002c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c08:	b25b      	sxtb	r3, r3
 8002c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0e:	d103      	bne.n	8002c18 <xQueueGenericSend+0x16c>
 8002c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c1e:	b25b      	sxtb	r3, r3
 8002c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c24:	d103      	bne.n	8002c2e <xQueueGenericSend+0x182>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2e:	f001 fe4d 	bl	80048cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c32:	1d3a      	adds	r2, r7, #4
 8002c34:	f107 0314 	add.w	r3, r7, #20
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 ffe8 	bl	8003c10 <xTaskCheckForTimeOut>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d124      	bne.n	8002c90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c48:	f000 fa9e 	bl	8003188 <prvIsQueueFull>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d018      	beq.n	8002c84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c54:	3310      	adds	r3, #16
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 ff0e 	bl	8003a7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c62:	f000 fa29 	bl	80030b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c66:	f000 fd43 	bl	80036f0 <xTaskResumeAll>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f47f af7c 	bne.w	8002b6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <xQueueGenericSend+0x1f8>)
 8002c74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	f3bf 8f4f 	dsb	sy
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	e772      	b.n	8002b6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c86:	f000 fa17 	bl	80030b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c8a:	f000 fd31 	bl	80036f0 <xTaskResumeAll>
 8002c8e:	e76c      	b.n	8002b6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c92:	f000 fa11 	bl	80030b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c96:	f000 fd2b 	bl	80036f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c9a:	2300      	movs	r3, #0
		}
	}
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3738      	adds	r7, #56	; 0x38
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
 8002cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002cd2:	bf00      	nop
 8002cd4:	e7fe      	b.n	8002cd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d103      	bne.n	8002ce4 <xQueueGenericSendFromISR+0x3c>
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <xQueueGenericSendFromISR+0x40>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <xQueueGenericSendFromISR+0x42>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10a      	bne.n	8002d04 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	623b      	str	r3, [r7, #32]
}
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d103      	bne.n	8002d12 <xQueueGenericSendFromISR+0x6a>
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <xQueueGenericSendFromISR+0x6e>
 8002d12:	2301      	movs	r3, #1
 8002d14:	e000      	b.n	8002d18 <xQueueGenericSendFromISR+0x70>
 8002d16:	2300      	movs	r3, #0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	61fb      	str	r3, [r7, #28]
}
 8002d2e:	bf00      	nop
 8002d30:	e7fe      	b.n	8002d30 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d32:	f001 fe5d 	bl	80049f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d36:	f3ef 8211 	mrs	r2, BASEPRI
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d302      	bcc.n	8002d64 <xQueueGenericSendFromISR+0xbc>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d12c      	bne.n	8002dbe <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	68b9      	ldr	r1, [r7, #8]
 8002d72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d74:	f000 f910 	bl	8002f98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d112      	bne.n	8002da8 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d016      	beq.n	8002db8 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d8c:	3324      	adds	r3, #36	; 0x24
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fec4 	bl	8003b1c <xTaskRemoveFromEventList>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00e      	beq.n	8002db8 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00b      	beq.n	8002db8 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e007      	b.n	8002db8 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002da8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dac:	3301      	adds	r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	b25a      	sxtb	r2, r3
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002db8:	2301      	movs	r3, #1
 8002dba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002dbc:	e001      	b.n	8002dc2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002dcc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3738      	adds	r7, #56	; 0x38
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08c      	sub	sp, #48	; 0x30
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002de4:	2300      	movs	r3, #0
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10a      	bne.n	8002e08 <xQueueReceive+0x30>
	__asm volatile
 8002df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df6:	f383 8811 	msr	BASEPRI, r3
 8002dfa:	f3bf 8f6f 	isb	sy
 8002dfe:	f3bf 8f4f 	dsb	sy
 8002e02:	623b      	str	r3, [r7, #32]
}
 8002e04:	bf00      	nop
 8002e06:	e7fe      	b.n	8002e06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d103      	bne.n	8002e16 <xQueueReceive+0x3e>
 8002e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <xQueueReceive+0x42>
 8002e16:	2301      	movs	r3, #1
 8002e18:	e000      	b.n	8002e1c <xQueueReceive+0x44>
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10a      	bne.n	8002e36 <xQueueReceive+0x5e>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	61fb      	str	r3, [r7, #28]
}
 8002e32:	bf00      	nop
 8002e34:	e7fe      	b.n	8002e34 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e36:	f001 f833 	bl	8003ea0 <xTaskGetSchedulerState>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d102      	bne.n	8002e46 <xQueueReceive+0x6e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <xQueueReceive+0x72>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <xQueueReceive+0x74>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10a      	bne.n	8002e66 <xQueueReceive+0x8e>
	__asm volatile
 8002e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e54:	f383 8811 	msr	BASEPRI, r3
 8002e58:	f3bf 8f6f 	isb	sy
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	61bb      	str	r3, [r7, #24]
}
 8002e62:	bf00      	nop
 8002e64:	e7fe      	b.n	8002e64 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e66:	f001 fd01 	bl	800486c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01f      	beq.n	8002eb6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7a:	f000 f8f7 	bl	800306c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e80:	1e5a      	subs	r2, r3, #1
 8002e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00f      	beq.n	8002eae <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	3310      	adds	r3, #16
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fe42 	bl	8003b1c <xTaskRemoveFromEventList>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d007      	beq.n	8002eae <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e9e:	4b3d      	ldr	r3, [pc, #244]	; (8002f94 <xQueueReceive+0x1bc>)
 8002ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	f3bf 8f4f 	dsb	sy
 8002eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002eae:	f001 fd0d 	bl	80048cc <vPortExitCritical>
				return pdPASS;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e069      	b.n	8002f8a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d103      	bne.n	8002ec4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ebc:	f001 fd06 	bl	80048cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e062      	b.n	8002f8a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002eca:	f107 0310 	add.w	r3, r7, #16
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 fe88 	bl	8003be4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002ed8:	f001 fcf8 	bl	80048cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002edc:	f000 fbfa 	bl	80036d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ee0:	f001 fcc4 	bl	800486c <vPortEnterCritical>
 8002ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eea:	b25b      	sxtb	r3, r3
 8002eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef0:	d103      	bne.n	8002efa <xQueueReceive+0x122>
 8002ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d103      	bne.n	8002f10 <xQueueReceive+0x138>
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f10:	f001 fcdc 	bl	80048cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f14:	1d3a      	adds	r2, r7, #4
 8002f16:	f107 0310 	add.w	r3, r7, #16
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 fe77 	bl	8003c10 <xTaskCheckForTimeOut>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d123      	bne.n	8002f70 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2a:	f000 f917 	bl	800315c <prvIsQueueEmpty>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d017      	beq.n	8002f64 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f36:	3324      	adds	r3, #36	; 0x24
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd9d 	bl	8003a7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f44:	f000 f8b8 	bl	80030b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f48:	f000 fbd2 	bl	80036f0 <xTaskResumeAll>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d189      	bne.n	8002e66 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002f52:	4b10      	ldr	r3, [pc, #64]	; (8002f94 <xQueueReceive+0x1bc>)
 8002f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	f3bf 8f6f 	isb	sy
 8002f62:	e780      	b.n	8002e66 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f66:	f000 f8a7 	bl	80030b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f6a:	f000 fbc1 	bl	80036f0 <xTaskResumeAll>
 8002f6e:	e77a      	b.n	8002e66 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f72:	f000 f8a1 	bl	80030b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f76:	f000 fbbb 	bl	80036f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f000 f8ee 	bl	800315c <prvIsQueueEmpty>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f43f af6f 	beq.w	8002e66 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3730      	adds	r7, #48	; 0x30
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	e000ed04 	.word	0xe000ed04

08002f98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10d      	bne.n	8002fd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d14d      	bne.n	800305a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ff8a 	bl	8003edc <xTaskPriorityDisinherit>
 8002fc8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	605a      	str	r2, [r3, #4]
 8002fd0:	e043      	b.n	800305a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d119      	bne.n	800300c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6898      	ldr	r0, [r3, #8]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	68b9      	ldr	r1, [r7, #8]
 8002fe4:	f001 ff3e 	bl	8004e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d32b      	bcc.n	800305a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	609a      	str	r2, [r3, #8]
 800300a:	e026      	b.n	800305a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	68d8      	ldr	r0, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	461a      	mov	r2, r3
 8003016:	68b9      	ldr	r1, [r7, #8]
 8003018:	f001 ff24 	bl	8004e64 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68da      	ldr	r2, [r3, #12]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	425b      	negs	r3, r3
 8003026:	441a      	add	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d207      	bcs.n	8003048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	425b      	negs	r3, r3
 8003042:	441a      	add	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d105      	bne.n	800305a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	3b01      	subs	r3, #1
 8003058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003062:	697b      	ldr	r3, [r7, #20]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	2b00      	cmp	r3, #0
 800307c:	d018      	beq.n	80030b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	441a      	add	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68da      	ldr	r2, [r3, #12]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	429a      	cmp	r2, r3
 8003096:	d303      	bcc.n	80030a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	68d9      	ldr	r1, [r3, #12]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	461a      	mov	r2, r3
 80030aa:	6838      	ldr	r0, [r7, #0]
 80030ac:	f001 feda 	bl	8004e64 <memcpy>
	}
}
 80030b0:	bf00      	nop
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80030c0:	f001 fbd4 	bl	800486c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030cc:	e011      	b.n	80030f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	3324      	adds	r3, #36	; 0x24
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 fd1e 	bl	8003b1c <xTaskRemoveFromEventList>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80030e6:	f000 fdf5 	bl	8003cd4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	dce9      	bgt.n	80030ce <prvUnlockQueue+0x16>
 80030fa:	e000      	b.n	80030fe <prvUnlockQueue+0x46>
					break;
 80030fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003106:	f001 fbe1 	bl	80048cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800310a:	f001 fbaf 	bl	800486c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003116:	e011      	b.n	800313c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3310      	adds	r3, #16
 8003124:	4618      	mov	r0, r3
 8003126:	f000 fcf9 	bl	8003b1c <xTaskRemoveFromEventList>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003130:	f000 fdd0 	bl	8003cd4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003134:	7bbb      	ldrb	r3, [r7, #14]
 8003136:	3b01      	subs	r3, #1
 8003138:	b2db      	uxtb	r3, r3
 800313a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800313c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003140:	2b00      	cmp	r3, #0
 8003142:	dce9      	bgt.n	8003118 <prvUnlockQueue+0x60>
 8003144:	e000      	b.n	8003148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	22ff      	movs	r2, #255	; 0xff
 800314c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003150:	f001 fbbc 	bl	80048cc <vPortExitCritical>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003164:	f001 fb82 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d102      	bne.n	8003176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003170:	2301      	movs	r3, #1
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e001      	b.n	800317a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800317a:	f001 fba7 	bl	80048cc <vPortExitCritical>

	return xReturn;
 800317e:	68fb      	ldr	r3, [r7, #12]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003190:	f001 fb6c 	bl	800486c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	429a      	cmp	r2, r3
 800319e:	d102      	bne.n	80031a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e001      	b.n	80031aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031a6:	2300      	movs	r3, #0
 80031a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031aa:	f001 fb8f 	bl	80048cc <vPortExitCritical>

	return xReturn;
 80031ae:	68fb      	ldr	r3, [r7, #12]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e014      	b.n	80031f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80031c8:	4a0e      	ldr	r2, [pc, #56]	; (8003204 <vQueueAddToRegistry+0x4c>)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10b      	bne.n	80031ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80031d4:	490b      	ldr	r1, [pc, #44]	; (8003204 <vQueueAddToRegistry+0x4c>)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	683a      	ldr	r2, [r7, #0]
 80031da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <vQueueAddToRegistry+0x4c>)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	4413      	add	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80031ea:	e006      	b.n	80031fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	3301      	adds	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2b07      	cmp	r3, #7
 80031f6:	d9e7      	bls.n	80031c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	20001e08 	.word	0x20001e08

08003208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003218:	f001 fb28 	bl	800486c <vPortEnterCritical>
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003222:	b25b      	sxtb	r3, r3
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d103      	bne.n	8003232 <vQueueWaitForMessageRestricted+0x2a>
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003238:	b25b      	sxtb	r3, r3
 800323a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800323e:	d103      	bne.n	8003248 <vQueueWaitForMessageRestricted+0x40>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003248:	f001 fb40 	bl	80048cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	2b00      	cmp	r3, #0
 8003252:	d106      	bne.n	8003262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	3324      	adds	r3, #36	; 0x24
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68b9      	ldr	r1, [r7, #8]
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fc31 	bl	8003ac4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003262:	6978      	ldr	r0, [r7, #20]
 8003264:	f7ff ff28 	bl	80030b8 <prvUnlockQueue>
	}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003270:	b580      	push	{r7, lr}
 8003272:	b08e      	sub	sp, #56	; 0x38
 8003274:	af04      	add	r7, sp, #16
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
 800327c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800327e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10a      	bne.n	800329a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	623b      	str	r3, [r7, #32]
}
 8003296:	bf00      	nop
 8003298:	e7fe      	b.n	8003298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800329a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	61fb      	str	r3, [r7, #28]
}
 80032b2:	bf00      	nop
 80032b4:	e7fe      	b.n	80032b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80032b6:	235c      	movs	r3, #92	; 0x5c
 80032b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	2b5c      	cmp	r3, #92	; 0x5c
 80032be:	d00a      	beq.n	80032d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80032c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c4:	f383 8811 	msr	BASEPRI, r3
 80032c8:	f3bf 8f6f 	isb	sy
 80032cc:	f3bf 8f4f 	dsb	sy
 80032d0:	61bb      	str	r3, [r7, #24]
}
 80032d2:	bf00      	nop
 80032d4:	e7fe      	b.n	80032d4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80032d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01e      	beq.n	800331a <xTaskCreateStatic+0xaa>
 80032dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d01b      	beq.n	800331a <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80032e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80032e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80032f4:	2300      	movs	r3, #0
 80032f6:	9303      	str	r3, [sp, #12]
 80032f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fa:	9302      	str	r3, [sp, #8]
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	9301      	str	r3, [sp, #4]
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	9300      	str	r3, [sp, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	68b9      	ldr	r1, [r7, #8]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f850 	bl	80033b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003312:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003314:	f000 f8d4 	bl	80034c0 <prvAddNewTaskToReadyList>
 8003318:	e001      	b.n	800331e <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800331e:	697b      	ldr	r3, [r7, #20]
	}
 8003320:	4618      	mov	r0, r3
 8003322:	3728      	adds	r7, #40	; 0x28
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003328:	b580      	push	{r7, lr}
 800332a:	b08c      	sub	sp, #48	; 0x30
 800332c:	af04      	add	r7, sp, #16
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4613      	mov	r3, r2
 8003336:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4618      	mov	r0, r3
 800333e:	f001 fb95 	bl	8004a6c <pvPortMalloc>
 8003342:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00e      	beq.n	8003368 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800334a:	205c      	movs	r0, #92	; 0x5c
 800334c:	f001 fb8e 	bl	8004a6c <pvPortMalloc>
 8003350:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003352:	69fb      	ldr	r3, [r7, #28]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
 800335e:	e005      	b.n	800336c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003360:	6978      	ldr	r0, [r7, #20]
 8003362:	f001 fc47 	bl	8004bf4 <vPortFree>
 8003366:	e001      	b.n	800336c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d017      	beq.n	80033a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	2300      	movs	r3, #0
 800337e:	9303      	str	r3, [sp, #12]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	9302      	str	r3, [sp, #8]
 8003384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 f80e 	bl	80033b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003396:	69f8      	ldr	r0, [r7, #28]
 8003398:	f000 f892 	bl	80034c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800339c:	2301      	movs	r3, #1
 800339e:	61bb      	str	r3, [r7, #24]
 80033a0:	e002      	b.n	80033a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295
 80033a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033a8:	69bb      	ldr	r3, [r7, #24]
	}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b088      	sub	sp, #32
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	461a      	mov	r2, r3
 80033ca:	21a5      	movs	r1, #165	; 0xa5
 80033cc:	f001 fd58 	bl	8004e80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033da:	3b01      	subs	r3, #1
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	4413      	add	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	f023 0307 	bic.w	r3, r3, #7
 80033e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00a      	beq.n	800340a <prvInitialiseNewTask+0x58>
	__asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	617b      	str	r3, [r7, #20]
}
 8003406:	bf00      	nop
 8003408:	e7fe      	b.n	8003408 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800340a:	2300      	movs	r3, #0
 800340c:	61fb      	str	r3, [r7, #28]
 800340e:	e012      	b.n	8003436 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	7819      	ldrb	r1, [r3, #0]
 8003418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	3334      	adds	r3, #52	; 0x34
 8003420:	460a      	mov	r2, r1
 8003422:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	4413      	add	r3, r2
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d006      	beq.n	800343e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b0f      	cmp	r3, #15
 800343a:	d9e9      	bls.n	8003410 <prvInitialiseNewTask+0x5e>
 800343c:	e000      	b.n	8003440 <prvInitialiseNewTask+0x8e>
		{
			break;
 800343e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003442:	2200      	movs	r2, #0
 8003444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	2b37      	cmp	r3, #55	; 0x37
 800344c:	d901      	bls.n	8003452 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800344e:	2337      	movs	r3, #55	; 0x37
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003456:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800345c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	2200      	movs	r2, #0
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	3304      	adds	r3, #4
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f98c 	bl	8002786 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	3318      	adds	r3, #24
 8003472:	4618      	mov	r0, r3
 8003474:	f7ff f987 	bl	8002786 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003480:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800348e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003490:	2200      	movs	r2, #0
 8003492:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003496:	2200      	movs	r2, #0
 8003498:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	68f9      	ldr	r1, [r7, #12]
 80034a0:	69b8      	ldr	r0, [r7, #24]
 80034a2:	f001 f8ef 	bl	8004684 <pxPortInitialiseStack>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034aa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d002      	beq.n	80034b8 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034b8:	bf00      	nop
 80034ba:	3720      	adds	r7, #32
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034c8:	f001 f9d0 	bl	800486c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <prvAddNewTaskToReadyList+0xc4>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <prvAddNewTaskToReadyList+0xc4>)
 80034d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034d6:	4b2c      	ldr	r3, [pc, #176]	; (8003588 <prvAddNewTaskToReadyList+0xc8>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034de:	4a2a      	ldr	r2, [pc, #168]	; (8003588 <prvAddNewTaskToReadyList+0xc8>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034e4:	4b27      	ldr	r3, [pc, #156]	; (8003584 <prvAddNewTaskToReadyList+0xc4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d110      	bne.n	800350e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034ec:	f000 fc16 	bl	8003d1c <prvInitialiseTaskLists>
 80034f0:	e00d      	b.n	800350e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <prvAddNewTaskToReadyList+0xcc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034fa:	4b23      	ldr	r3, [pc, #140]	; (8003588 <prvAddNewTaskToReadyList+0xc8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003504:	429a      	cmp	r2, r3
 8003506:	d802      	bhi.n	800350e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003508:	4a1f      	ldr	r2, [pc, #124]	; (8003588 <prvAddNewTaskToReadyList+0xc8>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <prvAddNewTaskToReadyList+0xd0>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3301      	adds	r3, #1
 8003514:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <prvAddNewTaskToReadyList+0xd0>)
 8003516:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003518:	4b1d      	ldr	r3, [pc, #116]	; (8003590 <prvAddNewTaskToReadyList+0xd0>)
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <prvAddNewTaskToReadyList+0xd4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d903      	bls.n	8003534 <prvAddNewTaskToReadyList+0x74>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <prvAddNewTaskToReadyList+0xd4>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a15      	ldr	r2, [pc, #84]	; (8003598 <prvAddNewTaskToReadyList+0xd8>)
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7ff f927 	bl	800279e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003550:	f001 f9bc 	bl	80048cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <prvAddNewTaskToReadyList+0xcc>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <prvAddNewTaskToReadyList+0xc8>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	429a      	cmp	r2, r3
 8003568:	d207      	bcs.n	800357a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800356a:	4b0c      	ldr	r3, [pc, #48]	; (800359c <prvAddNewTaskToReadyList+0xdc>)
 800356c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003570:	601a      	str	r2, [r3, #0]
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800357a:	bf00      	nop
 800357c:	3708      	adds	r7, #8
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	20000fbc 	.word	0x20000fbc
 8003588:	20000ae8 	.word	0x20000ae8
 800358c:	20000fc8 	.word	0x20000fc8
 8003590:	20000fd8 	.word	0x20000fd8
 8003594:	20000fc4 	.word	0x20000fc4
 8003598:	20000aec 	.word	0x20000aec
 800359c:	e000ed04 	.word	0xe000ed04

080035a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d017      	beq.n	80035e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <vTaskDelay+0x60>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <vTaskDelay+0x30>
	__asm volatile
 80035ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035be:	f383 8811 	msr	BASEPRI, r3
 80035c2:	f3bf 8f6f 	isb	sy
 80035c6:	f3bf 8f4f 	dsb	sy
 80035ca:	60bb      	str	r3, [r7, #8]
}
 80035cc:	bf00      	nop
 80035ce:	e7fe      	b.n	80035ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80035d0:	f000 f880 	bl	80036d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035d4:	2100      	movs	r1, #0
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fcee 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035dc:	f000 f888 	bl	80036f0 <xTaskResumeAll>
 80035e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d107      	bne.n	80035f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <vTaskDelay+0x64>)
 80035ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f3bf 8f4f 	dsb	sy
 80035f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}
 8003600:	20000fe4 	.word	0x20000fe4
 8003604:	e000ed04 	.word	0xe000ed04

08003608 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b08a      	sub	sp, #40	; 0x28
 800360c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003616:	463a      	mov	r2, r7
 8003618:	1d39      	adds	r1, r7, #4
 800361a:	f107 0308 	add.w	r3, r7, #8
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff f860 	bl	80026e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003624:	6839      	ldr	r1, [r7, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	9202      	str	r2, [sp, #8]
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2300      	movs	r3, #0
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	2300      	movs	r3, #0
 8003634:	460a      	mov	r2, r1
 8003636:	4921      	ldr	r1, [pc, #132]	; (80036bc <vTaskStartScheduler+0xb4>)
 8003638:	4821      	ldr	r0, [pc, #132]	; (80036c0 <vTaskStartScheduler+0xb8>)
 800363a:	f7ff fe19 	bl	8003270 <xTaskCreateStatic>
 800363e:	4603      	mov	r3, r0
 8003640:	4a20      	ldr	r2, [pc, #128]	; (80036c4 <vTaskStartScheduler+0xbc>)
 8003642:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <vTaskStartScheduler+0xbc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e001      	b.n	8003656 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d102      	bne.n	8003662 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800365c:	f000 fd00 	bl	8004060 <xTimerCreateTimerTask>
 8003660:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d116      	bne.n	8003696 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366c:	f383 8811 	msr	BASEPRI, r3
 8003670:	f3bf 8f6f 	isb	sy
 8003674:	f3bf 8f4f 	dsb	sy
 8003678:	613b      	str	r3, [r7, #16]
}
 800367a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <vTaskStartScheduler+0xc0>)
 800367e:	f04f 32ff 	mov.w	r2, #4294967295
 8003682:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003684:	4b11      	ldr	r3, [pc, #68]	; (80036cc <vTaskStartScheduler+0xc4>)
 8003686:	2201      	movs	r2, #1
 8003688:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800368a:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <vTaskStartScheduler+0xc8>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003690:	f001 f87a 	bl	8004788 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003694:	e00e      	b.n	80036b4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d10a      	bne.n	80036b4 <vTaskStartScheduler+0xac>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <vTaskStartScheduler+0xaa>
}
 80036b4:	bf00      	nop
 80036b6:	3718      	adds	r7, #24
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	08004ed0 	.word	0x08004ed0
 80036c0:	08003ced 	.word	0x08003ced
 80036c4:	20000fe0 	.word	0x20000fe0
 80036c8:	20000fdc 	.word	0x20000fdc
 80036cc:	20000fc8 	.word	0x20000fc8
 80036d0:	20000fc0 	.word	0x20000fc0

080036d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <vTaskSuspendAll+0x18>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	3301      	adds	r3, #1
 80036de:	4a03      	ldr	r2, [pc, #12]	; (80036ec <vTaskSuspendAll+0x18>)
 80036e0:	6013      	str	r3, [r2, #0]
}
 80036e2:	bf00      	nop
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc80      	pop	{r7}
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	20000fe4 	.word	0x20000fe4

080036f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036f6:	2300      	movs	r3, #0
 80036f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036fa:	2300      	movs	r3, #0
 80036fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036fe:	4b42      	ldr	r3, [pc, #264]	; (8003808 <xTaskResumeAll+0x118>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <xTaskResumeAll+0x2c>
	__asm volatile
 8003706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370a:	f383 8811 	msr	BASEPRI, r3
 800370e:	f3bf 8f6f 	isb	sy
 8003712:	f3bf 8f4f 	dsb	sy
 8003716:	603b      	str	r3, [r7, #0]
}
 8003718:	bf00      	nop
 800371a:	e7fe      	b.n	800371a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800371c:	f001 f8a6 	bl	800486c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003720:	4b39      	ldr	r3, [pc, #228]	; (8003808 <xTaskResumeAll+0x118>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3b01      	subs	r3, #1
 8003726:	4a38      	ldr	r2, [pc, #224]	; (8003808 <xTaskResumeAll+0x118>)
 8003728:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800372a:	4b37      	ldr	r3, [pc, #220]	; (8003808 <xTaskResumeAll+0x118>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d162      	bne.n	80037f8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003732:	4b36      	ldr	r3, [pc, #216]	; (800380c <xTaskResumeAll+0x11c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05e      	beq.n	80037f8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800373a:	e02f      	b.n	800379c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800373c:	4b34      	ldr	r3, [pc, #208]	; (8003810 <xTaskResumeAll+0x120>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3318      	adds	r3, #24
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff f883 	bl	8002854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff f87e 	bl	8002854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4b2d      	ldr	r3, [pc, #180]	; (8003814 <xTaskResumeAll+0x124>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	429a      	cmp	r2, r3
 8003762:	d903      	bls.n	800376c <xTaskResumeAll+0x7c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <xTaskResumeAll+0x124>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a27      	ldr	r2, [pc, #156]	; (8003818 <xTaskResumeAll+0x128>)
 800377a:	441a      	add	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7ff f80b 	bl	800279e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800378c:	4b23      	ldr	r3, [pc, #140]	; (800381c <xTaskResumeAll+0x12c>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003792:	429a      	cmp	r2, r3
 8003794:	d302      	bcc.n	800379c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003796:	4b22      	ldr	r3, [pc, #136]	; (8003820 <xTaskResumeAll+0x130>)
 8003798:	2201      	movs	r2, #1
 800379a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800379c:	4b1c      	ldr	r3, [pc, #112]	; (8003810 <xTaskResumeAll+0x120>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1cb      	bne.n	800373c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037aa:	f000 fb55 	bl	8003e58 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037ae:	4b1d      	ldr	r3, [pc, #116]	; (8003824 <xTaskResumeAll+0x134>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d010      	beq.n	80037dc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037ba:	f000 f845 	bl	8003848 <xTaskIncrementTick>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <xTaskResumeAll+0x130>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1f1      	bne.n	80037ba <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <xTaskResumeAll+0x134>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <xTaskResumeAll+0x130>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d009      	beq.n	80037f8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037e4:	2301      	movs	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <xTaskResumeAll+0x138>)
 80037ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ee:	601a      	str	r2, [r3, #0]
 80037f0:	f3bf 8f4f 	dsb	sy
 80037f4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037f8:	f001 f868 	bl	80048cc <vPortExitCritical>

	return xAlreadyYielded;
 80037fc:	68bb      	ldr	r3, [r7, #8]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	20000fe4 	.word	0x20000fe4
 800380c:	20000fbc 	.word	0x20000fbc
 8003810:	20000f7c 	.word	0x20000f7c
 8003814:	20000fc4 	.word	0x20000fc4
 8003818:	20000aec 	.word	0x20000aec
 800381c:	20000ae8 	.word	0x20000ae8
 8003820:	20000fd0 	.word	0x20000fd0
 8003824:	20000fcc 	.word	0x20000fcc
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003832:	4b04      	ldr	r3, [pc, #16]	; (8003844 <xTaskGetTickCount+0x18>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003838:	687b      	ldr	r3, [r7, #4]
}
 800383a:	4618      	mov	r0, r3
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr
 8003844:	20000fc0 	.word	0x20000fc0

08003848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <xTaskIncrementTick+0x150>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 808e 	bne.w	8003978 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800385c:	4b4f      	ldr	r3, [pc, #316]	; (800399c <xTaskIncrementTick+0x154>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3301      	adds	r3, #1
 8003862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003864:	4a4d      	ldr	r2, [pc, #308]	; (800399c <xTaskIncrementTick+0x154>)
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d120      	bne.n	80038b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003870:	4b4b      	ldr	r3, [pc, #300]	; (80039a0 <xTaskIncrementTick+0x158>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <xTaskIncrementTick+0x48>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	603b      	str	r3, [r7, #0]
}
 800388c:	bf00      	nop
 800388e:	e7fe      	b.n	800388e <xTaskIncrementTick+0x46>
 8003890:	4b43      	ldr	r3, [pc, #268]	; (80039a0 <xTaskIncrementTick+0x158>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b43      	ldr	r3, [pc, #268]	; (80039a4 <xTaskIncrementTick+0x15c>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a41      	ldr	r2, [pc, #260]	; (80039a0 <xTaskIncrementTick+0x158>)
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	4a41      	ldr	r2, [pc, #260]	; (80039a4 <xTaskIncrementTick+0x15c>)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <xTaskIncrementTick+0x160>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <xTaskIncrementTick+0x160>)
 80038ac:	6013      	str	r3, [r2, #0]
 80038ae:	f000 fad3 	bl	8003e58 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038b2:	4b3e      	ldr	r3, [pc, #248]	; (80039ac <xTaskIncrementTick+0x164>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d34e      	bcc.n	800395a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038bc:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <xTaskIncrementTick+0x158>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <xTaskIncrementTick+0x82>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xTaskIncrementTick+0x84>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d004      	beq.n	80038da <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038d0:	4b36      	ldr	r3, [pc, #216]	; (80039ac <xTaskIncrementTick+0x164>)
 80038d2:	f04f 32ff 	mov.w	r2, #4294967295
 80038d6:	601a      	str	r2, [r3, #0]
					break;
 80038d8:	e03f      	b.n	800395a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038da:	4b31      	ldr	r3, [pc, #196]	; (80039a0 <xTaskIncrementTick+0x158>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d203      	bcs.n	80038fa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038f2:	4a2e      	ldr	r2, [pc, #184]	; (80039ac <xTaskIncrementTick+0x164>)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6013      	str	r3, [r2, #0]
						break;
 80038f8:	e02f      	b.n	800395a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	3304      	adds	r3, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fe ffa8 	bl	8002854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2b00      	cmp	r3, #0
 800390a:	d004      	beq.n	8003916 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	3318      	adds	r3, #24
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe ff9f 	bl	8002854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800391a:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <xTaskIncrementTick+0x168>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d903      	bls.n	800392a <xTaskIncrementTick+0xe2>
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	4a22      	ldr	r2, [pc, #136]	; (80039b0 <xTaskIncrementTick+0x168>)
 8003928:	6013      	str	r3, [r2, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <xTaskIncrementTick+0x16c>)
 8003938:	441a      	add	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	3304      	adds	r3, #4
 800393e:	4619      	mov	r1, r3
 8003940:	4610      	mov	r0, r2
 8003942:	f7fe ff2c 	bl	800279e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <xTaskIncrementTick+0x170>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	429a      	cmp	r2, r3
 8003952:	d3b3      	bcc.n	80038bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003958:	e7b0      	b.n	80038bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <xTaskIncrementTick+0x170>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4914      	ldr	r1, [pc, #80]	; (80039b4 <xTaskIncrementTick+0x16c>)
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d907      	bls.n	8003982 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003972:	2301      	movs	r3, #1
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e004      	b.n	8003982 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003978:	4b10      	ldr	r3, [pc, #64]	; (80039bc <xTaskIncrementTick+0x174>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3301      	adds	r3, #1
 800397e:	4a0f      	ldr	r2, [pc, #60]	; (80039bc <xTaskIncrementTick+0x174>)
 8003980:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003982:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <xTaskIncrementTick+0x178>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800398a:	2301      	movs	r3, #1
 800398c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800398e:	697b      	ldr	r3, [r7, #20]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000fe4 	.word	0x20000fe4
 800399c:	20000fc0 	.word	0x20000fc0
 80039a0:	20000f74 	.word	0x20000f74
 80039a4:	20000f78 	.word	0x20000f78
 80039a8:	20000fd4 	.word	0x20000fd4
 80039ac:	20000fdc 	.word	0x20000fdc
 80039b0:	20000fc4 	.word	0x20000fc4
 80039b4:	20000aec 	.word	0x20000aec
 80039b8:	20000ae8 	.word	0x20000ae8
 80039bc:	20000fcc 	.word	0x20000fcc
 80039c0:	20000fd0 	.word	0x20000fd0

080039c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039ca:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <vTaskSwitchContext+0xa4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <vTaskSwitchContext+0xa8>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039d8:	e041      	b.n	8003a5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80039da:	4b24      	ldr	r3, [pc, #144]	; (8003a6c <vTaskSwitchContext+0xa8>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80039e0:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <vTaskSwitchContext+0xac>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	e010      	b.n	8003a0a <vTaskSwitchContext+0x46>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <vTaskSwitchContext+0x40>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	607b      	str	r3, [r7, #4]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <vTaskSwitchContext+0x3e>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	491a      	ldr	r1, [pc, #104]	; (8003a74 <vTaskSwitchContext+0xb0>)
 8003a0c:	68fa      	ldr	r2, [r7, #12]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0e4      	beq.n	80039e8 <vTaskSwitchContext+0x24>
 8003a1e:	68fa      	ldr	r2, [r7, #12]
 8003a20:	4613      	mov	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	4413      	add	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4a12      	ldr	r2, [pc, #72]	; (8003a74 <vTaskSwitchContext+0xb0>)
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	685b      	ldr	r3, [r3, #4]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	3308      	adds	r3, #8
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d104      	bne.n	8003a4e <vTaskSwitchContext+0x8a>
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a08      	ldr	r2, [pc, #32]	; (8003a78 <vTaskSwitchContext+0xb4>)
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	4a05      	ldr	r2, [pc, #20]	; (8003a70 <vTaskSwitchContext+0xac>)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6013      	str	r3, [r2, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	20000fe4 	.word	0x20000fe4
 8003a6c:	20000fd0 	.word	0x20000fd0
 8003a70:	20000fc4 	.word	0x20000fc4
 8003a74:	20000aec 	.word	0x20000aec
 8003a78:	20000ae8 	.word	0x20000ae8

08003a7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d10a      	bne.n	8003aa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	60fb      	str	r3, [r7, #12]
}
 8003a9e:	bf00      	nop
 8003aa0:	e7fe      	b.n	8003aa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <vTaskPlaceOnEventList+0x44>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3318      	adds	r3, #24
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7fe fe9a 	bl	80027e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	6838      	ldr	r0, [r7, #0]
 8003ab4:	f000 fa80 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	20000ae8 	.word	0x20000ae8

08003ac4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d10a      	bne.n	8003aec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ada:	f383 8811 	msr	BASEPRI, r3
 8003ade:	f3bf 8f6f 	isb	sy
 8003ae2:	f3bf 8f4f 	dsb	sy
 8003ae6:	617b      	str	r3, [r7, #20]
}
 8003ae8:	bf00      	nop
 8003aea:	e7fe      	b.n	8003aea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <vTaskPlaceOnEventListRestricted+0x54>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	3318      	adds	r3, #24
 8003af2:	4619      	mov	r1, r3
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7fe fe52 	bl	800279e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b00:	f04f 33ff 	mov.w	r3, #4294967295
 8003b04:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	68b8      	ldr	r0, [r7, #8]
 8003b0a:	f000 fa55 	bl	8003fb8 <prvAddCurrentTaskToDelayedList>
	}
 8003b0e:	bf00      	nop
 8003b10:	3718      	adds	r7, #24
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000ae8 	.word	0x20000ae8

08003b1c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10a      	bne.n	8003b48 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b36:	f383 8811 	msr	BASEPRI, r3
 8003b3a:	f3bf 8f6f 	isb	sy
 8003b3e:	f3bf 8f4f 	dsb	sy
 8003b42:	60fb      	str	r3, [r7, #12]
}
 8003b44:	bf00      	nop
 8003b46:	e7fe      	b.n	8003b46 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	3318      	adds	r3, #24
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe fe81 	bl	8002854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <xTaskRemoveFromEventList+0xb0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d11d      	bne.n	8003b96 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	3304      	adds	r3, #4
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7fe fe78 	bl	8002854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	4b19      	ldr	r3, [pc, #100]	; (8003bd0 <xTaskRemoveFromEventList+0xb4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d903      	bls.n	8003b78 <xTaskRemoveFromEventList+0x5c>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b74:	4a16      	ldr	r2, [pc, #88]	; (8003bd0 <xTaskRemoveFromEventList+0xb4>)
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4a13      	ldr	r2, [pc, #76]	; (8003bd4 <xTaskRemoveFromEventList+0xb8>)
 8003b86:	441a      	add	r2, r3
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	3304      	adds	r3, #4
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	f7fe fe05 	bl	800279e <vListInsertEnd>
 8003b94:	e005      	b.n	8003ba2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	480e      	ldr	r0, [pc, #56]	; (8003bd8 <xTaskRemoveFromEventList+0xbc>)
 8003b9e:	f7fe fdfe 	bl	800279e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	; (8003bdc <xTaskRemoveFromEventList+0xc0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d905      	bls.n	8003bbc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	; (8003be0 <xTaskRemoveFromEventList+0xc4>)
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	e001      	b.n	8003bc0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003bc0:	697b      	ldr	r3, [r7, #20]
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000fe4 	.word	0x20000fe4
 8003bd0:	20000fc4 	.word	0x20000fc4
 8003bd4:	20000aec 	.word	0x20000aec
 8003bd8:	20000f7c 	.word	0x20000f7c
 8003bdc:	20000ae8 	.word	0x20000ae8
 8003be0:	20000fd0 	.word	0x20000fd0

08003be4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003bec:	4b06      	ldr	r3, [pc, #24]	; (8003c08 <vTaskInternalSetTimeOutState+0x24>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003bf4:	4b05      	ldr	r3, [pc, #20]	; (8003c0c <vTaskInternalSetTimeOutState+0x28>)
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	20000fd4 	.word	0x20000fd4
 8003c0c:	20000fc0 	.word	0x20000fc0

08003c10 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b088      	sub	sp, #32
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	613b      	str	r3, [r7, #16]
}
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10a      	bne.n	8003c52 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c40:	f383 8811 	msr	BASEPRI, r3
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	f3bf 8f4f 	dsb	sy
 8003c4c:	60fb      	str	r3, [r7, #12]
}
 8003c4e:	bf00      	nop
 8003c50:	e7fe      	b.n	8003c50 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003c52:	f000 fe0b 	bl	800486c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003c56:	4b1d      	ldr	r3, [pc, #116]	; (8003ccc <xTaskCheckForTimeOut+0xbc>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d102      	bne.n	8003c76 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	e023      	b.n	8003cbe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b15      	ldr	r3, [pc, #84]	; (8003cd0 <xTaskCheckForTimeOut+0xc0>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d007      	beq.n	8003c92 <xTaskCheckForTimeOut+0x82>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	69ba      	ldr	r2, [r7, #24]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d302      	bcc.n	8003c92 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e015      	b.n	8003cbe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d20b      	bcs.n	8003cb4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	1ad2      	subs	r2, r2, r3
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f7ff ff9b 	bl	8003be4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e004      	b.n	8003cbe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003cbe:	f000 fe05 	bl	80048cc <vPortExitCritical>

	return xReturn;
 8003cc2:	69fb      	ldr	r3, [r7, #28]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000fc0 	.word	0x20000fc0
 8003cd0:	20000fd4 	.word	0x20000fd4

08003cd4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <vTaskMissedYield+0x14>)
 8003cda:	2201      	movs	r2, #1
 8003cdc:	601a      	str	r2, [r3, #0]
}
 8003cde:	bf00      	nop
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bc80      	pop	{r7}
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	20000fd0 	.word	0x20000fd0

08003cec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003cf4:	f000 f852 	bl	8003d9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003cf8:	4b06      	ldr	r3, [pc, #24]	; (8003d14 <prvIdleTask+0x28>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d9f9      	bls.n	8003cf4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d00:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <prvIdleTask+0x2c>)
 8003d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d06:	601a      	str	r2, [r3, #0]
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d10:	e7f0      	b.n	8003cf4 <prvIdleTask+0x8>
 8003d12:	bf00      	nop
 8003d14:	20000aec 	.word	0x20000aec
 8003d18:	e000ed04 	.word	0xe000ed04

08003d1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d22:	2300      	movs	r3, #0
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	e00c      	b.n	8003d42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <prvInitialiseTaskLists+0x60>)
 8003d34:	4413      	add	r3, r2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fe fd06 	bl	8002748 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b37      	cmp	r3, #55	; 0x37
 8003d46:	d9ef      	bls.n	8003d28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003d48:	480d      	ldr	r0, [pc, #52]	; (8003d80 <prvInitialiseTaskLists+0x64>)
 8003d4a:	f7fe fcfd 	bl	8002748 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003d4e:	480d      	ldr	r0, [pc, #52]	; (8003d84 <prvInitialiseTaskLists+0x68>)
 8003d50:	f7fe fcfa 	bl	8002748 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003d54:	480c      	ldr	r0, [pc, #48]	; (8003d88 <prvInitialiseTaskLists+0x6c>)
 8003d56:	f7fe fcf7 	bl	8002748 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003d5a:	480c      	ldr	r0, [pc, #48]	; (8003d8c <prvInitialiseTaskLists+0x70>)
 8003d5c:	f7fe fcf4 	bl	8002748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003d60:	480b      	ldr	r0, [pc, #44]	; (8003d90 <prvInitialiseTaskLists+0x74>)
 8003d62:	f7fe fcf1 	bl	8002748 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003d66:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <prvInitialiseTaskLists+0x78>)
 8003d68:	4a05      	ldr	r2, [pc, #20]	; (8003d80 <prvInitialiseTaskLists+0x64>)
 8003d6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <prvInitialiseTaskLists+0x7c>)
 8003d6e:	4a05      	ldr	r2, [pc, #20]	; (8003d84 <prvInitialiseTaskLists+0x68>)
 8003d70:	601a      	str	r2, [r3, #0]
}
 8003d72:	bf00      	nop
 8003d74:	3708      	adds	r7, #8
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000aec 	.word	0x20000aec
 8003d80:	20000f4c 	.word	0x20000f4c
 8003d84:	20000f60 	.word	0x20000f60
 8003d88:	20000f7c 	.word	0x20000f7c
 8003d8c:	20000f90 	.word	0x20000f90
 8003d90:	20000fa8 	.word	0x20000fa8
 8003d94:	20000f74 	.word	0x20000f74
 8003d98:	20000f78 	.word	0x20000f78

08003d9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003da2:	e019      	b.n	8003dd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003da4:	f000 fd62 	bl	800486c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <prvCheckTasksWaitingTermination+0x50>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe fd4d 	bl	8002854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003dba:	4b0d      	ldr	r3, [pc, #52]	; (8003df0 <prvCheckTasksWaitingTermination+0x54>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	4a0b      	ldr	r2, [pc, #44]	; (8003df0 <prvCheckTasksWaitingTermination+0x54>)
 8003dc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	4a0a      	ldr	r2, [pc, #40]	; (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003dce:	f000 fd7d 	bl	80048cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f810 	bl	8003df8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003dd8:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <prvCheckTasksWaitingTermination+0x58>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1e1      	bne.n	8003da4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20000f90 	.word	0x20000f90
 8003df0:	20000fbc 	.word	0x20000fbc
 8003df4:	20000fa4 	.word	0x20000fa4

08003df8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d108      	bne.n	8003e1c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 fef0 	bl	8004bf4 <vPortFree>
				vPortFree( pxTCB );
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 feed 	bl	8004bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e1a:	e018      	b.n	8003e4e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d103      	bne.n	8003e2e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fee4 	bl	8004bf4 <vPortFree>
	}
 8003e2c:	e00f      	b.n	8003e4e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d00a      	beq.n	8003e4e <prvDeleteTCB+0x56>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	60fb      	str	r3, [r7, #12]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <prvDeleteTCB+0x54>
	}
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	; (8003e98 <prvResetNextTaskUnblockTime+0x40>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <prvResetNextTaskUnblockTime+0x14>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <prvResetNextTaskUnblockTime+0x16>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003e72:	4b0a      	ldr	r3, [pc, #40]	; (8003e9c <prvResetNextTaskUnblockTime+0x44>)
 8003e74:	f04f 32ff 	mov.w	r2, #4294967295
 8003e78:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003e7a:	e008      	b.n	8003e8e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <prvResetNextTaskUnblockTime+0x40>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a04      	ldr	r2, [pc, #16]	; (8003e9c <prvResetNextTaskUnblockTime+0x44>)
 8003e8c:	6013      	str	r3, [r2, #0]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bc80      	pop	{r7}
 8003e96:	4770      	bx	lr
 8003e98:	20000f74 	.word	0x20000f74
 8003e9c:	20000fdc 	.word	0x20000fdc

08003ea0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <xTaskGetSchedulerState+0x34>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d102      	bne.n	8003eb4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	607b      	str	r3, [r7, #4]
 8003eb2:	e008      	b.n	8003ec6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003eb4:	4b08      	ldr	r3, [pc, #32]	; (8003ed8 <xTaskGetSchedulerState+0x38>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d102      	bne.n	8003ec2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	e001      	b.n	8003ec6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003ec6:	687b      	ldr	r3, [r7, #4]
	}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000fc8 	.word	0x20000fc8
 8003ed8:	20000fe4 	.word	0x20000fe4

08003edc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d056      	beq.n	8003fa0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003ef2:	4b2e      	ldr	r3, [pc, #184]	; (8003fac <xTaskPriorityDisinherit+0xd0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d00a      	beq.n	8003f12 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	60fb      	str	r3, [r7, #12]
}
 8003f0e:	bf00      	nop
 8003f10:	e7fe      	b.n	8003f10 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1e:	f383 8811 	msr	BASEPRI, r3
 8003f22:	f3bf 8f6f 	isb	sy
 8003f26:	f3bf 8f4f 	dsb	sy
 8003f2a:	60bb      	str	r3, [r7, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	e7fe      	b.n	8003f2e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d02c      	beq.n	8003fa0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d128      	bne.n	8003fa0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	3304      	adds	r3, #4
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fe fc7e 	bl	8002854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f70:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <xTaskPriorityDisinherit+0xd4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d903      	bls.n	8003f80 <xTaskPriorityDisinherit+0xa4>
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7c:	4a0c      	ldr	r2, [pc, #48]	; (8003fb0 <xTaskPriorityDisinherit+0xd4>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f84:	4613      	mov	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4413      	add	r3, r2
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4a09      	ldr	r2, [pc, #36]	; (8003fb4 <xTaskPriorityDisinherit+0xd8>)
 8003f8e:	441a      	add	r2, r3
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4619      	mov	r1, r3
 8003f96:	4610      	mov	r0, r2
 8003f98:	f7fe fc01 	bl	800279e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003fa0:	697b      	ldr	r3, [r7, #20]
	}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3718      	adds	r7, #24
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
 8003faa:	bf00      	nop
 8003fac:	20000ae8 	.word	0x20000ae8
 8003fb0:	20000fc4 	.word	0x20000fc4
 8003fb4:	20000aec 	.word	0x20000aec

08003fb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b084      	sub	sp, #16
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003fc2:	4b21      	ldr	r3, [pc, #132]	; (8004048 <prvAddCurrentTaskToDelayedList+0x90>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fc8:	4b20      	ldr	r3, [pc, #128]	; (800404c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fe fc40 	bl	8002854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fda:	d10a      	bne.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x3a>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe2:	4b1a      	ldr	r3, [pc, #104]	; (800404c <prvAddCurrentTaskToDelayedList+0x94>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	4619      	mov	r1, r3
 8003fea:	4819      	ldr	r0, [pc, #100]	; (8004050 <prvAddCurrentTaskToDelayedList+0x98>)
 8003fec:	f7fe fbd7 	bl	800279e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ff0:	e026      	b.n	8004040 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4413      	add	r3, r2
 8003ff8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ffa:	4b14      	ldr	r3, [pc, #80]	; (800404c <prvAddCurrentTaskToDelayedList+0x94>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004002:	68ba      	ldr	r2, [r7, #8]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	429a      	cmp	r2, r3
 8004008:	d209      	bcs.n	800401e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800400a:	4b12      	ldr	r3, [pc, #72]	; (8004054 <prvAddCurrentTaskToDelayedList+0x9c>)
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b0f      	ldr	r3, [pc, #60]	; (800404c <prvAddCurrentTaskToDelayedList+0x94>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3304      	adds	r3, #4
 8004014:	4619      	mov	r1, r3
 8004016:	4610      	mov	r0, r2
 8004018:	f7fe fbe4 	bl	80027e4 <vListInsert>
}
 800401c:	e010      	b.n	8004040 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800401e:	4b0e      	ldr	r3, [pc, #56]	; (8004058 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4b0a      	ldr	r3, [pc, #40]	; (800404c <prvAddCurrentTaskToDelayedList+0x94>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f7fe fbda 	bl	80027e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004030:	4b0a      	ldr	r3, [pc, #40]	; (800405c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d202      	bcs.n	8004040 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800403a:	4a08      	ldr	r2, [pc, #32]	; (800405c <prvAddCurrentTaskToDelayedList+0xa4>)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	6013      	str	r3, [r2, #0]
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000fc0 	.word	0x20000fc0
 800404c:	20000ae8 	.word	0x20000ae8
 8004050:	20000fa8 	.word	0x20000fa8
 8004054:	20000f78 	.word	0x20000f78
 8004058:	20000f74 	.word	0x20000f74
 800405c:	20000fdc 	.word	0x20000fdc

08004060 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b08a      	sub	sp, #40	; 0x28
 8004064:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800406a:	f000 facb 	bl	8004604 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800406e:	4b1c      	ldr	r3, [pc, #112]	; (80040e0 <xTimerCreateTimerTask+0x80>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d021      	beq.n	80040ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800407e:	1d3a      	adds	r2, r7, #4
 8004080:	f107 0108 	add.w	r1, r7, #8
 8004084:	f107 030c 	add.w	r3, r7, #12
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe fb43 	bl	8002714 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	9202      	str	r2, [sp, #8]
 8004096:	9301      	str	r3, [sp, #4]
 8004098:	2302      	movs	r3, #2
 800409a:	9300      	str	r3, [sp, #0]
 800409c:	2300      	movs	r3, #0
 800409e:	460a      	mov	r2, r1
 80040a0:	4910      	ldr	r1, [pc, #64]	; (80040e4 <xTimerCreateTimerTask+0x84>)
 80040a2:	4811      	ldr	r0, [pc, #68]	; (80040e8 <xTimerCreateTimerTask+0x88>)
 80040a4:	f7ff f8e4 	bl	8003270 <xTaskCreateStatic>
 80040a8:	4603      	mov	r3, r0
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <xTimerCreateTimerTask+0x8c>)
 80040ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80040ae:	4b0f      	ldr	r3, [pc, #60]	; (80040ec <xTimerCreateTimerTask+0x8c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80040b6:	2301      	movs	r3, #1
 80040b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10a      	bne.n	80040d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80040c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c4:	f383 8811 	msr	BASEPRI, r3
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	f3bf 8f4f 	dsb	sy
 80040d0:	613b      	str	r3, [r7, #16]
}
 80040d2:	bf00      	nop
 80040d4:	e7fe      	b.n	80040d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20001018 	.word	0x20001018
 80040e4:	08004ed8 	.word	0x08004ed8
 80040e8:	0800420d 	.word	0x0800420d
 80040ec:	2000101c 	.word	0x2000101c

080040f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040fe:	2300      	movs	r3, #0
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	623b      	str	r3, [r7, #32]
}
 800411a:	bf00      	nop
 800411c:	e7fe      	b.n	800411c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <xTimerGenericCommand+0x98>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d02a      	beq.n	800417c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b05      	cmp	r3, #5
 8004136:	dc18      	bgt.n	800416a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004138:	f7ff feb2 	bl	8003ea0 <xTaskGetSchedulerState>
 800413c:	4603      	mov	r3, r0
 800413e:	2b02      	cmp	r3, #2
 8004140:	d109      	bne.n	8004156 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <xTimerGenericCommand+0x98>)
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	f107 0110 	add.w	r1, r7, #16
 800414a:	2300      	movs	r3, #0
 800414c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800414e:	f7fe fcad 	bl	8002aac <xQueueGenericSend>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24
 8004154:	e012      	b.n	800417c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004156:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <xTimerGenericCommand+0x98>)
 8004158:	6818      	ldr	r0, [r3, #0]
 800415a:	f107 0110 	add.w	r1, r7, #16
 800415e:	2300      	movs	r3, #0
 8004160:	2200      	movs	r2, #0
 8004162:	f7fe fca3 	bl	8002aac <xQueueGenericSend>
 8004166:	6278      	str	r0, [r7, #36]	; 0x24
 8004168:	e008      	b.n	800417c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800416a:	4b07      	ldr	r3, [pc, #28]	; (8004188 <xTimerGenericCommand+0x98>)
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	f107 0110 	add.w	r1, r7, #16
 8004172:	2300      	movs	r3, #0
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	f7fe fd97 	bl	8002ca8 <xQueueGenericSendFromISR>
 800417a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800417e:	4618      	mov	r0, r3
 8004180:	3728      	adds	r7, #40	; 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20001018 	.word	0x20001018

0800418c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af02      	add	r7, sp, #8
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <prvProcessExpiredTimer+0x7c>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3304      	adds	r3, #4
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7fe fb55 	bl	8002854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d122      	bne.n	80041f8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	18d1      	adds	r1, r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	6978      	ldr	r0, [r7, #20]
 80041c0:	f000 f8c8 	bl	8004354 <prvInsertTimerInActiveList>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d016      	beq.n	80041f8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ca:	2300      	movs	r3, #0
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	2300      	movs	r3, #0
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	2100      	movs	r1, #0
 80041d4:	6978      	ldr	r0, [r7, #20]
 80041d6:	f7ff ff8b 	bl	80040f0 <xTimerGenericCommand>
 80041da:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10a      	bne.n	80041f8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
}
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	6978      	ldr	r0, [r7, #20]
 80041fe:	4798      	blx	r3
}
 8004200:	bf00      	nop
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	20001010 	.word	0x20001010

0800420c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4618      	mov	r0, r3
 800421a:	f000 f857 	bl	80042cc <prvGetNextExpireTime>
 800421e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4619      	mov	r1, r3
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f000 f803 	bl	8004230 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800422a:	f000 f8d5 	bl	80043d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800422e:	e7f1      	b.n	8004214 <prvTimerTask+0x8>

08004230 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800423a:	f7ff fa4b 	bl	80036d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800423e:	f107 0308 	add.w	r3, r7, #8
 8004242:	4618      	mov	r0, r3
 8004244:	f000 f866 	bl	8004314 <prvSampleTimeNow>
 8004248:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d130      	bne.n	80042b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10a      	bne.n	800426c <prvProcessTimerOrBlockTask+0x3c>
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	429a      	cmp	r2, r3
 800425c:	d806      	bhi.n	800426c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800425e:	f7ff fa47 	bl	80036f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7ff ff91 	bl	800418c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800426a:	e024      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d008      	beq.n	8004284 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004272:	4b13      	ldr	r3, [pc, #76]	; (80042c0 <prvProcessTimerOrBlockTask+0x90>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	bf0c      	ite	eq
 800427c:	2301      	moveq	r3, #1
 800427e:	2300      	movne	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <prvProcessTimerOrBlockTask+0x94>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	4619      	mov	r1, r3
 8004292:	f7fe ffb9 	bl	8003208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004296:	f7ff fa2b 	bl	80036f0 <xTaskResumeAll>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <prvProcessTimerOrBlockTask+0x98>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
}
 80042b0:	e001      	b.n	80042b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042b2:	f7ff fa1d 	bl	80036f0 <xTaskResumeAll>
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20001014 	.word	0x20001014
 80042c4:	20001018 	.word	0x20001018
 80042c8:	e000ed04 	.word	0xe000ed04

080042cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042d4:	4b0e      	ldr	r3, [pc, #56]	; (8004310 <prvGetNextExpireTime+0x44>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bf0c      	ite	eq
 80042de:	2301      	moveq	r3, #1
 80042e0:	2300      	movne	r3, #0
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <prvGetNextExpireTime+0x44>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	e001      	b.n	8004302 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004302:	68fb      	ldr	r3, [r7, #12]
}
 8004304:	4618      	mov	r0, r3
 8004306:	3714      	adds	r7, #20
 8004308:	46bd      	mov	sp, r7
 800430a:	bc80      	pop	{r7}
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20001010 	.word	0x20001010

08004314 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800431c:	f7ff fa86 	bl	800382c <xTaskGetTickCount>
 8004320:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004322:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <prvSampleTimeNow+0x3c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d205      	bcs.n	8004338 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800432c:	f000 f908 	bl	8004540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	e002      	b.n	800433e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800433e:	4a04      	ldr	r2, [pc, #16]	; (8004350 <prvSampleTimeNow+0x3c>)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004344:	68fb      	ldr	r3, [r7, #12]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	20001020 	.word	0x20001020

08004354 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
 8004360:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	429a      	cmp	r2, r3
 8004378:	d812      	bhi.n	80043a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	1ad2      	subs	r2, r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	429a      	cmp	r2, r3
 8004386:	d302      	bcc.n	800438e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004388:	2301      	movs	r3, #1
 800438a:	617b      	str	r3, [r7, #20]
 800438c:	e01b      	b.n	80043c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800438e:	4b10      	ldr	r3, [pc, #64]	; (80043d0 <prvInsertTimerInActiveList+0x7c>)
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7fe fa23 	bl	80027e4 <vListInsert>
 800439e:	e012      	b.n	80043c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d206      	bcs.n	80043b6 <prvInsertTimerInActiveList+0x62>
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d302      	bcc.n	80043b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043b0:	2301      	movs	r3, #1
 80043b2:	617b      	str	r3, [r7, #20]
 80043b4:	e007      	b.n	80043c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043b6:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <prvInsertTimerInActiveList+0x80>)
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3304      	adds	r3, #4
 80043be:	4619      	mov	r1, r3
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fe fa0f 	bl	80027e4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043c6:	697b      	ldr	r3, [r7, #20]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20001014 	.word	0x20001014
 80043d4:	20001010 	.word	0x20001010

080043d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08e      	sub	sp, #56	; 0x38
 80043dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043de:	e09d      	b.n	800451c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	da18      	bge.n	8004418 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80043e6:	1d3b      	adds	r3, r7, #4
 80043e8:	3304      	adds	r3, #4
 80043ea:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d10a      	bne.n	8004408 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	61fb      	str	r3, [r7, #28]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440e:	6850      	ldr	r0, [r2, #4]
 8004410:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004412:	6892      	ldr	r2, [r2, #8]
 8004414:	4611      	mov	r1, r2
 8004416:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2b00      	cmp	r3, #0
 800441c:	db7d      	blt.n	800451a <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d004      	beq.n	8004434 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800442a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442c:	3304      	adds	r3, #4
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fa10 	bl	8002854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004434:	463b      	mov	r3, r7
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff ff6c 	bl	8004314 <prvSampleTimeNow>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b09      	cmp	r3, #9
 8004442:	d86b      	bhi.n	800451c <prvProcessReceivedCommands+0x144>
 8004444:	a201      	add	r2, pc, #4	; (adr r2, 800444c <prvProcessReceivedCommands+0x74>)
 8004446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444a:	bf00      	nop
 800444c:	08004475 	.word	0x08004475
 8004450:	08004475 	.word	0x08004475
 8004454:	08004475 	.word	0x08004475
 8004458:	0800451d 	.word	0x0800451d
 800445c:	080044d1 	.word	0x080044d1
 8004460:	08004509 	.word	0x08004509
 8004464:	08004475 	.word	0x08004475
 8004468:	08004475 	.word	0x08004475
 800446c:	0800451d 	.word	0x0800451d
 8004470:	080044d1 	.word	0x080044d1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	18d1      	adds	r1, r2, r3
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004482:	f7ff ff67 	bl	8004354 <prvInsertTimerInActiveList>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d047      	beq.n	800451c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004492:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d13f      	bne.n	800451c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	441a      	add	r2, r3
 80044a4:	2300      	movs	r3, #0
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2300      	movs	r3, #0
 80044aa:	2100      	movs	r1, #0
 80044ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044ae:	f7ff fe1f 	bl	80040f0 <xTimerGenericCommand>
 80044b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d130      	bne.n	800451c <prvProcessReceivedCommands+0x144>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	61bb      	str	r3, [r7, #24]
}
 80044cc:	bf00      	nop
 80044ce:	e7fe      	b.n	80044ce <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	617b      	str	r3, [r7, #20]
}
 80044f0:	bf00      	nop
 80044f2:	e7fe      	b.n	80044f2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fa:	18d1      	adds	r1, r2, r3
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004502:	f7ff ff27 	bl	8004354 <prvInsertTimerInActiveList>
					break;
 8004506:	e009      	b.n	800451c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800450a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d104      	bne.n	800451c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004514:	f000 fb6e 	bl	8004bf4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004518:	e000      	b.n	800451c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800451a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800451c:	4b07      	ldr	r3, [pc, #28]	; (800453c <prvProcessReceivedCommands+0x164>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	1d39      	adds	r1, r7, #4
 8004522:	2200      	movs	r2, #0
 8004524:	4618      	mov	r0, r3
 8004526:	f7fe fc57 	bl	8002dd8 <xQueueReceive>
 800452a:	4603      	mov	r3, r0
 800452c:	2b00      	cmp	r3, #0
 800452e:	f47f af57 	bne.w	80043e0 <prvProcessReceivedCommands+0x8>
	}
}
 8004532:	bf00      	nop
 8004534:	bf00      	nop
 8004536:	3730      	adds	r7, #48	; 0x30
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20001018 	.word	0x20001018

08004540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004546:	e045      	b.n	80045d4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004548:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <prvSwitchTimerLists+0xbc>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004552:	4b2a      	ldr	r3, [pc, #168]	; (80045fc <prvSwitchTimerLists+0xbc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe f977 	bl	8002854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456a:	68f8      	ldr	r0, [r7, #12]
 800456c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d12e      	bne.n	80045d4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	429a      	cmp	r2, r3
 8004586:	d90e      	bls.n	80045a6 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68ba      	ldr	r2, [r7, #8]
 800458c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <prvSwitchTimerLists+0xbc>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe f920 	bl	80027e4 <vListInsert>
 80045a4:	e016      	b.n	80045d4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045a6:	2300      	movs	r3, #0
 80045a8:	9300      	str	r3, [sp, #0]
 80045aa:	2300      	movs	r3, #0
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	2100      	movs	r1, #0
 80045b0:	68f8      	ldr	r0, [r7, #12]
 80045b2:	f7ff fd9d 	bl	80040f0 <xTimerGenericCommand>
 80045b6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <prvSwitchTimerLists+0x94>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	603b      	str	r3, [r7, #0]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045d4:	4b09      	ldr	r3, [pc, #36]	; (80045fc <prvSwitchTimerLists+0xbc>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1b4      	bne.n	8004548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045de:	4b07      	ldr	r3, [pc, #28]	; (80045fc <prvSwitchTimerLists+0xbc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045e4:	4b06      	ldr	r3, [pc, #24]	; (8004600 <prvSwitchTimerLists+0xc0>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <prvSwitchTimerLists+0xbc>)
 80045ea:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <prvSwitchTimerLists+0xc0>)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	6013      	str	r3, [r2, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3718      	adds	r7, #24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	20001010 	.word	0x20001010
 8004600:	20001014 	.word	0x20001014

08004604 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800460a:	f000 f92f 	bl	800486c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800460e:	4b15      	ldr	r3, [pc, #84]	; (8004664 <prvCheckForValidListAndQueue+0x60>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d120      	bne.n	8004658 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004616:	4814      	ldr	r0, [pc, #80]	; (8004668 <prvCheckForValidListAndQueue+0x64>)
 8004618:	f7fe f896 	bl	8002748 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800461c:	4813      	ldr	r0, [pc, #76]	; (800466c <prvCheckForValidListAndQueue+0x68>)
 800461e:	f7fe f893 	bl	8002748 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004622:	4b13      	ldr	r3, [pc, #76]	; (8004670 <prvCheckForValidListAndQueue+0x6c>)
 8004624:	4a10      	ldr	r2, [pc, #64]	; (8004668 <prvCheckForValidListAndQueue+0x64>)
 8004626:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <prvCheckForValidListAndQueue+0x70>)
 800462a:	4a10      	ldr	r2, [pc, #64]	; (800466c <prvCheckForValidListAndQueue+0x68>)
 800462c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800462e:	2300      	movs	r3, #0
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <prvCheckForValidListAndQueue+0x74>)
 8004634:	4a11      	ldr	r2, [pc, #68]	; (800467c <prvCheckForValidListAndQueue+0x78>)
 8004636:	2110      	movs	r1, #16
 8004638:	200a      	movs	r0, #10
 800463a:	f7fe f99d 	bl	8002978 <xQueueGenericCreateStatic>
 800463e:	4603      	mov	r3, r0
 8004640:	4a08      	ldr	r2, [pc, #32]	; (8004664 <prvCheckForValidListAndQueue+0x60>)
 8004642:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004644:	4b07      	ldr	r3, [pc, #28]	; (8004664 <prvCheckForValidListAndQueue+0x60>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d005      	beq.n	8004658 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800464c:	4b05      	ldr	r3, [pc, #20]	; (8004664 <prvCheckForValidListAndQueue+0x60>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	490b      	ldr	r1, [pc, #44]	; (8004680 <prvCheckForValidListAndQueue+0x7c>)
 8004652:	4618      	mov	r0, r3
 8004654:	f7fe fdb0 	bl	80031b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004658:	f000 f938 	bl	80048cc <vPortExitCritical>
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	20001018 	.word	0x20001018
 8004668:	20000fe8 	.word	0x20000fe8
 800466c:	20000ffc 	.word	0x20000ffc
 8004670:	20001010 	.word	0x20001010
 8004674:	20001014 	.word	0x20001014
 8004678:	200010c4 	.word	0x200010c4
 800467c:	20001024 	.word	0x20001024
 8004680:	08004ee0 	.word	0x08004ee0

08004684 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	3b04      	subs	r3, #4
 8004694:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800469c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3b04      	subs	r3, #4
 80046a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f023 0201 	bic.w	r2, r3, #1
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3b04      	subs	r3, #4
 80046b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046b4:	4a08      	ldr	r2, [pc, #32]	; (80046d8 <pxPortInitialiseStack+0x54>)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3b14      	subs	r3, #20
 80046be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	3b20      	subs	r3, #32
 80046ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046cc:	68fb      	ldr	r3, [r7, #12]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bc80      	pop	{r7}
 80046d6:	4770      	bx	lr
 80046d8:	080046dd 	.word	0x080046dd

080046dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	b085      	sub	sp, #20
 80046e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046e6:	4b12      	ldr	r3, [pc, #72]	; (8004730 <prvTaskExitError+0x54>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ee:	d00a      	beq.n	8004706 <prvTaskExitError+0x2a>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60fb      	str	r3, [r7, #12]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <prvTaskExitError+0x28>
	__asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	60bb      	str	r3, [r7, #8]
}
 8004718:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800471a:	bf00      	nop
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d0fc      	beq.n	800471c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004722:	bf00      	nop
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	2000000c 	.word	0x2000000c
	...

08004740 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004740:	4b07      	ldr	r3, [pc, #28]	; (8004760 <pxCurrentTCBConst2>)
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	6808      	ldr	r0, [r1, #0]
 8004746:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800474a:	f380 8809 	msr	PSP, r0
 800474e:	f3bf 8f6f 	isb	sy
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f380 8811 	msr	BASEPRI, r0
 800475a:	f04e 0e0d 	orr.w	lr, lr, #13
 800475e:	4770      	bx	lr

08004760 <pxCurrentTCBConst2>:
 8004760:	20000ae8 	.word	0x20000ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop

08004768 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004768:	4806      	ldr	r0, [pc, #24]	; (8004784 <prvPortStartFirstTask+0x1c>)
 800476a:	6800      	ldr	r0, [r0, #0]
 800476c:	6800      	ldr	r0, [r0, #0]
 800476e:	f380 8808 	msr	MSP, r0
 8004772:	b662      	cpsie	i
 8004774:	b661      	cpsie	f
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	f3bf 8f6f 	isb	sy
 800477e:	df00      	svc	0
 8004780:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004782:	bf00      	nop
 8004784:	e000ed08 	.word	0xe000ed08

08004788 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800478e:	4b32      	ldr	r3, [pc, #200]	; (8004858 <xPortStartScheduler+0xd0>)
 8004790:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	b2db      	uxtb	r3, r3
 8004798:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	22ff      	movs	r2, #255	; 0xff
 800479e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047a8:	78fb      	ldrb	r3, [r7, #3]
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <xPortStartScheduler+0xd4>)
 80047b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047b6:	4b2a      	ldr	r3, [pc, #168]	; (8004860 <xPortStartScheduler+0xd8>)
 80047b8:	2207      	movs	r2, #7
 80047ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047bc:	e009      	b.n	80047d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80047be:	4b28      	ldr	r3, [pc, #160]	; (8004860 <xPortStartScheduler+0xd8>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	4a26      	ldr	r2, [pc, #152]	; (8004860 <xPortStartScheduler+0xd8>)
 80047c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047da:	2b80      	cmp	r3, #128	; 0x80
 80047dc:	d0ef      	beq.n	80047be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <xPortStartScheduler+0xd8>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f1c3 0307 	rsb	r3, r3, #7
 80047e6:	2b04      	cmp	r3, #4
 80047e8:	d00a      	beq.n	8004800 <xPortStartScheduler+0x78>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	60bb      	str	r3, [r7, #8]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004800:	4b17      	ldr	r3, [pc, #92]	; (8004860 <xPortStartScheduler+0xd8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	4a16      	ldr	r2, [pc, #88]	; (8004860 <xPortStartScheduler+0xd8>)
 8004808:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800480a:	4b15      	ldr	r3, [pc, #84]	; (8004860 <xPortStartScheduler+0xd8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004812:	4a13      	ldr	r2, [pc, #76]	; (8004860 <xPortStartScheduler+0xd8>)
 8004814:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	b2da      	uxtb	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800481e:	4b11      	ldr	r3, [pc, #68]	; (8004864 <xPortStartScheduler+0xdc>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a10      	ldr	r2, [pc, #64]	; (8004864 <xPortStartScheduler+0xdc>)
 8004824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004828:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800482a:	4b0e      	ldr	r3, [pc, #56]	; (8004864 <xPortStartScheduler+0xdc>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a0d      	ldr	r2, [pc, #52]	; (8004864 <xPortStartScheduler+0xdc>)
 8004830:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004834:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004836:	f000 f8b9 	bl	80049ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800483a:	4b0b      	ldr	r3, [pc, #44]	; (8004868 <xPortStartScheduler+0xe0>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004840:	f7ff ff92 	bl	8004768 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004844:	f7ff f8be 	bl	80039c4 <vTaskSwitchContext>
	prvTaskExitError();
 8004848:	f7ff ff48 	bl	80046dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
 8004856:	bf00      	nop
 8004858:	e000e400 	.word	0xe000e400
 800485c:	20001114 	.word	0x20001114
 8004860:	20001118 	.word	0x20001118
 8004864:	e000ed20 	.word	0xe000ed20
 8004868:	2000000c 	.word	0x2000000c

0800486c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
}
 8004884:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <vPortEnterCritical+0x58>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3301      	adds	r3, #1
 800488c:	4a0d      	ldr	r2, [pc, #52]	; (80048c4 <vPortEnterCritical+0x58>)
 800488e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004890:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <vPortEnterCritical+0x58>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b01      	cmp	r3, #1
 8004896:	d10f      	bne.n	80048b8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <vPortEnterCritical+0x5c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <vPortEnterCritical+0x4c>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	603b      	str	r3, [r7, #0]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <vPortEnterCritical+0x4a>
	}
}
 80048b8:	bf00      	nop
 80048ba:	370c      	adds	r7, #12
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc80      	pop	{r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	2000000c 	.word	0x2000000c
 80048c8:	e000ed04 	.word	0xe000ed04

080048cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <vPortExitCritical+0x4c>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <vPortExitCritical+0x24>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	607b      	str	r3, [r7, #4]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80048f0:	4b09      	ldr	r3, [pc, #36]	; (8004918 <vPortExitCritical+0x4c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3b01      	subs	r3, #1
 80048f6:	4a08      	ldr	r2, [pc, #32]	; (8004918 <vPortExitCritical+0x4c>)
 80048f8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80048fa:	4b07      	ldr	r3, [pc, #28]	; (8004918 <vPortExitCritical+0x4c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d105      	bne.n	800490e <vPortExitCritical+0x42>
 8004902:	2300      	movs	r3, #0
 8004904:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f383 8811 	msr	BASEPRI, r3
}
 800490c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr
 8004918:	2000000c 	.word	0x2000000c
 800491c:	00000000 	.word	0x00000000

08004920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004920:	f3ef 8009 	mrs	r0, PSP
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	4b0d      	ldr	r3, [pc, #52]	; (8004960 <pxCurrentTCBConst>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004936:	f04f 0050 	mov.w	r0, #80	; 0x50
 800493a:	f380 8811 	msr	BASEPRI, r0
 800493e:	f7ff f841 	bl	80039c4 <vTaskSwitchContext>
 8004942:	f04f 0000 	mov.w	r0, #0
 8004946:	f380 8811 	msr	BASEPRI, r0
 800494a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004956:	f380 8809 	msr	PSP, r0
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	4770      	bx	lr

08004960 <pxCurrentTCBConst>:
 8004960:	20000ae8 	.word	0x20000ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop

08004968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
	__asm volatile
 800496e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004972:	f383 8811 	msr	BASEPRI, r3
 8004976:	f3bf 8f6f 	isb	sy
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	607b      	str	r3, [r7, #4]
}
 8004980:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004982:	f7fe ff61 	bl	8003848 <xTaskIncrementTick>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800498c:	4b06      	ldr	r3, [pc, #24]	; (80049a8 <SysTick_Handler+0x40>)
 800498e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	2300      	movs	r3, #0
 8004996:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	f383 8811 	msr	BASEPRI, r3
}
 800499e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049a0:	bf00      	nop
 80049a2:	3708      	adds	r7, #8
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	e000ed04 	.word	0xe000ed04

080049ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ac:	b480      	push	{r7}
 80049ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <vPortSetupTimerInterrupt+0x30>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049b6:	4b0a      	ldr	r3, [pc, #40]	; (80049e0 <vPortSetupTimerInterrupt+0x34>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049bc:	4b09      	ldr	r3, [pc, #36]	; (80049e4 <vPortSetupTimerInterrupt+0x38>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <vPortSetupTimerInterrupt+0x3c>)
 80049c2:	fba2 2303 	umull	r2, r3, r2, r3
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	4a08      	ldr	r2, [pc, #32]	; (80049ec <vPortSetupTimerInterrupt+0x40>)
 80049ca:	3b01      	subs	r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ce:	4b03      	ldr	r3, [pc, #12]	; (80049dc <vPortSetupTimerInterrupt+0x30>)
 80049d0:	2207      	movs	r2, #7
 80049d2:	601a      	str	r2, [r3, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bc80      	pop	{r7}
 80049da:	4770      	bx	lr
 80049dc:	e000e010 	.word	0xe000e010
 80049e0:	e000e018 	.word	0xe000e018
 80049e4:	20000000 	.word	0x20000000
 80049e8:	10624dd3 	.word	0x10624dd3
 80049ec:	e000e014 	.word	0xe000e014

080049f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049f6:	f3ef 8305 	mrs	r3, IPSR
 80049fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	d914      	bls.n	8004a2c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a02:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <vPortValidateInterruptPriority+0x6c>)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4413      	add	r3, r2
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a0c:	4b14      	ldr	r3, [pc, #80]	; (8004a60 <vPortValidateInterruptPriority+0x70>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	7afa      	ldrb	r2, [r7, #11]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d20a      	bcs.n	8004a2c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1a:	f383 8811 	msr	BASEPRI, r3
 8004a1e:	f3bf 8f6f 	isb	sy
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	607b      	str	r3, [r7, #4]
}
 8004a28:	bf00      	nop
 8004a2a:	e7fe      	b.n	8004a2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a2c:	4b0d      	ldr	r3, [pc, #52]	; (8004a64 <vPortValidateInterruptPriority+0x74>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a34:	4b0c      	ldr	r3, [pc, #48]	; (8004a68 <vPortValidateInterruptPriority+0x78>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d90a      	bls.n	8004a52 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	603b      	str	r3, [r7, #0]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <vPortValidateInterruptPriority+0x60>
	}
 8004a52:	bf00      	nop
 8004a54:	3714      	adds	r7, #20
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bc80      	pop	{r7}
 8004a5a:	4770      	bx	lr
 8004a5c:	e000e3f0 	.word	0xe000e3f0
 8004a60:	20001114 	.word	0x20001114
 8004a64:	e000ed0c 	.word	0xe000ed0c
 8004a68:	20001118 	.word	0x20001118

08004a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08a      	sub	sp, #40	; 0x28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a74:	2300      	movs	r3, #0
 8004a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a78:	f7fe fe2c 	bl	80036d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a7c:	4b58      	ldr	r3, [pc, #352]	; (8004be0 <pvPortMalloc+0x174>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a84:	f000 f910 	bl	8004ca8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a88:	4b56      	ldr	r3, [pc, #344]	; (8004be4 <pvPortMalloc+0x178>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4013      	ands	r3, r2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f040 808e 	bne.w	8004bb2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d01d      	beq.n	8004ad8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f003 0307 	and.w	r3, r3, #7
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f023 0307 	bic.w	r3, r3, #7
 8004ab4:	3308      	adds	r3, #8
 8004ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <pvPortMalloc+0x6c>
	__asm volatile
 8004ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	617b      	str	r3, [r7, #20]
}
 8004ad4:	bf00      	nop
 8004ad6:	e7fe      	b.n	8004ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d069      	beq.n	8004bb2 <pvPortMalloc+0x146>
 8004ade:	4b42      	ldr	r3, [pc, #264]	; (8004be8 <pvPortMalloc+0x17c>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d864      	bhi.n	8004bb2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ae8:	4b40      	ldr	r3, [pc, #256]	; (8004bec <pvPortMalloc+0x180>)
 8004aea:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004aec:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <pvPortMalloc+0x180>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004af2:	e004      	b.n	8004afe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d903      	bls.n	8004b10 <pvPortMalloc+0xa4>
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b10:	4b33      	ldr	r3, [pc, #204]	; (8004be0 <pvPortMalloc+0x174>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d04b      	beq.n	8004bb2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2208      	movs	r2, #8
 8004b20:	4413      	add	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	6a3b      	ldr	r3, [r7, #32]
 8004b2a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	685a      	ldr	r2, [r3, #4]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	2308      	movs	r3, #8
 8004b36:	005b      	lsls	r3, r3, #1
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d91f      	bls.n	8004b7c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4413      	add	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 0307 	and.w	r3, r3, #7
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <pvPortMalloc+0xf8>
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	f383 8811 	msr	BASEPRI, r3
 8004b56:	f3bf 8f6f 	isb	sy
 8004b5a:	f3bf 8f4f 	dsb	sy
 8004b5e:	613b      	str	r3, [r7, #16]
}
 8004b60:	bf00      	nop
 8004b62:	e7fe      	b.n	8004b62 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	1ad2      	subs	r2, r2, r3
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b76:	69b8      	ldr	r0, [r7, #24]
 8004b78:	f000 f8f8 	bl	8004d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <pvPortMalloc+0x17c>)
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	4a18      	ldr	r2, [pc, #96]	; (8004be8 <pvPortMalloc+0x17c>)
 8004b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <pvPortMalloc+0x17c>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4b18      	ldr	r3, [pc, #96]	; (8004bf0 <pvPortMalloc+0x184>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d203      	bcs.n	8004b9e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b96:	4b14      	ldr	r3, [pc, #80]	; (8004be8 <pvPortMalloc+0x17c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a15      	ldr	r2, [pc, #84]	; (8004bf0 <pvPortMalloc+0x184>)
 8004b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	4b10      	ldr	r3, [pc, #64]	; (8004be4 <pvPortMalloc+0x178>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	431a      	orrs	r2, r3
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004bb2:	f7fe fd9d 	bl	80036f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d00a      	beq.n	8004bd6 <pvPortMalloc+0x16a>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	60fb      	str	r3, [r7, #12]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <pvPortMalloc+0x168>
	return pvReturn;
 8004bd6:	69fb      	ldr	r3, [r7, #28]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3728      	adds	r7, #40	; 0x28
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	20001d24 	.word	0x20001d24
 8004be4:	20001d30 	.word	0x20001d30
 8004be8:	20001d28 	.word	0x20001d28
 8004bec:	20001d1c 	.word	0x20001d1c
 8004bf0:	20001d2c 	.word	0x20001d2c

08004bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d048      	beq.n	8004c98 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c06:	2308      	movs	r3, #8
 8004c08:	425b      	negs	r3, r3
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <vPortFree+0xac>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10a      	bne.n	8004c38 <vPortFree+0x44>
	__asm volatile
 8004c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c26:	f383 8811 	msr	BASEPRI, r3
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	f3bf 8f4f 	dsb	sy
 8004c32:	60fb      	str	r3, [r7, #12]
}
 8004c34:	bf00      	nop
 8004c36:	e7fe      	b.n	8004c36 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <vPortFree+0x62>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	60bb      	str	r3, [r7, #8]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <vPortFree+0xac>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4013      	ands	r3, r2
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d019      	beq.n	8004c98 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d115      	bne.n	8004c98 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b0b      	ldr	r3, [pc, #44]	; (8004ca0 <vPortFree+0xac>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	43db      	mvns	r3, r3
 8004c76:	401a      	ands	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c7c:	f7fe fd2a 	bl	80036d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b07      	ldr	r3, [pc, #28]	; (8004ca4 <vPortFree+0xb0>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4413      	add	r3, r2
 8004c8a:	4a06      	ldr	r2, [pc, #24]	; (8004ca4 <vPortFree+0xb0>)
 8004c8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c8e:	6938      	ldr	r0, [r7, #16]
 8004c90:	f000 f86c 	bl	8004d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004c94:	f7fe fd2c 	bl	80036f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001d30 	.word	0x20001d30
 8004ca4:	20001d28 	.word	0x20001d28

08004ca8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004cb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb4:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <prvHeapInit+0xac>)
 8004cb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3307      	adds	r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <prvHeapInit+0xac>)
 8004cd8:	4413      	add	r3, r2
 8004cda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <prvHeapInit+0xb0>)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce6:	4b1c      	ldr	r3, [pc, #112]	; (8004d58 <prvHeapInit+0xb0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf4:	2208      	movs	r2, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1a9b      	subs	r3, r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0307 	bic.w	r3, r3, #7
 8004d02:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <prvHeapInit+0xb4>)
 8004d08:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d0a:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <prvHeapInit+0xb4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <prvHeapInit+0xb4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	1ad2      	subs	r2, r2, r3
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d28:	4b0c      	ldr	r3, [pc, #48]	; (8004d5c <prvHeapInit+0xb4>)
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	4a0a      	ldr	r2, [pc, #40]	; (8004d60 <prvHeapInit+0xb8>)
 8004d36:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <prvHeapInit+0xbc>)
 8004d3e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d40:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <prvHeapInit+0xc0>)
 8004d42:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d46:	601a      	str	r2, [r3, #0]
}
 8004d48:	bf00      	nop
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bc80      	pop	{r7}
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	2000111c 	.word	0x2000111c
 8004d58:	20001d1c 	.word	0x20001d1c
 8004d5c:	20001d24 	.word	0x20001d24
 8004d60:	20001d2c 	.word	0x20001d2c
 8004d64:	20001d28 	.word	0x20001d28
 8004d68:	20001d30 	.word	0x20001d30

08004d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d74:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <prvInsertBlockIntoFreeList+0xa8>)
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	e002      	b.n	8004d80 <prvInsertBlockIntoFreeList+0x14>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d8f7      	bhi.n	8004d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4413      	add	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d108      	bne.n	8004dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	441a      	add	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d118      	bne.n	8004df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b14      	ldr	r3, [pc, #80]	; (8004e18 <prvInsertBlockIntoFreeList+0xac>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d00d      	beq.n	8004dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	441a      	add	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e008      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dea:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <prvInsertBlockIntoFreeList+0xac>)
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e003      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d002      	beq.n	8004e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0a:	bf00      	nop
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	20001d1c 	.word	0x20001d1c
 8004e18:	20001d24 	.word	0x20001d24

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	2600      	movs	r6, #0
 8004e20:	4d0c      	ldr	r5, [pc, #48]	; (8004e54 <__libc_init_array+0x38>)
 8004e22:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e24:	1b64      	subs	r4, r4, r5
 8004e26:	10a4      	asrs	r4, r4, #2
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	f000 f830 	bl	8004e90 <_init>
 8004e30:	2600      	movs	r6, #0
 8004e32:	4d0a      	ldr	r5, [pc, #40]	; (8004e5c <__libc_init_array+0x40>)
 8004e34:	4c0a      	ldr	r4, [pc, #40]	; (8004e60 <__libc_init_array+0x44>)
 8004e36:	1b64      	subs	r4, r4, r5
 8004e38:	10a4      	asrs	r4, r4, #2
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08004f48 	.word	0x08004f48
 8004e58:	08004f48 	.word	0x08004f48
 8004e5c:	08004f48 	.word	0x08004f48
 8004e60:	08004f4c 	.word	0x08004f4c

08004e64 <memcpy>:
 8004e64:	440a      	add	r2, r1
 8004e66:	4291      	cmp	r1, r2
 8004e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	4770      	bx	lr
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e76:	4291      	cmp	r1, r2
 8004e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7c:	d1f9      	bne.n	8004e72 <memcpy+0xe>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <memset>:
 8004e80:	4603      	mov	r3, r0
 8004e82:	4402      	add	r2, r0
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d100      	bne.n	8004e8a <memset+0xa>
 8004e88:	4770      	bx	lr
 8004e8a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e8e:	e7f9      	b.n	8004e84 <memset+0x4>

08004e90 <_init>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr

08004e9c <_fini>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	bf00      	nop
 8004ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ea2:	bc08      	pop	{r3}
 8004ea4:	469e      	mov	lr, r3
 8004ea6:	4770      	bx	lr
