
STM32_NUCLEO_mgr_free_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000559c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005784  08005784  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005784  08005784  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005788  08005788  00015788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800578c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e98  20000010  0800579c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001ea8  0800579c  00021ea8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019154  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034fc  00000000  00000000  0003918d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001308  00000000  00000000  0003db00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003624  00000000  00000000  0003ee08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c9e  00000000  00000000  0004242c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098047  00000000  00000000  000580ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f0111  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055a4  00000000  00000000  000f0164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08005694 	.word	0x08005694

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08005694 	.word	0x08005694

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000154:	f000 fc82 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000158:	f000 f82c 	bl	80001b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015c:	f000 f9f2 	bl	8000544 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000160:	f000 f940 	bl	80003e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f8f8 	bl	8000358 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000168:	f000 f87a 	bl	8000260 <MX_ADC1_Init>
  MX_ADC2_Init();
 800016c:	f000 f8b6 	bl	80002dc <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000170:	f002 fd98 	bl	8002ca4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of USART_Task */
  USART_TaskHandle = osThreadNew(USART_Process, NULL, &USART_Task_attributes);
 8000174:	4a09      	ldr	r2, [pc, #36]	; (800019c <main+0x4c>)
 8000176:	2100      	movs	r1, #0
 8000178:	4809      	ldr	r0, [pc, #36]	; (80001a0 <main+0x50>)
 800017a:	f002 fdf9 	bl	8002d70 <osThreadNew>
 800017e:	4603      	mov	r3, r0
 8000180:	4a08      	ldr	r2, [pc, #32]	; (80001a4 <main+0x54>)
 8000182:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_Task */
  GPIO_TaskHandle = osThreadNew(GPIO_Process, NULL, &GPIO_Task_attributes);
 8000184:	4a08      	ldr	r2, [pc, #32]	; (80001a8 <main+0x58>)
 8000186:	2100      	movs	r1, #0
 8000188:	4808      	ldr	r0, [pc, #32]	; (80001ac <main+0x5c>)
 800018a:	f002 fdf1 	bl	8002d70 <osThreadNew>
 800018e:	4603      	mov	r3, r0
 8000190:	4a07      	ldr	r2, [pc, #28]	; (80001b0 <main+0x60>)
 8000192:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000194:	f002 fdb8 	bl	8002d08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000198:	e7fe      	b.n	8000198 <main+0x48>
 800019a:	bf00      	nop
 800019c:	08005724 	.word	0x08005724
 80001a0:	0800064d 	.word	0x0800064d
 80001a4:	20001dd8 	.word	0x20001dd8
 80001a8:	08005748 	.word	0x08005748
 80001ac:	08000679 	.word	0x08000679
 80001b0:	20001dd4 	.word	0x20001dd4

080001b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b094      	sub	sp, #80	; 0x50
 80001b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001be:	2228      	movs	r2, #40	; 0x28
 80001c0:	2100      	movs	r1, #0
 80001c2:	4618      	mov	r0, r3
 80001c4:	f005 fa4c 	bl	8005660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c8:	f107 0314 	add.w	r3, r7, #20
 80001cc:	2200      	movs	r2, #0
 80001ce:	601a      	str	r2, [r3, #0]
 80001d0:	605a      	str	r2, [r3, #4]
 80001d2:	609a      	str	r2, [r3, #8]
 80001d4:	60da      	str	r2, [r3, #12]
 80001d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e4:	2302      	movs	r3, #2
 80001e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e8:	2301      	movs	r3, #1
 80001ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ec:	2310      	movs	r3, #16
 80001ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001f4:	2300      	movs	r3, #0
 80001f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000202:	4618      	mov	r0, r3
 8000204:	f001 f97a 	bl	80014fc <HAL_RCC_OscConfig>
 8000208:	4603      	mov	r3, r0
 800020a:	2b00      	cmp	r3, #0
 800020c:	d001      	beq.n	8000212 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800020e:	f000 fa4b 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000212:	230f      	movs	r3, #15
 8000214:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000216:	2302      	movs	r3, #2
 8000218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800021e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000222:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000224:	2300      	movs	r3, #0
 8000226:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fbe4 	bl	80019fc <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800023a:	f000 fa35 	bl	80006a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800023e:	2302      	movs	r3, #2
 8000240:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000242:	2300      	movs	r3, #0
 8000244:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000246:	1d3b      	adds	r3, r7, #4
 8000248:	4618      	mov	r0, r3
 800024a:	f001 fda1 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000254:	f000 fa28 	bl	80006a8 <Error_Handler>
  }
}
 8000258:	bf00      	nop
 800025a:	3750      	adds	r7, #80	; 0x50
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000266:	1d3b      	adds	r3, r7, #4
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]
 800026c:	605a      	str	r2, [r3, #4]
 800026e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000272:	4a19      	ldr	r2, [pc, #100]	; (80002d8 <MX_ADC1_Init+0x78>)
 8000274:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000276:	4b17      	ldr	r3, [pc, #92]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000278:	2200      	movs	r2, #0
 800027a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800027c:	4b15      	ldr	r3, [pc, #84]	; (80002d4 <MX_ADC1_Init+0x74>)
 800027e:	2200      	movs	r2, #0
 8000280:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000284:	2200      	movs	r2, #0
 8000286:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000288:	4b12      	ldr	r3, [pc, #72]	; (80002d4 <MX_ADC1_Init+0x74>)
 800028a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800028e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000290:	4b10      	ldr	r3, [pc, #64]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000296:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <MX_ADC1_Init+0x74>)
 8000298:	2201      	movs	r2, #1
 800029a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <MX_ADC1_Init+0x74>)
 800029e:	f000 fc0f 	bl	8000ac0 <HAL_ADC_Init>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002a8:	f000 f9fe 	bl	80006a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80002ac:	230a      	movs	r3, #10
 80002ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002b0:	2301      	movs	r3, #1
 80002b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	4619      	mov	r1, r3
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <MX_ADC1_Init+0x74>)
 80002be:	f000 fcd7 	bl	8000c70 <HAL_ADC_ConfigChannel>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002c8:	f000 f9ee 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20001d64 	.word	0x20001d64
 80002d8:	40012400 	.word	0x40012400

080002dc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b084      	sub	sp, #16
 80002e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	2200      	movs	r2, #0
 80002e6:	601a      	str	r2, [r3, #0]
 80002e8:	605a      	str	r2, [r3, #4]
 80002ea:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <MX_ADC2_Init+0x74>)
 80002ee:	4a19      	ldr	r2, [pc, #100]	; (8000354 <MX_ADC2_Init+0x78>)
 80002f0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002f2:	4b17      	ldr	r3, [pc, #92]	; (8000350 <MX_ADC2_Init+0x74>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <MX_ADC2_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80002fe:	4b14      	ldr	r3, [pc, #80]	; (8000350 <MX_ADC2_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000304:	4b12      	ldr	r3, [pc, #72]	; (8000350 <MX_ADC2_Init+0x74>)
 8000306:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800030a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030c:	4b10      	ldr	r3, [pc, #64]	; (8000350 <MX_ADC2_Init+0x74>)
 800030e:	2200      	movs	r2, #0
 8000310:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <MX_ADC2_Init+0x74>)
 8000314:	2201      	movs	r2, #1
 8000316:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000318:	480d      	ldr	r0, [pc, #52]	; (8000350 <MX_ADC2_Init+0x74>)
 800031a:	f000 fbd1 	bl	8000ac0 <HAL_ADC_Init>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000324:	f000 f9c0 	bl	80006a8 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000328:	230b      	movs	r3, #11
 800032a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800032c:	2301      	movs	r3, #1
 800032e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	4619      	mov	r1, r3
 8000338:	4805      	ldr	r0, [pc, #20]	; (8000350 <MX_ADC2_Init+0x74>)
 800033a:	f000 fc99 	bl	8000c70 <HAL_ADC_ConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000344:	f000 f9b0 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	3710      	adds	r7, #16
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20001d34 	.word	0x20001d34
 8000354:	40012800 	.word	0x40012800

08000358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b084      	sub	sp, #16
 800035c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio;
  gpio.Mode = GPIO_MODE_AF_PP;
 800035e:	2302      	movs	r3, #2
 8000360:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_9;
 8000362:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000366:	603b      	str	r3, [r7, #0]
  gpio.Pull = GPIO_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	60bb      	str	r3, [r7, #8]
  gpio.Speed = GPIO_SPEED_FREQ_LOW;
 800036c:	2302      	movs	r3, #2
 800036e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &gpio);
 8000370:	463b      	mov	r3, r7
 8000372:	4619      	mov	r1, r3
 8000374:	4818      	ldr	r0, [pc, #96]	; (80003d8 <MX_USART1_UART_Init+0x80>)
 8000376:	f000 ff03 	bl	8001180 <HAL_GPIO_Init>

  gpio.Mode = GPIO_MODE_AF_INPUT;
 800037a:	2300      	movs	r3, #0
 800037c:	607b      	str	r3, [r7, #4]
  gpio.Pin = GPIO_PIN_10;
 800037e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000382:	603b      	str	r3, [r7, #0]
  HAL_GPIO_Init(GPIOA, &gpio);
 8000384:	463b      	mov	r3, r7
 8000386:	4619      	mov	r1, r3
 8000388:	4813      	ldr	r0, [pc, #76]	; (80003d8 <MX_USART1_UART_Init+0x80>)
 800038a:	f000 fef9 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800038e:	4b13      	ldr	r3, [pc, #76]	; (80003dc <MX_USART1_UART_Init+0x84>)
 8000390:	4a13      	ldr	r2, [pc, #76]	; (80003e0 <MX_USART1_UART_Init+0x88>)
 8000392:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000394:	4b11      	ldr	r3, [pc, #68]	; (80003dc <MX_USART1_UART_Init+0x84>)
 8000396:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800039a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <MX_USART1_UART_Init+0x84>)
 800039e:	2200      	movs	r2, #0
 80003a0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003a2:	4b0e      	ldr	r3, [pc, #56]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003a8:	4b0c      	ldr	r3, [pc, #48]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003ae:	4b0b      	ldr	r3, [pc, #44]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003b0:	220c      	movs	r2, #12
 80003b2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003b4:	4b09      	ldr	r3, [pc, #36]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003ba:	4b08      	ldr	r3, [pc, #32]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003bc:	2200      	movs	r2, #0
 80003be:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003c0:	4806      	ldr	r0, [pc, #24]	; (80003dc <MX_USART1_UART_Init+0x84>)
 80003c2:	f001 ffe5 	bl	8002390 <HAL_UART_Init>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d001      	beq.n	80003d0 <MX_USART1_UART_Init+0x78>
  {
    Error_Handler();
 80003cc:	f000 f96c 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003d0:	bf00      	nop
 80003d2:	3710      	adds	r7, #16
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40010800 	.word	0x40010800
 80003dc:	20001d94 	.word	0x20001d94
 80003e0:	40013800 	.word	0x40013800

080003e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80003e8:	4b11      	ldr	r3, [pc, #68]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003ea:	4a12      	ldr	r2, [pc, #72]	; (8000434 <MX_USART2_UART_Init+0x50>)
 80003ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80003ee:	4b10      	ldr	r3, [pc, #64]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80003f6:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80003fc:	4b0c      	ldr	r3, [pc, #48]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000408:	4b09      	ldr	r3, [pc, #36]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800040a:	220c      	movs	r2, #12
 800040c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800040e:	4b08      	ldr	r3, [pc, #32]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 8000416:	2200      	movs	r2, #0
 8000418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800041a:	4805      	ldr	r0, [pc, #20]	; (8000430 <MX_USART2_UART_Init+0x4c>)
 800041c:	f001 ffb8 	bl	8002390 <HAL_UART_Init>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000426:	f000 f93f 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20001ddc 	.word	0x20001ddc
 8000434:	40004400 	.word	0x40004400

08000438 <USART_Process_Data>:

static void USART_Process_Data(const char *data)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(strncmp(data, "left", 4) == 0)
 8000440:	2204      	movs	r2, #4
 8000442:	4939      	ldr	r1, [pc, #228]	; (8000528 <USART_Process_Data+0xf0>)
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f005 f913 	bl	8005670 <strncmp>
 800044a:	4603      	mov	r3, r0
 800044c:	2b00      	cmp	r3, #0
 800044e:	d111      	bne.n	8000474 <USART_Process_Data+0x3c>
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 8000450:	2201      	movs	r2, #1
 8000452:	2102      	movs	r1, #2
 8000454:	4835      	ldr	r0, [pc, #212]	; (800052c <USART_Process_Data+0xf4>)
 8000456:	f001 f817 	bl	8001488 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800045a:	2201      	movs	r2, #1
 800045c:	2101      	movs	r1, #1
 800045e:	4833      	ldr	r0, [pc, #204]	; (800052c <USART_Process_Data+0xf4>)
 8000460:	f001 f812 	bl	8001488 <HAL_GPIO_WritePin>
    vTaskDelay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f003 fc8b 	bl	8003d80 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2101      	movs	r1, #1
 800046e:	482f      	ldr	r0, [pc, #188]	; (800052c <USART_Process_Data+0xf4>)
 8000470:	f001 f80a 	bl	8001488 <HAL_GPIO_WritePin>
  }
  if(strncmp(data, "righ", 4) == 0)
 8000474:	2204      	movs	r2, #4
 8000476:	492e      	ldr	r1, [pc, #184]	; (8000530 <USART_Process_Data+0xf8>)
 8000478:	6878      	ldr	r0, [r7, #4]
 800047a:	f005 f8f9 	bl	8005670 <strncmp>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d111      	bne.n	80004a8 <USART_Process_Data+0x70>
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2102      	movs	r1, #2
 8000488:	4828      	ldr	r0, [pc, #160]	; (800052c <USART_Process_Data+0xf4>)
 800048a:	f000 fffd 	bl	8001488 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2101      	movs	r1, #1
 8000492:	4826      	ldr	r0, [pc, #152]	; (800052c <USART_Process_Data+0xf4>)
 8000494:	f000 fff8 	bl	8001488 <HAL_GPIO_WritePin>
    vTaskDelay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f003 fc71 	bl	8003d80 <vTaskDelay>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4822      	ldr	r0, [pc, #136]	; (800052c <USART_Process_Data+0xf4>)
 80004a4:	f000 fff0 	bl	8001488 <HAL_GPIO_WritePin>
  }
  if(strncmp(data, "meas", 4) == 0)
 80004a8:	2204      	movs	r2, #4
 80004aa:	4922      	ldr	r1, [pc, #136]	; (8000534 <USART_Process_Data+0xfc>)
 80004ac:	6878      	ldr	r0, [r7, #4]
 80004ae:	f005 f8df 	bl	8005670 <strncmp>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d106      	bne.n	80004c6 <USART_Process_Data+0x8e>
  {
         HAL_UART_Transmit(&huart1, (uint8_t *) "current: x, voltage: y", 22, 1000);
 80004b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004bc:	2216      	movs	r2, #22
 80004be:	491e      	ldr	r1, [pc, #120]	; (8000538 <USART_Process_Data+0x100>)
 80004c0:	481e      	ldr	r0, [pc, #120]	; (800053c <USART_Process_Data+0x104>)
 80004c2:	f001 ffb2 	bl	800242a <HAL_UART_Transmit>
  }
  if(strncmp(data, "te_1", 4) == 0)
 80004c6:	2204      	movs	r2, #4
 80004c8:	491d      	ldr	r1, [pc, #116]	; (8000540 <USART_Process_Data+0x108>)
 80004ca:	6878      	ldr	r0, [r7, #4]
 80004cc:	f005 f8d0 	bl	8005670 <strncmp>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d124      	bne.n	8000520 <USART_Process_Data+0xe8>
  {
    for (int i=0; i < 100; i++)
 80004d6:	2300      	movs	r3, #0
 80004d8:	60fb      	str	r3, [r7, #12]
 80004da:	e01e      	b.n	800051a <USART_Process_Data+0xe2>
    {
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 80004dc:	2201      	movs	r2, #1
 80004de:	2102      	movs	r1, #2
 80004e0:	4812      	ldr	r0, [pc, #72]	; (800052c <USART_Process_Data+0xf4>)
 80004e2:	f000 ffd1 	bl	8001488 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2101      	movs	r1, #1
 80004ea:	4810      	ldr	r0, [pc, #64]	; (800052c <USART_Process_Data+0xf4>)
 80004ec:	f000 ffcc 	bl	8001488 <HAL_GPIO_WritePin>
      vTaskDelay(1);
 80004f0:	2001      	movs	r0, #1
 80004f2:	f003 fc45 	bl	8003d80 <vTaskDelay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80004f6:	2200      	movs	r2, #0
 80004f8:	2101      	movs	r1, #1
 80004fa:	480c      	ldr	r0, [pc, #48]	; (800052c <USART_Process_Data+0xf4>)
 80004fc:	f000 ffc4 	bl	8001488 <HAL_GPIO_WritePin>
      HAL_UART_Transmit(&huart1, (uint8_t *) "current: x, voltage: y", 22, 1000);
 8000500:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000504:	2216      	movs	r2, #22
 8000506:	490c      	ldr	r1, [pc, #48]	; (8000538 <USART_Process_Data+0x100>)
 8000508:	480c      	ldr	r0, [pc, #48]	; (800053c <USART_Process_Data+0x104>)
 800050a:	f001 ff8e 	bl	800242a <HAL_UART_Transmit>
      vTaskDelay(100);
 800050e:	2064      	movs	r0, #100	; 0x64
 8000510:	f003 fc36 	bl	8003d80 <vTaskDelay>
    for (int i=0; i < 100; i++)
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	3301      	adds	r3, #1
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	2b63      	cmp	r3, #99	; 0x63
 800051e:	dddd      	ble.n	80004dc <USART_Process_Data+0xa4>
    }
  }
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	080056c4 	.word	0x080056c4
 800052c:	40010c00 	.word	0x40010c00
 8000530:	080056cc 	.word	0x080056cc
 8000534:	080056d4 	.word	0x080056d4
 8000538:	080056dc 	.word	0x080056dc
 800053c:	20001d94 	.word	0x20001d94
 8000540:	080056f4 	.word	0x080056f4

08000544 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	f107 0310 	add.w	r3, r7, #16
 800054e:	2200      	movs	r2, #0
 8000550:	601a      	str	r2, [r3, #0]
 8000552:	605a      	str	r2, [r3, #4]
 8000554:	609a      	str	r2, [r3, #8]
 8000556:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000558:	4b37      	ldr	r3, [pc, #220]	; (8000638 <MX_GPIO_Init+0xf4>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a36      	ldr	r2, [pc, #216]	; (8000638 <MX_GPIO_Init+0xf4>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b34      	ldr	r3, [pc, #208]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f003 0310 	and.w	r3, r3, #16
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000570:	4b31      	ldr	r3, [pc, #196]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	4a30      	ldr	r2, [pc, #192]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000576:	f043 0320 	orr.w	r3, r3, #32
 800057a:	6193      	str	r3, [r2, #24]
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <MX_GPIO_Init+0xf4>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	f003 0320 	and.w	r3, r3, #32
 8000584:	60bb      	str	r3, [r7, #8]
 8000586:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000588:	4b2b      	ldr	r3, [pc, #172]	; (8000638 <MX_GPIO_Init+0xf4>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a2a      	ldr	r2, [pc, #168]	; (8000638 <MX_GPIO_Init+0xf4>)
 800058e:	f043 0304 	orr.w	r3, r3, #4
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b28      	ldr	r3, [pc, #160]	; (8000638 <MX_GPIO_Init+0xf4>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f003 0304 	and.w	r3, r3, #4
 800059c:	607b      	str	r3, [r7, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a0:	4b25      	ldr	r3, [pc, #148]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005a2:	699b      	ldr	r3, [r3, #24]
 80005a4:	4a24      	ldr	r2, [pc, #144]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005a6:	f043 0308 	orr.w	r3, r3, #8
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b22      	ldr	r3, [pc, #136]	; (8000638 <MX_GPIO_Init+0xf4>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f003 0308 	and.w	r3, r3, #8
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2120      	movs	r1, #32
 80005bc:	481f      	ldr	r0, [pc, #124]	; (800063c <MX_GPIO_Init+0xf8>)
 80005be:	f000 ff63 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2107      	movs	r1, #7
 80005c6:	481e      	ldr	r0, [pc, #120]	; (8000640 <MX_GPIO_Init+0xfc>)
 80005c8:	f000 ff5e 	bl	8001488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_GPIO_Init+0x100>)
 80005d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <MX_GPIO_Init+0x104>)
 80005e2:	f000 fdcd 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e6:	2320      	movs	r3, #32
 80005e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ea:	2301      	movs	r3, #1
 80005ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005f6:	f107 0310 	add.w	r3, r7, #16
 80005fa:	4619      	mov	r1, r3
 80005fc:	480f      	ldr	r0, [pc, #60]	; (800063c <MX_GPIO_Init+0xf8>)
 80005fe:	f000 fdbf 	bl	8001180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000602:	2307      	movs	r3, #7
 8000604:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000606:	2301      	movs	r3, #1
 8000608:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060a:	2300      	movs	r3, #0
 800060c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060e:	2302      	movs	r3, #2
 8000610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000612:	f107 0310 	add.w	r3, r7, #16
 8000616:	4619      	mov	r1, r3
 8000618:	4809      	ldr	r0, [pc, #36]	; (8000640 <MX_GPIO_Init+0xfc>)
 800061a:	f000 fdb1 	bl	8001180 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800061e:	2200      	movs	r2, #0
 8000620:	2105      	movs	r1, #5
 8000622:	2028      	movs	r0, #40	; 0x28
 8000624:	f000 fd0b 	bl	800103e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000628:	2028      	movs	r0, #40	; 0x28
 800062a:	f000 fd24 	bl	8001076 <HAL_NVIC_EnableIRQ>

}
 800062e:	bf00      	nop
 8000630:	3720      	adds	r7, #32
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40021000 	.word	0x40021000
 800063c:	40010800 	.word	0x40010800
 8000640:	40010c00 	.word	0x40010c00
 8000644:	10110000 	.word	0x10110000
 8000648:	40011000 	.word	0x40011000

0800064c <USART_Process>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_USART_Process */
void USART_Process(void *argument)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 4, 100) == HAL_OK)
 8000654:	2364      	movs	r3, #100	; 0x64
 8000656:	2204      	movs	r2, #4
 8000658:	4905      	ldr	r1, [pc, #20]	; (8000670 <USART_Process+0x24>)
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <USART_Process+0x28>)
 800065c:	f001 ff77 	bl	800254e <HAL_UART_Receive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1f6      	bne.n	8000654 <USART_Process+0x8>
    {
      USART_Process_Data(RingBufferData_Rx);
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <USART_Process+0x24>)
 8000668:	f7ff fee6 	bl	8000438 <USART_Process_Data>
    if( HAL_UART_Receive(&huart1, (uint8_t *) RingBufferData_Rx, 4, 100) == HAL_OK)
 800066c:	e7f2      	b.n	8000654 <USART_Process+0x8>
 800066e:	bf00      	nop
 8000670:	2000002c 	.word	0x2000002c
 8000674:	20001d94 	.word	0x20001d94

08000678 <GPIO_Process>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GPIO_Process */
void GPIO_Process(void *argument)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_Process */
  /* Infinite loop */
  for(;;)
 8000680:	e7fe      	b.n	8000680 <GPIO_Process+0x8>
	...

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000696:	f000 f9f7 	bl	8000a88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40000800 	.word	0x40000800

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <HAL_MspInit+0x68>)
 80006bc:	699b      	ldr	r3, [r3, #24]
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <HAL_MspInit+0x68>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6193      	str	r3, [r2, #24]
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d2:	4b12      	ldr	r3, [pc, #72]	; (800071c <HAL_MspInit+0x68>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <HAL_MspInit+0x68>)
 80006d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006dc:	61d3      	str	r3, [r2, #28]
 80006de:	4b0f      	ldr	r3, [pc, #60]	; (800071c <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006ea:	2200      	movs	r2, #0
 80006ec:	210f      	movs	r1, #15
 80006ee:	f06f 0001 	mvn.w	r0, #1
 80006f2:	f000 fca4 	bl	800103e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006f6:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <HAL_MspInit+0x6c>)
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <HAL_MspInit+0x6c>)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000712:	bf00      	nop
 8000714:	3710      	adds	r7, #16
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40021000 	.word	0x40021000
 8000720:	40010000 	.word	0x40010000

08000724 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072c:	f107 0318 	add.w	r3, r7, #24
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a28      	ldr	r2, [pc, #160]	; (80007e0 <HAL_ADC_MspInit+0xbc>)
 8000740:	4293      	cmp	r3, r2
 8000742:	d122      	bne.n	800078a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a26      	ldr	r2, [pc, #152]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 800074a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b24      	ldr	r3, [pc, #144]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075c:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	4a20      	ldr	r2, [pc, #128]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 8000762:	f043 0310 	orr.w	r3, r3, #16
 8000766:	6193      	str	r3, [r2, #24]
 8000768:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f003 0310 	and.w	r3, r3, #16
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000774:	2301      	movs	r3, #1
 8000776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000778:	2303      	movs	r3, #3
 800077a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800077c:	f107 0318 	add.w	r3, r7, #24
 8000780:	4619      	mov	r1, r3
 8000782:	4819      	ldr	r0, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0xc4>)
 8000784:	f000 fcfc 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000788:	e026      	b.n	80007d8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <HAL_ADC_MspInit+0xc8>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d121      	bne.n	80007d8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000794:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a12      	ldr	r2, [pc, #72]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 800079a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b10      	ldr	r3, [pc, #64]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a0c      	ldr	r2, [pc, #48]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 80007b2:	f043 0310 	orr.w	r3, r3, #16
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_ADC_MspInit+0xc0>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0310 	and.w	r3, r3, #16
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007c4:	2302      	movs	r3, #2
 80007c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c8:	2303      	movs	r3, #3
 80007ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007cc:	f107 0318 	add.w	r3, r7, #24
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_ADC_MspInit+0xc4>)
 80007d4:	f000 fcd4 	bl	8001180 <HAL_GPIO_Init>
}
 80007d8:	bf00      	nop
 80007da:	3728      	adds	r7, #40	; 0x28
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40012400 	.word	0x40012400
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40011000 	.word	0x40011000
 80007ec:	40012800 	.word	0x40012800

080007f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 0318 	add.w	r3, r7, #24
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a35      	ldr	r2, [pc, #212]	; (80008e0 <HAL_UART_MspInit+0xf0>)
 800080c:	4293      	cmp	r3, r2
 800080e:	d13a      	bne.n	8000886 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000810:	4b34      	ldr	r3, [pc, #208]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	4a33      	ldr	r2, [pc, #204]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 8000816:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800081a:	6193      	str	r3, [r2, #24]
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000828:	4b2e      	ldr	r3, [pc, #184]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4a2d      	ldr	r2, [pc, #180]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 800082e:	f043 0304 	orr.w	r3, r3, #4
 8000832:	6193      	str	r3, [r2, #24]
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 8000836:	699b      	ldr	r3, [r3, #24]
 8000838:	f003 0304 	and.w	r3, r3, #4
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2302      	movs	r3, #2
 8000848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800084a:	2303      	movs	r3, #3
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	4619      	mov	r1, r3
 8000854:	4824      	ldr	r0, [pc, #144]	; (80008e8 <HAL_UART_MspInit+0xf8>)
 8000856:	f000 fc93 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800085a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800085e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000860:	2300      	movs	r3, #0
 8000862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000868:	f107 0318 	add.w	r3, r7, #24
 800086c:	4619      	mov	r1, r3
 800086e:	481e      	ldr	r0, [pc, #120]	; (80008e8 <HAL_UART_MspInit+0xf8>)
 8000870:	f000 fc86 	bl	8001180 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2105      	movs	r1, #5
 8000878:	2025      	movs	r0, #37	; 0x25
 800087a:	f000 fbe0 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800087e:	2025      	movs	r0, #37	; 0x25
 8000880:	f000 fbf9 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000884:	e028      	b.n	80008d8 <HAL_UART_MspInit+0xe8>
  else if(huart->Instance==USART2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <HAL_UART_MspInit+0xfc>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d123      	bne.n	80008d8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000890:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	4a13      	ldr	r2, [pc, #76]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 8000896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800089a:	61d3      	str	r3, [r2, #28]
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 800089e:	69db      	ldr	r3, [r3, #28]
 80008a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 80008ae:	f043 0304 	orr.w	r3, r3, #4
 80008b2:	6193      	str	r3, [r2, #24]
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_UART_MspInit+0xf4>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	f003 0304 	and.w	r3, r3, #4
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c0:	230c      	movs	r3, #12
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2302      	movs	r3, #2
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0318 	add.w	r3, r7, #24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4805      	ldr	r0, [pc, #20]	; (80008e8 <HAL_UART_MspInit+0xf8>)
 80008d4:	f000 fc54 	bl	8001180 <HAL_GPIO_Init>
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40013800 	.word	0x40013800
 80008e4:	40021000 	.word	0x40021000
 80008e8:	40010800 	.word	0x40010800
 80008ec:	40004400 	.word	0x40004400

080008f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08c      	sub	sp, #48	; 0x30
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000900:	2200      	movs	r2, #0
 8000902:	6879      	ldr	r1, [r7, #4]
 8000904:	201e      	movs	r0, #30
 8000906:	f000 fb9a 	bl	800103e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800090a:	201e      	movs	r0, #30
 800090c:	f000 fbb3 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000910:	4b1f      	ldr	r3, [pc, #124]	; (8000990 <HAL_InitTick+0xa0>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <HAL_InitTick+0xa0>)
 8000916:	f043 0304 	orr.w	r3, r3, #4
 800091a:	61d3      	str	r3, [r2, #28]
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <HAL_InitTick+0xa0>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	f003 0304 	and.w	r3, r3, #4
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000928:	f107 0210 	add.w	r2, r7, #16
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f001 f9de 	bl	8001cf4 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000938:	f001 f9b4 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_InitTick+0xa4>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <HAL_InitTick+0xa8>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <HAL_InitTick+0xac>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <HAL_InitTick+0xa8>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_InitTick+0xa8>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_InitTick+0xa8>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <HAL_InitTick+0xa8>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <HAL_InitTick+0xa8>)
 8000972:	f001 fac3 	bl	8001efc <HAL_TIM_Base_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d104      	bne.n	8000986 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_InitTick+0xa8>)
 800097e:	f001 fb15 	bl	8001fac <HAL_TIM_Base_Start_IT>
 8000982:	4603      	mov	r3, r0
 8000984:	e000      	b.n	8000988 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3730      	adds	r7, #48	; 0x30
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40021000 	.word	0x40021000
 8000994:	431bde83 	.word	0x431bde83
 8000998:	20001e1c 	.word	0x20001e1c
 800099c:	40000800 	.word	0x40000800

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bc80      	pop	{r7}
 80009c8:	4770      	bx	lr
	...

080009cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM4_IRQHandler+0x10>)
 80009d2:	f001 fb3d 	bl	8002050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20001e1c 	.word	0x20001e1c

080009e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART1_IRQHandler+0x10>)
 80009e6:	f001 fe51 	bl	800268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20001d94 	.word	0x20001d94

080009f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80009f8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80009fc:	f000 fd5c 	bl	80014b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr

08000a10 <Reset_Handler>:
 8000a10:	2100      	movs	r1, #0
 8000a12:	e003      	b.n	8000a1c <LoopCopyDataInit>

08000a14 <CopyDataInit>:
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <LoopFillZerobss+0x14>)
 8000a16:	585b      	ldr	r3, [r3, r1]
 8000a18:	5043      	str	r3, [r0, r1]
 8000a1a:	3104      	adds	r1, #4

08000a1c <LoopCopyDataInit>:
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <LoopFillZerobss+0x18>)
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <LoopFillZerobss+0x1c>)
 8000a20:	1842      	adds	r2, r0, r1
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d3f6      	bcc.n	8000a14 <CopyDataInit>
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopFillZerobss+0x20>)
 8000a28:	e002      	b.n	8000a30 <LoopFillZerobss>

08000a2a <FillZerobss>:
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	f842 3b04 	str.w	r3, [r2], #4

08000a30 <LoopFillZerobss>:
 8000a30:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <LoopFillZerobss+0x24>)
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d3f9      	bcc.n	8000a2a <FillZerobss>
 8000a36:	f7ff ffe5 	bl	8000a04 <SystemInit>
 8000a3a:	f004 fddf 	bl	80055fc <__libc_init_array>
 8000a3e:	f7ff fb87 	bl	8000150 <main>
 8000a42:	4770      	bx	lr
 8000a44:	0800578c 	.word	0x0800578c
 8000a48:	20000000 	.word	0x20000000
 8000a4c:	20000010 	.word	0x20000010
 8000a50:	20000010 	.word	0x20000010
 8000a54:	20001ea8 	.word	0x20001ea8

08000a58 <ADC1_2_IRQHandler>:
 8000a58:	e7fe      	b.n	8000a58 <ADC1_2_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a60:	4b08      	ldr	r3, [pc, #32]	; (8000a84 <HAL_Init+0x28>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a07      	ldr	r2, [pc, #28]	; (8000a84 <HAL_Init+0x28>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 fadb 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f7ff ff3c 	bl	80008f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a78:	f7ff fe1c 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a7c:	2300      	movs	r3, #0
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	461a      	mov	r2, r3
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4413      	add	r3, r2
 8000a98:	4a03      	ldr	r2, [pc, #12]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a9a:	6013      	str	r3, [r2, #0]
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	20001e64 	.word	0x20001e64

08000aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20001e64 	.word	0x20001e64

08000ac0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d101      	bne.n	8000ae2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e0be      	b.n	8000c60 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	689b      	ldr	r3, [r3, #8]
 8000ae6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d109      	bne.n	8000b04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	2200      	movs	r2, #0
 8000af4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe10 	bl	8000724 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f000 f9ab 	bl	8000e60 <ADC_ConversionStop_Disable>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b12:	f003 0310 	and.w	r3, r3, #16
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f040 8099 	bne.w	8000c4e <HAL_ADC_Init+0x18e>
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	f040 8095 	bne.w	8000c4e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b2c:	f023 0302 	bic.w	r3, r3, #2
 8000b30:	f043 0202 	orr.w	r2, r3, #2
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7b1b      	ldrb	r3, [r3, #12]
 8000b46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b58:	d003      	beq.n	8000b62 <HAL_ADC_Init+0xa2>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d102      	bne.n	8000b68 <HAL_ADC_Init+0xa8>
 8000b62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b66:	e000      	b.n	8000b6a <HAL_ADC_Init+0xaa>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	693a      	ldr	r2, [r7, #16]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7d1b      	ldrb	r3, [r3, #20]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d119      	bne.n	8000bac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	7b1b      	ldrb	r3, [r3, #12]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d109      	bne.n	8000b94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	3b01      	subs	r3, #1
 8000b86:	035a      	lsls	r2, r3, #13
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b90:	613b      	str	r3, [r7, #16]
 8000b92:	e00b      	b.n	8000bac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b98:	f043 0220 	orr.w	r2, r3, #32
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba4:	f043 0201 	orr.w	r2, r3, #1
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	430a      	orrs	r2, r1
 8000bbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <HAL_ADC_Init+0x1a8>)
 8000bc8:	4013      	ands	r3, r2
 8000bca:	687a      	ldr	r2, [r7, #4]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	68b9      	ldr	r1, [r7, #8]
 8000bd0:	430b      	orrs	r3, r1
 8000bd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	689b      	ldr	r3, [r3, #8]
 8000bd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bdc:	d003      	beq.n	8000be6 <HAL_ADC_Init+0x126>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689b      	ldr	r3, [r3, #8]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d104      	bne.n	8000bf0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	691b      	ldr	r3, [r3, #16]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	051b      	lsls	r3, r3, #20
 8000bee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	68fa      	ldr	r2, [r7, #12]
 8000c00:	430a      	orrs	r2, r1
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689a      	ldr	r2, [r3, #8]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_ADC_Init+0x1ac>)
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d10b      	bne.n	8000c2c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2200      	movs	r2, #0
 8000c18:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c1e:	f023 0303 	bic.w	r3, r3, #3
 8000c22:	f043 0201 	orr.w	r2, r3, #1
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c2a:	e018      	b.n	8000c5e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c30:	f023 0312 	bic.w	r3, r3, #18
 8000c34:	f043 0210 	orr.w	r2, r3, #16
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c40:	f043 0201 	orr.w	r2, r3, #1
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c4c:	e007      	b.n	8000c5e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c52:	f043 0210 	orr.w	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3718      	adds	r7, #24
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	ffe1f7fd 	.word	0xffe1f7fd
 8000c6c:	ff1f0efe 	.word	0xff1f0efe

08000c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d101      	bne.n	8000c90 <HAL_ADC_ConfigChannel+0x20>
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	e0dc      	b.n	8000e4a <HAL_ADC_ConfigChannel+0x1da>
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2201      	movs	r2, #1
 8000c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b06      	cmp	r3, #6
 8000c9e:	d81c      	bhi.n	8000cda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	4613      	mov	r3, r2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	4413      	add	r3, r2
 8000cb0:	3b05      	subs	r3, #5
 8000cb2:	221f      	movs	r2, #31
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4019      	ands	r1, r3
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	6818      	ldr	r0, [r3, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685a      	ldr	r2, [r3, #4]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	4413      	add	r3, r2
 8000cca:	3b05      	subs	r3, #5
 8000ccc:	fa00 f203 	lsl.w	r2, r0, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd8:	e03c      	b.n	8000d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	685b      	ldr	r3, [r3, #4]
 8000cde:	2b0c      	cmp	r3, #12
 8000ce0:	d81c      	bhi.n	8000d1c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3b23      	subs	r3, #35	; 0x23
 8000cf4:	221f      	movs	r2, #31
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	4019      	ands	r1, r3
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	6818      	ldr	r0, [r3, #0]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	4613      	mov	r3, r2
 8000d08:	009b      	lsls	r3, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3b23      	subs	r3, #35	; 0x23
 8000d0e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	430a      	orrs	r2, r1
 8000d18:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1a:	e01b      	b.n	8000d54 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	4613      	mov	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	4413      	add	r3, r2
 8000d2c:	3b41      	subs	r3, #65	; 0x41
 8000d2e:	221f      	movs	r2, #31
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
 8000d34:	43db      	mvns	r3, r3
 8000d36:	4019      	ands	r1, r3
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	6818      	ldr	r0, [r3, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	685a      	ldr	r2, [r3, #4]
 8000d40:	4613      	mov	r3, r2
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4413      	add	r3, r2
 8000d46:	3b41      	subs	r3, #65	; 0x41
 8000d48:	fa00 f203 	lsl.w	r2, r0, r3
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	430a      	orrs	r2, r1
 8000d52:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b09      	cmp	r3, #9
 8000d5a:	d91c      	bls.n	8000d96 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68d9      	ldr	r1, [r3, #12]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4613      	mov	r3, r2
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	4413      	add	r3, r2
 8000d6c:	3b1e      	subs	r3, #30
 8000d6e:	2207      	movs	r2, #7
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	4019      	ands	r1, r3
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	6898      	ldr	r0, [r3, #8]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	3b1e      	subs	r3, #30
 8000d88:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	430a      	orrs	r2, r1
 8000d92:	60da      	str	r2, [r3, #12]
 8000d94:	e019      	b.n	8000dca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	6919      	ldr	r1, [r3, #16]
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4613      	mov	r3, r2
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	4413      	add	r3, r2
 8000da6:	2207      	movs	r2, #7
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	4019      	ands	r1, r3
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	6898      	ldr	r0, [r3, #8]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	4413      	add	r3, r2
 8000dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b10      	cmp	r3, #16
 8000dd0:	d003      	beq.n	8000dda <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dd6:	2b11      	cmp	r3, #17
 8000dd8:	d132      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a1d      	ldr	r2, [pc, #116]	; (8000e54 <HAL_ADC_ConfigChannel+0x1e4>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d125      	bne.n	8000e30 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d126      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689a      	ldr	r2, [r3, #8]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e00:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b10      	cmp	r3, #16
 8000e08:	d11a      	bne.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <HAL_ADC_ConfigChannel+0x1ec>)
 8000e10:	fba2 2303 	umull	r2, r3, r2, r3
 8000e14:	0c9a      	lsrs	r2, r3, #18
 8000e16:	4613      	mov	r3, r2
 8000e18:	009b      	lsls	r3, r3, #2
 8000e1a:	4413      	add	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e20:	e002      	b.n	8000e28 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3b01      	subs	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f9      	bne.n	8000e22 <HAL_ADC_ConfigChannel+0x1b2>
 8000e2e:	e007      	b.n	8000e40 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	f043 0220 	orr.w	r2, r3, #32
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3714      	adds	r7, #20
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	40012400 	.word	0x40012400
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	431bde83 	.word	0x431bde83

08000e60 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d127      	bne.n	8000eca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000e8a:	f7ff fe0f 	bl	8000aac <HAL_GetTick>
 8000e8e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000e90:	e014      	b.n	8000ebc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000e92:	f7ff fe0b 	bl	8000aac <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d90d      	bls.n	8000ebc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ea4:	f043 0210 	orr.w	r2, r3, #16
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eb0:	f043 0201 	orr.w	r2, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e007      	b.n	8000ecc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d0e3      	beq.n	8000e92 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eea:	68ba      	ldr	r2, [r7, #8]
 8000eec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000efc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f06:	4a04      	ldr	r2, [pc, #16]	; (8000f18 <__NVIC_SetPriorityGrouping+0x44>)
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	60d3      	str	r3, [r2, #12]
}
 8000f0c:	bf00      	nop
 8000f0e:	3714      	adds	r7, #20
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bc80      	pop	{r7}
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f20:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <__NVIC_GetPriorityGrouping+0x18>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0a1b      	lsrs	r3, r3, #8
 8000f26:	f003 0307 	and.w	r3, r3, #7
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	4603      	mov	r3, r0
 8000f40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	db0b      	blt.n	8000f62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f003 021f 	and.w	r2, r3, #31
 8000f50:	4906      	ldr	r1, [pc, #24]	; (8000f6c <__NVIC_EnableIRQ+0x34>)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	095b      	lsrs	r3, r3, #5
 8000f58:	2001      	movs	r0, #1
 8000f5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr
 8000f6c:	e000e100 	.word	0xe000e100

08000f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	6039      	str	r1, [r7, #0]
 8000f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	db0a      	blt.n	8000f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	490c      	ldr	r1, [pc, #48]	; (8000fbc <__NVIC_SetPriority+0x4c>)
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	0112      	lsls	r2, r2, #4
 8000f90:	b2d2      	uxtb	r2, r2
 8000f92:	440b      	add	r3, r1
 8000f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f98:	e00a      	b.n	8000fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	b2da      	uxtb	r2, r3
 8000f9e:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <__NVIC_SetPriority+0x50>)
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	f003 030f 	and.w	r3, r3, #15
 8000fa6:	3b04      	subs	r3, #4
 8000fa8:	0112      	lsls	r2, r2, #4
 8000faa:	b2d2      	uxtb	r2, r2
 8000fac:	440b      	add	r3, r1
 8000fae:	761a      	strb	r2, [r3, #24]
}
 8000fb0:	bf00      	nop
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bc80      	pop	{r7}
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000e100 	.word	0xe000e100
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b089      	sub	sp, #36	; 0x24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	60f8      	str	r0, [r7, #12]
 8000fcc:	60b9      	str	r1, [r7, #8]
 8000fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	f1c3 0307 	rsb	r3, r3, #7
 8000fde:	2b04      	cmp	r3, #4
 8000fe0:	bf28      	it	cs
 8000fe2:	2304      	movcs	r3, #4
 8000fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	3304      	adds	r3, #4
 8000fea:	2b06      	cmp	r3, #6
 8000fec:	d902      	bls.n	8000ff4 <NVIC_EncodePriority+0x30>
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	e000      	b.n	8000ff6 <NVIC_EncodePriority+0x32>
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43da      	mvns	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	401a      	ands	r2, r3
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800100c:	f04f 31ff 	mov.w	r1, #4294967295
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	fa01 f303 	lsl.w	r3, r1, r3
 8001016:	43d9      	mvns	r1, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800101c:	4313      	orrs	r3, r2
         );
}
 800101e:	4618      	mov	r0, r3
 8001020:	3724      	adds	r7, #36	; 0x24
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff4f 	bl	8000ed4 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff64 	bl	8000f1c <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ffb2 	bl	8000fc4 <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff81 	bl	8000f70 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff57 	bl	8000f38 <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d005      	beq.n	80010b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2204      	movs	r2, #4
 80010ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e051      	b.n	800115a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 020e 	bic.w	r2, r2, #14
 80010c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0201 	bic.w	r2, r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_DMA_Abort_IT+0xd0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d029      	beq.n	8001134 <HAL_DMA_Abort_IT+0xa0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <HAL_DMA_Abort_IT+0xd4>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d022      	beq.n	8001130 <HAL_DMA_Abort_IT+0x9c>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_DMA_Abort_IT+0xd8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d01a      	beq.n	800112a <HAL_DMA_Abort_IT+0x96>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_DMA_Abort_IT+0xdc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d012      	beq.n	8001124 <HAL_DMA_Abort_IT+0x90>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a1c      	ldr	r2, [pc, #112]	; (8001174 <HAL_DMA_Abort_IT+0xe0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00a      	beq.n	800111e <HAL_DMA_Abort_IT+0x8a>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1a      	ldr	r2, [pc, #104]	; (8001178 <HAL_DMA_Abort_IT+0xe4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d102      	bne.n	8001118 <HAL_DMA_Abort_IT+0x84>
 8001112:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001116:	e00e      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001118:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800111c:	e00b      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 800111e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001122:	e008      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001128:	e005      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 800112a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112e:	e002      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001130:	2310      	movs	r3, #16
 8001132:	e000      	b.n	8001136 <HAL_DMA_Abort_IT+0xa2>
 8001134:	2301      	movs	r3, #1
 8001136:	4a11      	ldr	r2, [pc, #68]	; (800117c <HAL_DMA_Abort_IT+0xe8>)
 8001138:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2200      	movs	r2, #0
 8001146:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	4798      	blx	r3
    } 
  }
  return status;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40020008 	.word	0x40020008
 8001168:	4002001c 	.word	0x4002001c
 800116c:	40020030 	.word	0x40020030
 8001170:	40020044 	.word	0x40020044
 8001174:	40020058 	.word	0x40020058
 8001178:	4002006c 	.word	0x4002006c
 800117c:	40020000 	.word	0x40020000

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e169      	b.n	8001468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8158 	bne.w	8001462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	4a9a      	ldr	r2, [pc, #616]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d05e      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011bc:	4a98      	ldr	r2, [pc, #608]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d875      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011c2:	4a98      	ldr	r2, [pc, #608]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d058      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011c8:	4a96      	ldr	r2, [pc, #600]	; (8001424 <HAL_GPIO_Init+0x2a4>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d86f      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011ce:	4a96      	ldr	r2, [pc, #600]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d052      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011d4:	4a94      	ldr	r2, [pc, #592]	; (8001428 <HAL_GPIO_Init+0x2a8>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d869      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011da:	4a94      	ldr	r2, [pc, #592]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d04c      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011e0:	4a92      	ldr	r2, [pc, #584]	; (800142c <HAL_GPIO_Init+0x2ac>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d863      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011e6:	4a92      	ldr	r2, [pc, #584]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d046      	beq.n	800127a <HAL_GPIO_Init+0xfa>
 80011ec:	4a90      	ldr	r2, [pc, #576]	; (8001430 <HAL_GPIO_Init+0x2b0>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d85d      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011f2:	2b12      	cmp	r3, #18
 80011f4:	d82a      	bhi.n	800124c <HAL_GPIO_Init+0xcc>
 80011f6:	2b12      	cmp	r3, #18
 80011f8:	d859      	bhi.n	80012ae <HAL_GPIO_Init+0x12e>
 80011fa:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <HAL_GPIO_Init+0x80>)
 80011fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001200:	0800127b 	.word	0x0800127b
 8001204:	08001255 	.word	0x08001255
 8001208:	08001267 	.word	0x08001267
 800120c:	080012a9 	.word	0x080012a9
 8001210:	080012af 	.word	0x080012af
 8001214:	080012af 	.word	0x080012af
 8001218:	080012af 	.word	0x080012af
 800121c:	080012af 	.word	0x080012af
 8001220:	080012af 	.word	0x080012af
 8001224:	080012af 	.word	0x080012af
 8001228:	080012af 	.word	0x080012af
 800122c:	080012af 	.word	0x080012af
 8001230:	080012af 	.word	0x080012af
 8001234:	080012af 	.word	0x080012af
 8001238:	080012af 	.word	0x080012af
 800123c:	080012af 	.word	0x080012af
 8001240:	080012af 	.word	0x080012af
 8001244:	0800125d 	.word	0x0800125d
 8001248:	08001271 	.word	0x08001271
 800124c:	4a79      	ldr	r2, [pc, #484]	; (8001434 <HAL_GPIO_Init+0x2b4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001252:	e02c      	b.n	80012ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	623b      	str	r3, [r7, #32]
          break;
 800125a:	e029      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	3304      	adds	r3, #4
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e024      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	3308      	adds	r3, #8
 800126c:	623b      	str	r3, [r7, #32]
          break;
 800126e:	e01f      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	330c      	adds	r3, #12
 8001276:	623b      	str	r3, [r7, #32]
          break;
 8001278:	e01a      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001282:	2304      	movs	r3, #4
 8001284:	623b      	str	r3, [r7, #32]
          break;
 8001286:	e013      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001290:	2308      	movs	r3, #8
 8001292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69fa      	ldr	r2, [r7, #28]
 8001298:	611a      	str	r2, [r3, #16]
          break;
 800129a:	e009      	b.n	80012b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800129c:	2308      	movs	r3, #8
 800129e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	615a      	str	r2, [r3, #20]
          break;
 80012a6:	e003      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012a8:	2300      	movs	r3, #0
 80012aa:	623b      	str	r3, [r7, #32]
          break;
 80012ac:	e000      	b.n	80012b0 <HAL_GPIO_Init+0x130>
          break;
 80012ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	2bff      	cmp	r3, #255	; 0xff
 80012b4:	d801      	bhi.n	80012ba <HAL_GPIO_Init+0x13a>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	e001      	b.n	80012be <HAL_GPIO_Init+0x13e>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	3304      	adds	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2bff      	cmp	r3, #255	; 0xff
 80012c4:	d802      	bhi.n	80012cc <HAL_GPIO_Init+0x14c>
 80012c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	e002      	b.n	80012d2 <HAL_GPIO_Init+0x152>
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	3b08      	subs	r3, #8
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	210f      	movs	r1, #15
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	401a      	ands	r2, r3
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ec:	431a      	orrs	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	f000 80b1 	beq.w	8001462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001300:	4b4d      	ldr	r3, [pc, #308]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a4c      	ldr	r2, [pc, #304]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 8001306:	f043 0301 	orr.w	r3, r3, #1
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b4a      	ldr	r3, [pc, #296]	; (8001438 <HAL_GPIO_Init+0x2b8>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	60bb      	str	r3, [r7, #8]
 8001316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001318:	4a48      	ldr	r2, [pc, #288]	; (800143c <HAL_GPIO_Init+0x2bc>)
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	089b      	lsrs	r3, r3, #2
 800131e:	3302      	adds	r3, #2
 8001320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	f003 0303 	and.w	r3, r3, #3
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	220f      	movs	r2, #15
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	4013      	ands	r3, r2
 800133a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a40      	ldr	r2, [pc, #256]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1ec>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <HAL_GPIO_Init+0x2c4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1e8>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a3e      	ldr	r2, [pc, #248]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1e4>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a3d      	ldr	r2, [pc, #244]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1e0>
 800135c:	2303      	movs	r3, #3
 800135e:	e006      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001360:	2304      	movs	r3, #4
 8001362:	e004      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001364:	2302      	movs	r3, #2
 8001366:	e002      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 8001368:	2301      	movs	r3, #1
 800136a:	e000      	b.n	800136e <HAL_GPIO_Init+0x1ee>
 800136c:	2300      	movs	r3, #0
 800136e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001370:	f002 0203 	and.w	r2, r2, #3
 8001374:	0092      	lsls	r2, r2, #2
 8001376:	4093      	lsls	r3, r2
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800137e:	492f      	ldr	r1, [pc, #188]	; (800143c <HAL_GPIO_Init+0x2bc>)
 8001380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001382:	089b      	lsrs	r3, r3, #2
 8001384:	3302      	adds	r3, #2
 8001386:	68fa      	ldr	r2, [r7, #12]
 8001388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001398:	4b2d      	ldr	r3, [pc, #180]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	492c      	ldr	r1, [pc, #176]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	600b      	str	r3, [r1, #0]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a6:	4b2a      	ldr	r3, [pc, #168]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	4928      	ldr	r1, [pc, #160]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4922      	ldr	r1, [pc, #136]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	491e      	ldr	r1, [pc, #120]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d006      	beq.n	80013f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013e8:	4b19      	ldr	r3, [pc, #100]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4918      	ldr	r1, [pc, #96]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013f8:	689a      	ldr	r2, [r3, #8]
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	4914      	ldr	r1, [pc, #80]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001400:	4013      	ands	r3, r2
 8001402:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d021      	beq.n	8001454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001410:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001412:	68da      	ldr	r2, [r3, #12]
 8001414:	490e      	ldr	r1, [pc, #56]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001416:	69bb      	ldr	r3, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	60cb      	str	r3, [r1, #12]
 800141c:	e021      	b.n	8001462 <HAL_GPIO_Init+0x2e2>
 800141e:	bf00      	nop
 8001420:	10320000 	.word	0x10320000
 8001424:	10310000 	.word	0x10310000
 8001428:	10220000 	.word	0x10220000
 800142c:	10210000 	.word	0x10210000
 8001430:	10120000 	.word	0x10120000
 8001434:	10110000 	.word	0x10110000
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	40010800 	.word	0x40010800
 8001444:	40010c00 	.word	0x40010c00
 8001448:	40011000 	.word	0x40011000
 800144c:	40011400 	.word	0x40011400
 8001450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_GPIO_Init+0x304>)
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	43db      	mvns	r3, r3
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <HAL_GPIO_Init+0x304>)
 800145e:	4013      	ands	r3, r2
 8001460:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	3301      	adds	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	fa22 f303 	lsr.w	r3, r2, r3
 8001472:	2b00      	cmp	r3, #0
 8001474:	f47f ae8e 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	372c      	adds	r7, #44	; 0x2c
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	40010400 	.word	0x40010400

08001488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
 8001494:	4613      	mov	r3, r2
 8001496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001498:	787b      	ldrb	r3, [r7, #1]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014a4:	e003      	b.n	80014ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	041a      	lsls	r2, r3, #16
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	611a      	str	r2, [r3, #16]
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014d4:	88fb      	ldrh	r3, [r7, #6]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f806 	bl	80014e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40010400 	.word	0x40010400

080014e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b086      	sub	sp, #24
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d101      	bne.n	800150e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e26c      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8087 	beq.w	800162a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800151c:	4b92      	ldr	r3, [pc, #584]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001528:	4b8f      	ldr	r3, [pc, #572]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d112      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
 8001534:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001540:	d10b      	bne.n	800155a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d06c      	beq.n	8001628 <HAL_RCC_OscConfig+0x12c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d168      	bne.n	8001628 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e246      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x76>
 8001564:	4b80      	ldr	r3, [pc, #512]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a7f      	ldr	r2, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x98>
 800157a:	4b7b      	ldr	r3, [pc, #492]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a7a      	ldr	r2, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	4b78      	ldr	r3, [pc, #480]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a77      	ldr	r2, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800158c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e01d      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d10c      	bne.n	80015b8 <HAL_RCC_OscConfig+0xbc>
 800159e:	4b72      	ldr	r3, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a71      	ldr	r2, [pc, #452]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b6f      	ldr	r3, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a6e      	ldr	r2, [pc, #440]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e00b      	b.n	80015d0 <HAL_RCC_OscConfig+0xd4>
 80015b8:	4b6b      	ldr	r3, [pc, #428]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c2:	6013      	str	r3, [r2, #0]
 80015c4:	4b68      	ldr	r3, [pc, #416]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a67      	ldr	r2, [pc, #412]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa68 	bl	8000aac <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015e0:	f7ff fa64 	bl	8000aac <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b64      	cmp	r3, #100	; 0x64
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e1fa      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b5d      	ldr	r3, [pc, #372]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe4>
 80015fe:	e014      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fa54 	bl	8000aac <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001608:	f7ff fa50 	bl	8000aac <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e1e6      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161a:	4b53      	ldr	r3, [pc, #332]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x10c>
 8001626:	e000      	b.n	800162a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001628:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d063      	beq.n	80016fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001636:	4b4c      	ldr	r3, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001642:	4b49      	ldr	r3, [pc, #292]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d11c      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
 800164e:	4b46      	ldr	r3, [pc, #280]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d116      	bne.n	8001688 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165a:	4b43      	ldr	r3, [pc, #268]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d001      	beq.n	8001672 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e1ba      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001672:	4b3d      	ldr	r3, [pc, #244]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4939      	ldr	r1, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e03a      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d020      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001690:	4b36      	ldr	r3, [pc, #216]	; (800176c <HAL_RCC_OscConfig+0x270>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fa09 	bl	8000aac <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff fa05 	bl	8000aac <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e19b      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b0:	4b2d      	ldr	r3, [pc, #180]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	4927      	ldr	r1, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <HAL_RCC_OscConfig+0x270>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff f9e8 	bl	8000aac <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e0:	f7ff f9e4 	bl	8000aac <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e17a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f2:	4b1d      	ldr	r3, [pc, #116]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	2b00      	cmp	r3, #0
 8001708:	d03a      	beq.n	8001780 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d019      	beq.n	8001746 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001712:	4b17      	ldr	r3, [pc, #92]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001714:	2201      	movs	r2, #1
 8001716:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001718:	f7ff f9c8 	bl	8000aac <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001720:	f7ff f9c4 	bl	8000aac <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e15a      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x26c>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fb08 	bl	8001d54 <RCC_Delay>
 8001744:	e01c      	b.n	8001780 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <HAL_RCC_OscConfig+0x274>)
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174c:	f7ff f9ae 	bl	8000aac <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001752:	e00f      	b.n	8001774 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001754:	f7ff f9aa 	bl	8000aac <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b02      	cmp	r3, #2
 8001760:	d908      	bls.n	8001774 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e140      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	42420000 	.word	0x42420000
 8001770:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001774:	4b9e      	ldr	r3, [pc, #632]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e9      	bne.n	8001754 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a6 	beq.w	80018da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001792:	4b97      	ldr	r3, [pc, #604]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d10d      	bne.n	80017ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179e:	4b94      	ldr	r3, [pc, #592]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	4a93      	ldr	r2, [pc, #588]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	61d3      	str	r3, [r2, #28]
 80017aa:	4b91      	ldr	r3, [pc, #580]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80017ac:	69db      	ldr	r3, [r3, #28]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b8e      	ldr	r3, [pc, #568]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff f96b 	bl	8000aac <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff f967 	bl	8000aac <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b64      	cmp	r3, #100	; 0x64
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e0fd      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x312>
 8001800:	4b7b      	ldr	r3, [pc, #492]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	4a7a      	ldr	r2, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6213      	str	r3, [r2, #32]
 800180c:	e02d      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x334>
 8001816:	4b76      	ldr	r3, [pc, #472]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4a75      	ldr	r2, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800181c:	f023 0301 	bic.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001824:	6a1b      	ldr	r3, [r3, #32]
 8001826:	4a72      	ldr	r2, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001828:	f023 0304 	bic.w	r3, r3, #4
 800182c:	6213      	str	r3, [r2, #32]
 800182e:	e01c      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	2b05      	cmp	r3, #5
 8001836:	d10c      	bne.n	8001852 <HAL_RCC_OscConfig+0x356>
 8001838:	4b6d      	ldr	r3, [pc, #436]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	4a6c      	ldr	r2, [pc, #432]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6213      	str	r3, [r2, #32]
 8001844:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a69      	ldr	r2, [pc, #420]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	e00b      	b.n	800186a <HAL_RCC_OscConfig+0x36e>
 8001852:	4b67      	ldr	r3, [pc, #412]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001854:	6a1b      	ldr	r3, [r3, #32]
 8001856:	4a66      	ldr	r2, [pc, #408]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	f023 0301 	bic.w	r3, r3, #1
 800185c:	6213      	str	r3, [r2, #32]
 800185e:	4b64      	ldr	r3, [pc, #400]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4a63      	ldr	r2, [pc, #396]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d015      	beq.n	800189e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff f91b 	bl	8000aac <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff f917 	bl	8000aac <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0ab      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001890:	4b57      	ldr	r3, [pc, #348]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0ee      	beq.n	800187a <HAL_RCC_OscConfig+0x37e>
 800189c:	e014      	b.n	80018c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189e:	f7ff f905 	bl	8000aac <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018a6:	f7ff f901 	bl	8000aac <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e095      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1ee      	bne.n	80018a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80018c8:	7dfb      	ldrb	r3, [r7, #23]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d105      	bne.n	80018da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ce:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	4a47      	ldr	r2, [pc, #284]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8081 	beq.w	80019e6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	2b08      	cmp	r3, #8
 80018ee:	d061      	beq.n	80019b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69db      	ldr	r3, [r3, #28]
 80018f4:	2b02      	cmp	r3, #2
 80018f6:	d146      	bne.n	8001986 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f8:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f8d5 	bl	8000aac <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f8d1 	bl	8000aac <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e067      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d1f0      	bne.n	8001906 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
 8001928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800192c:	d108      	bne.n	8001940 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800192e:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	492d      	ldr	r1, [pc, #180]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a19      	ldr	r1, [r3, #32]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001950:	430b      	orrs	r3, r1
 8001952:	4927      	ldr	r1, [pc, #156]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff f8a5 	bl	8000aac <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff f8a1 	bl	8000aac <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e037      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001978:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x46a>
 8001984:	e02f      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_RCC_OscConfig+0x4fc>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff f88e 	bl	8000aac <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f88a 	bl	8000aac <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e020      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x498>
 80019b2:	e018      	b.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d106      	bne.n	80019e2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019de:	429a      	cmp	r2, r3
 80019e0:	d001      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e000      	b.n	80019e8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021000 	.word	0x40021000
 80019f4:	40007000 	.word	0x40007000
 80019f8:	42420060 	.word	0x42420060

080019fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e0d0      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a10:	4b6a      	ldr	r3, [pc, #424]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 0307 	and.w	r3, r3, #7
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d910      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a1e:	4b67      	ldr	r3, [pc, #412]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 0207 	bic.w	r2, r3, #7
 8001a26:	4965      	ldr	r1, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a76:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001a7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d040      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d115      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d107      	bne.n	8001aca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d109      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e073      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	4b3d      	ldr	r3, [pc, #244]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e06b      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ada:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f023 0203 	bic.w	r2, r3, #3
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	4936      	ldr	r1, [pc, #216]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001aec:	f7fe ffde 	bl	8000aac <HAL_GetTick>
 8001af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af2:	e00a      	b.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af4:	f7fe ffda 	bl	8000aac <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e053      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 020c 	and.w	r2, r3, #12
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d1eb      	bne.n	8001af4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0307 	and.w	r3, r3, #7
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d210      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f023 0207 	bic.w	r2, r3, #7
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1c0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1cc>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1d0>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7fe fea0 	bl	80008f0 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40022000 	.word	0x40022000
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	0800576c 	.word	0x0800576c
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b490      	push	{r4, r7}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001bd8:	1d3c      	adds	r4, r7, #4
 8001bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001be0:	f240 2301 	movw	r3, #513	; 0x201
 8001be4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
 8001bea:	2300      	movs	r3, #0
 8001bec:	61bb      	str	r3, [r7, #24]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001bfa:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f003 030c 	and.w	r3, r3, #12
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d002      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x40>
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d003      	beq.n	8001c16 <HAL_RCC_GetSysClockFreq+0x46>
 8001c0e:	e02d      	b.n	8001c6c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c10:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c12:	623b      	str	r3, [r7, #32]
      break;
 8001c14:	e02d      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	0c9b      	lsrs	r3, r3, #18
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c22:	4413      	add	r3, r2
 8001c24:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c28:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d013      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c34:	4b13      	ldr	r3, [pc, #76]	; (8001c84 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	0c5b      	lsrs	r3, r3, #17
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c42:	4413      	add	r3, r2
 8001c44:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c48:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c4e:	fb02 f203 	mul.w	r2, r2, r3
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5a:	e004      	b.n	8001c66 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	623b      	str	r3, [r7, #32]
      break;
 8001c6a:	e002      	b.n	8001c72 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	623b      	str	r3, [r7, #32]
      break;
 8001c70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c72:	6a3b      	ldr	r3, [r7, #32]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc90      	pop	{r4, r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	080056fc 	.word	0x080056fc
 8001c84:	40021000 	.word	0x40021000
 8001c88:	007a1200 	.word	0x007a1200
 8001c8c:	003d0900 	.word	0x003d0900

08001c90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ca8:	f7ff fff2 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cac:	4602      	mov	r2, r0
 8001cae:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	0a1b      	lsrs	r3, r3, #8
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	4903      	ldr	r1, [pc, #12]	; (8001cc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cba:	5ccb      	ldrb	r3, [r1, r3]
 8001cbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	0800577c 	.word	0x0800577c

08001ccc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cd0:	f7ff ffde 	bl	8001c90 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	0adb      	lsrs	r3, r3, #11
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	0800577c 	.word	0x0800577c

08001cf4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	220f      	movs	r2, #15
 8001d02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d10:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001d28:	4b08      	ldr	r3, [pc, #32]	; (8001d4c <HAL_RCC_GetClockConfig+0x58>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	08db      	lsrs	r3, r3, #3
 8001d2e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d36:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <HAL_RCC_GetClockConfig+0x5c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0207 	and.w	r2, r3, #7
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	40021000 	.word	0x40021000
 8001d50:	40022000 	.word	0x40022000

08001d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <RCC_Delay+0x34>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a0a      	ldr	r2, [pc, #40]	; (8001d8c <RCC_Delay+0x38>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	0a5b      	lsrs	r3, r3, #9
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	fb02 f303 	mul.w	r3, r2, r3
 8001d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d70:	bf00      	nop
  }
  while (Delay --);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	1e5a      	subs	r2, r3, #1
 8001d76:	60fa      	str	r2, [r7, #12]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1f9      	bne.n	8001d70 <RCC_Delay+0x1c>
}
 8001d7c:	bf00      	nop
 8001d7e:	bf00      	nop
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	10624dd3 	.word	0x10624dd3

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d07d      	beq.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001dac:	2300      	movs	r3, #0
 8001dae:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d10d      	bne.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dbe:	69db      	ldr	r3, [r3, #28]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	61d3      	str	r3, [r2, #28]
 8001dc8:	4b49      	ldr	r3, [pc, #292]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	4b46      	ldr	r3, [pc, #280]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001de4:	4b43      	ldr	r3, [pc, #268]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a42      	ldr	r2, [pc, #264]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df0:	f7fe fe5c 	bl	8000aac <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	e008      	b.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df8:	f7fe fe58 	bl	8000aac <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e06d      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0a:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d0f0      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e16:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d02e      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d027      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e34:	4b2e      	ldr	r3, [pc, #184]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e36:	6a1b      	ldr	r3, [r3, #32]
 8001e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e3c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3e:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e4a:	4a29      	ldr	r2, [pc, #164]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d014      	beq.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe fe27 	bl	8000aac <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e60:	e00a      	b.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e62:	f7fe fe23 	bl	8000aac <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e036      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d0ee      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e84:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4917      	ldr	r1, [pc, #92]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d105      	bne.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e9c:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a13      	ldr	r2, [pc, #76]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ea2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d008      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001eb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	490b      	ldr	r1, [pc, #44]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d008      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001ed2:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	4904      	ldr	r1, [pc, #16]	; (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40007000 	.word	0x40007000
 8001ef8:	42420440 	.word	0x42420440

08001efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e041      	b.n	8001f92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f14:	b2db      	uxtb	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d106      	bne.n	8001f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f839 	bl	8001f9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3304      	adds	r3, #4
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	f000 f9b4 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001fa2:	bf00      	nop
 8001fa4:	370c      	adds	r7, #12
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bc80      	pop	{r7}
 8001faa:	4770      	bx	lr

08001fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d001      	beq.n	8001fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e03a      	b.n	800203a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0201 	orr.w	r2, r2, #1
 8001fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_Base_Start_IT+0x98>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d00e      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x58>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fee:	d009      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x58>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <HAL_TIM_Base_Start_IT+0x9c>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d004      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0x58>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a13      	ldr	r2, [pc, #76]	; (800204c <HAL_TIM_Base_Start_IT+0xa0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d111      	bne.n	8002028 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d010      	beq.n	8002038 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	e007      	b.n	8002038 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	40012c00 	.word	0x40012c00
 8002048:	40000400 	.word	0x40000400
 800204c:	40000800 	.word	0x40000800

08002050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b02      	cmp	r3, #2
 8002064:	d122      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b02      	cmp	r3, #2
 8002072:	d11b      	bne.n	80020ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0202 	mvn.w	r2, #2
 800207c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f8ed 	bl	8002272 <HAL_TIM_IC_CaptureCallback>
 8002098:	e005      	b.n	80020a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f8e0 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f8ef 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d122      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11b      	bne.n	8002100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0204 	mvn.w	r2, #4
 80020d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d003      	beq.n	80020ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f8c3 	bl	8002272 <HAL_TIM_IC_CaptureCallback>
 80020ec:	e005      	b.n	80020fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f000 f8b6 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 f8c5 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	f003 0308 	and.w	r3, r3, #8
 800210a:	2b08      	cmp	r3, #8
 800210c:	d122      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b08      	cmp	r3, #8
 800211a:	d11b      	bne.n	8002154 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f06f 0208 	mvn.w	r2, #8
 8002124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2204      	movs	r2, #4
 800212a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b00      	cmp	r3, #0
 8002138:	d003      	beq.n	8002142 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f899 	bl	8002272 <HAL_TIM_IC_CaptureCallback>
 8002140:	e005      	b.n	800214e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f88c 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f89b 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0310 	and.w	r3, r3, #16
 800215e:	2b10      	cmp	r3, #16
 8002160:	d122      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b10      	cmp	r3, #16
 800216e:	d11b      	bne.n	80021a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0210 	mvn.w	r2, #16
 8002178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2208      	movs	r2, #8
 800217e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800218a:	2b00      	cmp	r3, #0
 800218c:	d003      	beq.n	8002196 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f86f 	bl	8002272 <HAL_TIM_IC_CaptureCallback>
 8002194:	e005      	b.n	80021a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f862 	bl	8002260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f000 f871 	bl	8002284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0301 	and.w	r3, r3, #1
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d107      	bne.n	80021d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f06f 0201 	mvn.w	r2, #1
 80021cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7fe fa58 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021de:	2b80      	cmp	r3, #128	; 0x80
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d107      	bne.n	8002200 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f8bf 	bl	800237e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d10e      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002218:	2b40      	cmp	r3, #64	; 0x40
 800221a:	d107      	bne.n	800222c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f835 	bl	8002296 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	691b      	ldr	r3, [r3, #16]
 8002232:	f003 0320 	and.w	r3, r3, #32
 8002236:	2b20      	cmp	r3, #32
 8002238:	d10e      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	f003 0320 	and.w	r3, r3, #32
 8002244:	2b20      	cmp	r3, #32
 8002246:	d107      	bne.n	8002258 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f06f 0220 	mvn.w	r2, #32
 8002250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f88a 	bl	800236c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a29      	ldr	r2, [pc, #164]	; (8002360 <TIM_Base_SetConfig+0xb8>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00b      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c6:	d007      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a26      	ldr	r2, [pc, #152]	; (8002364 <TIM_Base_SetConfig+0xbc>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_Base_SetConfig+0x30>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a25      	ldr	r2, [pc, #148]	; (8002368 <TIM_Base_SetConfig+0xc0>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d108      	bne.n	80022ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <TIM_Base_SetConfig+0xb8>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d00b      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f8:	d007      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a19      	ldr	r2, [pc, #100]	; (8002364 <TIM_Base_SetConfig+0xbc>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d003      	beq.n	800230a <TIM_Base_SetConfig+0x62>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a18      	ldr	r2, [pc, #96]	; (8002368 <TIM_Base_SetConfig+0xc0>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d108      	bne.n	800231c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	689a      	ldr	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a07      	ldr	r2, [pc, #28]	; (8002360 <TIM_Base_SetConfig+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d103      	bne.n	8002350 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	615a      	str	r2, [r3, #20]
}
 8002356:	bf00      	nop
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	bc80      	pop	{r7}
 800235e:	4770      	bx	lr
 8002360:	40012c00 	.word	0x40012c00
 8002364:	40000400 	.word	0x40000400
 8002368:	40000800 	.word	0x40000800

0800236c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr

0800237e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d101      	bne.n	80023a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e03f      	b.n	8002422 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d106      	bne.n	80023bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2200      	movs	r2, #0
 80023b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7fe fa1a 	bl	80007f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2224      	movs	r2, #36	; 0x24
 80023c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68da      	ldr	r2, [r3, #12]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fbd7 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	691a      	ldr	r2, [r3, #16]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695a      	ldr	r2, [r3, #20]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68da      	ldr	r2, [r3, #12]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002408:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2220      	movs	r2, #32
 8002414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2220      	movs	r2, #32
 800241c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b08a      	sub	sp, #40	; 0x28
 800242e:	af02      	add	r7, sp, #8
 8002430:	60f8      	str	r0, [r7, #12]
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	603b      	str	r3, [r7, #0]
 8002436:	4613      	mov	r3, r2
 8002438:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b20      	cmp	r3, #32
 8002448:	d17c      	bne.n	8002544 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Transmit+0x2c>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e075      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Transmit+0x3e>
 8002464:	2302      	movs	r3, #2
 8002466:	e06e      	b.n	8002546 <HAL_UART_Transmit+0x11c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800247e:	f7fe fb15 	bl	8000aac <HAL_GetTick>
 8002482:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	88fa      	ldrh	r2, [r7, #6]
 8002488:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	88fa      	ldrh	r2, [r7, #6]
 800248e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002498:	d108      	bne.n	80024ac <HAL_UART_Transmit+0x82>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d104      	bne.n	80024ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e003      	b.n	80024b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80024bc:	e02a      	b.n	8002514 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 f9fa 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e036      	b.n	8002546 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10b      	bne.n	80024f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	881b      	ldrh	r3, [r3, #0]
 80024e2:	461a      	mov	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	3302      	adds	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
 80024f4:	e007      	b.n	8002506 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	781a      	ldrb	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	3301      	adds	r3, #1
 8002504:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800250a:	b29b      	uxth	r3, r3
 800250c:	3b01      	subs	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002518:	b29b      	uxth	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d1cf      	bne.n	80024be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	2200      	movs	r2, #0
 8002526:	2140      	movs	r1, #64	; 0x40
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 f9ca 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e006      	b.n	8002546 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	3720      	adds	r7, #32
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b08a      	sub	sp, #40	; 0x28
 8002552:	af02      	add	r7, sp, #8
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	603b      	str	r3, [r7, #0]
 800255a:	4613      	mov	r3, r2
 800255c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b20      	cmp	r3, #32
 800256c:	f040 8089 	bne.w	8002682 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d002      	beq.n	800257c <HAL_UART_Receive+0x2e>
 8002576:	88fb      	ldrh	r3, [r7, #6]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e081      	b.n	8002684 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002586:	2b01      	cmp	r3, #1
 8002588:	d101      	bne.n	800258e <HAL_UART_Receive+0x40>
 800258a:	2302      	movs	r3, #2
 800258c:	e07a      	b.n	8002684 <HAL_UART_Receive+0x136>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2200      	movs	r2, #0
 800259a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2222      	movs	r2, #34	; 0x22
 80025a0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80025a4:	f7fe fa82 	bl	8000aac <HAL_GetTick>
 80025a8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	88fa      	ldrh	r2, [r7, #6]
 80025ae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	88fa      	ldrh	r2, [r7, #6]
 80025b4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025be:	d108      	bne.n	80025d2 <HAL_UART_Receive+0x84>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	e003      	b.n	80025da <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025d6:	2300      	movs	r3, #0
 80025d8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80025e2:	e043      	b.n	800266c <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	2200      	movs	r2, #0
 80025ec:	2120      	movs	r1, #32
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f000 f967 	bl	80028c2 <UART_WaitOnFlagUntilTimeout>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e042      	b.n	8002684 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	b29b      	uxth	r3, r3
 800260c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002610:	b29a      	uxth	r2, r3
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3302      	adds	r3, #2
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	e01f      	b.n	800265e <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d007      	beq.n	8002638 <HAL_UART_Receive+0xea>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10a      	bne.n	8002646 <HAL_UART_Receive+0xf8>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d106      	bne.n	8002646 <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e008      	b.n	8002658 <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	3301      	adds	r3, #1
 800265c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002670:	b29b      	uxth	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d1b6      	bne.n	80025e4 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	4618      	mov	r0, r3
 8002686:	3720      	adds	r7, #32
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b088      	sub	sp, #32
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d10d      	bne.n	80026de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	f003 0320 	and.w	r3, r3, #32
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_UART_IRQHandler+0x52>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f9d5 	bl	8002a86 <UART_Receive_IT>
      return;
 80026dc:	e0d0      	b.n	8002880 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80b0 	beq.w	8002846 <HAL_UART_IRQHandler+0x1ba>
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d105      	bne.n	80026fc <HAL_UART_IRQHandler+0x70>
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 80a5 	beq.w	8002846 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00a      	beq.n	800271c <HAL_UART_IRQHandler+0x90>
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	f043 0201 	orr.w	r2, r3, #1
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_UART_IRQHandler+0xb0>
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002734:	f043 0202 	orr.w	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00a      	beq.n	800275c <HAL_UART_IRQHandler+0xd0>
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002754:	f043 0204 	orr.w	r2, r3, #4
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00f      	beq.n	8002786 <HAL_UART_IRQHandler+0xfa>
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d104      	bne.n	800277a <HAL_UART_IRQHandler+0xee>
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d005      	beq.n	8002786 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277e:	f043 0208 	orr.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d077      	beq.n	800287e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_UART_IRQHandler+0x11c>
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f003 0320 	and.w	r3, r3, #32
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d002      	beq.n	80027a8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f96f 	bl	8002a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	bf14      	ite	ne
 80027b6:	2301      	movne	r3, #1
 80027b8:	2300      	moveq	r3, #0
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d102      	bne.n	80027d0 <HAL_UART_IRQHandler+0x144>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d031      	beq.n	8002834 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f8c0 	bl	8002956 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d023      	beq.n	800282c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695a      	ldr	r2, [r3, #20]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027f2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d013      	beq.n	8002824 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002800:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_UART_IRQHandler+0x1fc>)
 8002802:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002808:	4618      	mov	r0, r3
 800280a:	f7fe fc43 	bl	8001094 <HAL_DMA_Abort_IT>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d016      	beq.n	8002842 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800281e:	4610      	mov	r0, r2
 8002820:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002822:	e00e      	b.n	8002842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 f843 	bl	80028b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282a:	e00a      	b.n	8002842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f83f 	bl	80028b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002832:	e006      	b.n	8002842 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f000 f83b 	bl	80028b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002840:	e01d      	b.n	800287e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002842:	bf00      	nop
    return;
 8002844:	e01b      	b.n	800287e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002846:	69fb      	ldr	r3, [r7, #28]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_UART_IRQHandler+0x1d6>
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002856:	2b00      	cmp	r3, #0
 8002858:	d003      	beq.n	8002862 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f8ac 	bl	80029b8 <UART_Transmit_IT>
    return;
 8002860:	e00e      	b.n	8002880 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002868:	2b00      	cmp	r3, #0
 800286a:	d009      	beq.n	8002880 <HAL_UART_IRQHandler+0x1f4>
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f8ed 	bl	8002a56 <UART_EndTransmit_IT>
    return;
 800287c:	e000      	b.n	8002880 <HAL_UART_IRQHandler+0x1f4>
    return;
 800287e:	bf00      	nop
  }
}
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	08002991 	.word	0x08002991

0800288c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002894:	bf00      	nop
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	bc80      	pop	{r7}
 800289c:	4770      	bx	lr

0800289e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	bc80      	pop	{r7}
 80028c0:	4770      	bx	lr

080028c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	4613      	mov	r3, r2
 80028d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028d2:	e02c      	b.n	800292e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d028      	beq.n	800292e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d007      	beq.n	80028f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80028e2:	f7fe f8e3 	bl	8000aac <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d21d      	bcs.n	800292e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68da      	ldr	r2, [r3, #12]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002900:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	695a      	ldr	r2, [r3, #20]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0201 	bic.w	r2, r2, #1
 8002910:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e00f      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4013      	ands	r3, r2
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	429a      	cmp	r2, r3
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	461a      	mov	r2, r3
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	429a      	cmp	r2, r3
 800294a:	d0c3      	beq.n	80028d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800296c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	695a      	ldr	r2, [r3, #20]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0201 	bic.w	r2, r2, #1
 800297c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	bc80      	pop	{r7}
 800298e:	4770      	bx	lr

08002990 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff ff80 	bl	80028b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029b0:	bf00      	nop
 80029b2:	3710      	adds	r7, #16
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b21      	cmp	r3, #33	; 0x21
 80029ca:	d13e      	bne.n	8002a4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d114      	bne.n	8002a00 <UART_Transmit_IT+0x48>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d110      	bne.n	8002a00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6a1b      	ldr	r3, [r3, #32]
 80029f8:	1c9a      	adds	r2, r3, #2
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	621a      	str	r2, [r3, #32]
 80029fe:	e008      	b.n	8002a12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	1c59      	adds	r1, r3, #1
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6211      	str	r1, [r2, #32]
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	687a      	ldr	r2, [r7, #4]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d10f      	bne.n	8002a46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	68da      	ldr	r2, [r3, #12]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bc80      	pop	{r7}
 8002a54:	4770      	bx	lr

08002a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2220      	movs	r2, #32
 8002a72:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff08 	bl	800288c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b22      	cmp	r3, #34	; 0x22
 8002a98:	d170      	bne.n	8002b7c <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa2:	d117      	bne.n	8002ad4 <UART_Receive_IT+0x4e>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d113      	bne.n	8002ad4 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002aac:	2300      	movs	r3, #0
 8002aae:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab4:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	1c9a      	adds	r2, r3, #2
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad2:	e026      	b.n	8002b22 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad8:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ae6:	d007      	beq.n	8002af8 <UART_Receive_IT+0x72>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d10a      	bne.n	8002b06 <UART_Receive_IT+0x80>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	701a      	strb	r2, [r3, #0]
 8002b04:	e008      	b.n	8002b18 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1c:	1c5a      	adds	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d120      	bne.n	8002b78 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0220 	bic.w	r2, r2, #32
 8002b44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	695a      	ldr	r2, [r3, #20]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 0201 	bic.w	r2, r2, #1
 8002b64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fe95 	bl	800289e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e002      	b.n	8002b7e <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bc2:	f023 030c 	bic.w	r3, r3, #12
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <UART_SetConfig+0x114>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7ff f86c 	bl	8001ccc <HAL_RCC_GetPCLK2Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7ff f854 	bl	8001ca4 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	0119      	lsls	r1, r3, #4
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	4419      	add	r1, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	440a      	add	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002caa:	f3ef 8305 	mrs	r3, IPSR
 8002cae:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10f      	bne.n	8002cd6 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8002cba:	607b      	str	r3, [r7, #4]
  return(result);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d109      	bne.n	8002cd6 <osKernelInitialize+0x32>
 8002cc2:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <osKernelInitialize+0x60>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d109      	bne.n	8002cde <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002cca:	f3ef 8311 	mrs	r3, BASEPRI
 8002cce:	603b      	str	r3, [r7, #0]
  return(result);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002cd6:	f06f 0305 	mvn.w	r3, #5
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	e00c      	b.n	8002cf8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <osKernelInitialize+0x60>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d105      	bne.n	8002cf2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <osKernelInitialize+0x60>)
 8002ce8:	2201      	movs	r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e002      	b.n	8002cf8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr
 8002d04:	2000042c 	.word	0x2000042c

08002d08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d0e:	f3ef 8305 	mrs	r3, IPSR
 8002d12:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d1e:	607b      	str	r3, [r7, #4]
  return(result);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <osKernelStart+0x32>
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <osKernelStart+0x64>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d109      	bne.n	8002d42 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8002d32:	603b      	str	r3, [r7, #0]
  return(result);
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002d3a:	f06f 0305 	mvn.w	r3, #5
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00e      	b.n	8002d60 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <osKernelStart+0x64>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d107      	bne.n	8002d5a <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <osKernelStart+0x64>)
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002d50:	f001 f84a 	bl	8003de8 <vTaskStartScheduler>
      stat = osOK;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	e002      	b.n	8002d60 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d5e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002d60:	68fb      	ldr	r3, [r7, #12]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	2000042c 	.word	0x2000042c

08002d70 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b092      	sub	sp, #72	; 0x48
 8002d74:	af04      	add	r7, sp, #16
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d80:	f3ef 8305 	mrs	r3, IPSR
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f040 8094 	bne.w	8002eb6 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d92:	623b      	str	r3, [r7, #32]
  return(result);
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 808d 	bne.w	8002eb6 <osThreadNew+0x146>
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <osThreadNew+0x150>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d106      	bne.n	8002db2 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002da4:	f3ef 8311 	mrs	r3, BASEPRI
 8002da8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8082 	bne.w	8002eb6 <osThreadNew+0x146>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d07e      	beq.n	8002eb6 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002dbc:	2318      	movs	r3, #24
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002dc4:	f107 031b 	add.w	r3, r7, #27
 8002dc8:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d045      	beq.n	8002e62 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <osThreadNew+0x74>
        name = attr->name;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <osThreadNew+0x9a>
 8002df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfa:	2b38      	cmp	r3, #56	; 0x38
 8002dfc:	d805      	bhi.n	8002e0a <osThreadNew+0x9a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <osThreadNew+0x9e>
        return (NULL);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e054      	b.n	8002eb8 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <osThreadNew+0xd4>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	2b5b      	cmp	r3, #91	; 0x5b
 8002e2c:	d90a      	bls.n	8002e44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d006      	beq.n	8002e44 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <osThreadNew+0xd4>
        mem = 1;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e42:	e010      	b.n	8002e66 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10c      	bne.n	8002e66 <osThreadNew+0xf6>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d108      	bne.n	8002e66 <osThreadNew+0xf6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d104      	bne.n	8002e66 <osThreadNew+0xf6>
          mem = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e60:	e001      	b.n	8002e66 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d110      	bne.n	8002e8e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e74:	9202      	str	r2, [sp, #8]
 8002e76:	9301      	str	r3, [sp, #4]
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fde4 	bl	8003a50 <xTaskCreateStatic>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e013      	b.n	8002eb6 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d110      	bne.n	8002eb6 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	f107 0314 	add.w	r3, r7, #20
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 fe2e 	bl	8003b08 <xTaskCreate>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d001      	beq.n	8002eb6 <osThreadNew+0x146>
          hTask = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002eb6:	697b      	ldr	r3, [r7, #20]
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3738      	adds	r7, #56	; 0x38
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	2000042c 	.word	0x2000042c

08002ec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a06      	ldr	r2, [pc, #24]	; (8002eec <vApplicationGetIdleTaskMemory+0x28>)
 8002ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a05      	ldr	r2, [pc, #20]	; (8002ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2280      	movs	r2, #128	; 0x80
 8002ee0:	601a      	str	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000430 	.word	0x20000430
 8002ef0:	2000048c 	.word	0x2000048c

08002ef4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <vApplicationGetTimerTaskMemory+0x2c>)
 8002f04:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	4a06      	ldr	r2, [pc, #24]	; (8002f24 <vApplicationGetTimerTaskMemory+0x30>)
 8002f0a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f12:	601a      	str	r2, [r3, #0]
}
 8002f14:	bf00      	nop
 8002f16:	3714      	adds	r7, #20
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bc80      	pop	{r7}
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	2000068c 	.word	0x2000068c
 8002f24:	200006e8 	.word	0x200006e8

08002f28 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f103 0208 	add.w	r2, r3, #8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f40:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f103 0208 	add.w	r2, r3, #8
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f103 0208 	add.w	r2, r3, #8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr

08002f66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002f66:	b480      	push	{r7}
 8002f68:	b083      	sub	sp, #12
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bc80      	pop	{r7}
 8002f7c:	4770      	bx	lr

08002f7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
 8002f86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	683a      	ldr	r2, [r7, #0]
 8002fa8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	601a      	str	r2, [r3, #0]
}
 8002fba:	bf00      	nop
 8002fbc:	3714      	adds	r7, #20
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bc80      	pop	{r7}
 8002fc2:	4770      	bx	lr

08002fc4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d103      	bne.n	8002fe4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	60fb      	str	r3, [r7, #12]
 8002fe2:	e00c      	b.n	8002ffe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e002      	b.n	8002ff2 <vListInsert+0x2e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d2f6      	bcs.n	8002fec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	683a      	ldr	r2, [r7, #0]
 8003018:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	3714      	adds	r7, #20
 800302e:	46bd      	mov	sp, r7
 8003030:	bc80      	pop	{r7}
 8003032:	4770      	bx	lr

08003034 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6892      	ldr	r2, [r2, #8]
 800304a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6852      	ldr	r2, [r2, #4]
 8003054:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	d103      	bne.n	8003068 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689a      	ldr	r2, [r3, #8]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	bc80      	pop	{r7}
 8003084:	4770      	bx	lr
	...

08003088 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10a      	bne.n	80030b2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800309c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a0:	f383 8811 	msr	BASEPRI, r3
 80030a4:	f3bf 8f6f 	isb	sy
 80030a8:	f3bf 8f4f 	dsb	sy
 80030ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80030ae:	bf00      	nop
 80030b0:	e7fe      	b.n	80030b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80030b2:	f001 ffcb 	bl	800504c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	68f9      	ldr	r1, [r7, #12]
 80030c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030c2:	fb01 f303 	mul.w	r3, r1, r3
 80030c6:	441a      	add	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	3b01      	subs	r3, #1
 80030e4:	68f9      	ldr	r1, [r7, #12]
 80030e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	441a      	add	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	22ff      	movs	r2, #255	; 0xff
 80030fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d114      	bne.n	8003132 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01a      	beq.n	8003146 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	3310      	adds	r3, #16
 8003114:	4618      	mov	r0, r3
 8003116:	f001 f8f1 	bl	80042fc <xTaskRemoveFromEventList>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d012      	beq.n	8003146 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <xQueueGenericReset+0xcc>)
 8003122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	e009      	b.n	8003146 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	3310      	adds	r3, #16
 8003136:	4618      	mov	r0, r3
 8003138:	f7ff fef6 	bl	8002f28 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	4618      	mov	r0, r3
 8003142:	f7ff fef1 	bl	8002f28 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003146:	f001 ffb1 	bl	80050ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800314a:	2301      	movs	r3, #1
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	e000ed04 	.word	0xe000ed04

08003158 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003158:	b580      	push	{r7, lr}
 800315a:	b08e      	sub	sp, #56	; 0x38
 800315c:	af02      	add	r7, sp, #8
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d10a      	bne.n	8003182 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003170:	f383 8811 	msr	BASEPRI, r3
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	f3bf 8f4f 	dsb	sy
 800317c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800317e:	bf00      	nop
 8003180:	e7fe      	b.n	8003180 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	f383 8811 	msr	BASEPRI, r3
 8003190:	f3bf 8f6f 	isb	sy
 8003194:	f3bf 8f4f 	dsb	sy
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
}
 800319a:	bf00      	nop
 800319c:	e7fe      	b.n	800319c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d002      	beq.n	80031aa <xQueueGenericCreateStatic+0x52>
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <xQueueGenericCreateStatic+0x56>
 80031aa:	2301      	movs	r3, #1
 80031ac:	e000      	b.n	80031b0 <xQueueGenericCreateStatic+0x58>
 80031ae:	2300      	movs	r3, #0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10a      	bne.n	80031ca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80031b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b8:	f383 8811 	msr	BASEPRI, r3
 80031bc:	f3bf 8f6f 	isb	sy
 80031c0:	f3bf 8f4f 	dsb	sy
 80031c4:	623b      	str	r3, [r7, #32]
}
 80031c6:	bf00      	nop
 80031c8:	e7fe      	b.n	80031c8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d102      	bne.n	80031d6 <xQueueGenericCreateStatic+0x7e>
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d101      	bne.n	80031da <xQueueGenericCreateStatic+0x82>
 80031d6:	2301      	movs	r3, #1
 80031d8:	e000      	b.n	80031dc <xQueueGenericCreateStatic+0x84>
 80031da:	2300      	movs	r3, #0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d10a      	bne.n	80031f6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80031e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e4:	f383 8811 	msr	BASEPRI, r3
 80031e8:	f3bf 8f6f 	isb	sy
 80031ec:	f3bf 8f4f 	dsb	sy
 80031f0:	61fb      	str	r3, [r7, #28]
}
 80031f2:	bf00      	nop
 80031f4:	e7fe      	b.n	80031f4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80031f6:	2350      	movs	r3, #80	; 0x50
 80031f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b50      	cmp	r3, #80	; 0x50
 80031fe:	d00a      	beq.n	8003216 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	61bb      	str	r3, [r7, #24]
}
 8003212:	bf00      	nop
 8003214:	e7fe      	b.n	8003214 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800321a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00d      	beq.n	800323c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	2201      	movs	r2, #1
 8003224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003228:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	9300      	str	r3, [sp, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f805 	bl	8003246 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800323c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800323e:	4618      	mov	r0, r3
 8003240:	3730      	adds	r7, #48	; 0x30
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003246:	b580      	push	{r7, lr}
 8003248:	b084      	sub	sp, #16
 800324a:	af00      	add	r7, sp, #0
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	607a      	str	r2, [r7, #4]
 8003252:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d103      	bne.n	8003262 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	e002      	b.n	8003268 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	68ba      	ldr	r2, [r7, #8]
 8003272:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003274:	2101      	movs	r1, #1
 8003276:	69b8      	ldr	r0, [r7, #24]
 8003278:	f7ff ff06 	bl	8003088 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003284:	bf00      	nop
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08e      	sub	sp, #56	; 0x38
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800329a:	2300      	movs	r3, #0
 800329c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80032a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <xQueueGenericSend+0x32>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <xQueueGenericSend+0x40>
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d101      	bne.n	80032d0 <xQueueGenericSend+0x44>
 80032cc:	2301      	movs	r3, #1
 80032ce:	e000      	b.n	80032d2 <xQueueGenericSend+0x46>
 80032d0:	2300      	movs	r3, #0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10a      	bne.n	80032ec <xQueueGenericSend+0x60>
	__asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80032e8:	bf00      	nop
 80032ea:	e7fe      	b.n	80032ea <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d103      	bne.n	80032fa <xQueueGenericSend+0x6e>
 80032f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <xQueueGenericSend+0x72>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e000      	b.n	8003300 <xQueueGenericSend+0x74>
 80032fe:	2300      	movs	r3, #0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10a      	bne.n	800331a <xQueueGenericSend+0x8e>
	__asm volatile
 8003304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	623b      	str	r3, [r7, #32]
}
 8003316:	bf00      	nop
 8003318:	e7fe      	b.n	8003318 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800331a:	f001 f9b1 	bl	8004680 <xTaskGetSchedulerState>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <xQueueGenericSend+0x9e>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <xQueueGenericSend+0xa2>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <xQueueGenericSend+0xa4>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xQueueGenericSend+0xbe>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	61fb      	str	r3, [r7, #28]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800334a:	f001 fe7f 	bl	800504c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003356:	429a      	cmp	r2, r3
 8003358:	d302      	bcc.n	8003360 <xQueueGenericSend+0xd4>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b02      	cmp	r3, #2
 800335e:	d129      	bne.n	80033b4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	68b9      	ldr	r1, [r7, #8]
 8003364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003366:	f000 fa07 	bl	8003778 <prvCopyDataToQueue>
 800336a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800336c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	2b00      	cmp	r3, #0
 8003372:	d010      	beq.n	8003396 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003376:	3324      	adds	r3, #36	; 0x24
 8003378:	4618      	mov	r0, r3
 800337a:	f000 ffbf 	bl	80042fc <xTaskRemoveFromEventList>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d013      	beq.n	80033ac <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <xQueueGenericSend+0x1f8>)
 8003386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	e00a      	b.n	80033ac <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003398:	2b00      	cmp	r3, #0
 800339a:	d007      	beq.n	80033ac <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800339c:	4b39      	ldr	r3, [pc, #228]	; (8003484 <xQueueGenericSend+0x1f8>)
 800339e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80033ac:	f001 fe7e 	bl	80050ac <vPortExitCritical>
				return pdPASS;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e063      	b.n	800347c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d103      	bne.n	80033c2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033ba:	f001 fe77 	bl	80050ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	e05c      	b.n	800347c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d106      	bne.n	80033d6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033c8:	f107 0314 	add.w	r3, r7, #20
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fff9 	bl	80043c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033d2:	2301      	movs	r3, #1
 80033d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033d6:	f001 fe69 	bl	80050ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033da:	f000 fd6b 	bl	8003eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033de:	f001 fe35 	bl	800504c <vPortEnterCritical>
 80033e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033e8:	b25b      	sxtb	r3, r3
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d103      	bne.n	80033f8 <xQueueGenericSend+0x16c>
 80033f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003404:	d103      	bne.n	800340e <xQueueGenericSend+0x182>
 8003406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340e:	f001 fe4d 	bl	80050ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003412:	1d3a      	adds	r2, r7, #4
 8003414:	f107 0314 	add.w	r3, r7, #20
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 ffe8 	bl	80043f0 <xTaskCheckForTimeOut>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d124      	bne.n	8003470 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003426:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003428:	f000 fa9e 	bl	8003968 <prvIsQueueFull>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003434:	3310      	adds	r3, #16
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f000 ff0e 	bl	800425c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003440:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003442:	f000 fa29 	bl	8003898 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003446:	f000 fd43 	bl	8003ed0 <xTaskResumeAll>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f af7c 	bne.w	800334a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003452:	4b0c      	ldr	r3, [pc, #48]	; (8003484 <xQueueGenericSend+0x1f8>)
 8003454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003458:	601a      	str	r2, [r3, #0]
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	e772      	b.n	800334a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003466:	f000 fa17 	bl	8003898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800346a:	f000 fd31 	bl	8003ed0 <xTaskResumeAll>
 800346e:	e76c      	b.n	800334a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003470:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003472:	f000 fa11 	bl	8003898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003476:	f000 fd2b 	bl	8003ed0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800347a:	2300      	movs	r3, #0
		}
	}
}
 800347c:	4618      	mov	r0, r3
 800347e:	3738      	adds	r7, #56	; 0x38
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	e000ed04 	.word	0xe000ed04

08003488 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b08e      	sub	sp, #56	; 0x38
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10a      	bne.n	80034b6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80034a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a4:	f383 8811 	msr	BASEPRI, r3
 80034a8:	f3bf 8f6f 	isb	sy
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80034b2:	bf00      	nop
 80034b4:	e7fe      	b.n	80034b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d103      	bne.n	80034c4 <xQueueGenericSendFromISR+0x3c>
 80034bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <xQueueGenericSendFromISR+0x40>
 80034c4:	2301      	movs	r3, #1
 80034c6:	e000      	b.n	80034ca <xQueueGenericSendFromISR+0x42>
 80034c8:	2300      	movs	r3, #0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10a      	bne.n	80034e4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80034ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d2:	f383 8811 	msr	BASEPRI, r3
 80034d6:	f3bf 8f6f 	isb	sy
 80034da:	f3bf 8f4f 	dsb	sy
 80034de:	623b      	str	r3, [r7, #32]
}
 80034e0:	bf00      	nop
 80034e2:	e7fe      	b.n	80034e2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d103      	bne.n	80034f2 <xQueueGenericSendFromISR+0x6a>
 80034ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d101      	bne.n	80034f6 <xQueueGenericSendFromISR+0x6e>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <xQueueGenericSendFromISR+0x70>
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	61fb      	str	r3, [r7, #28]
}
 800350e:	bf00      	nop
 8003510:	e7fe      	b.n	8003510 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003512:	f001 fe5d 	bl	80051d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003516:	f3ef 8211 	mrs	r2, BASEPRI
 800351a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	61ba      	str	r2, [r7, #24]
 800352c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800352e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003530:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	429a      	cmp	r2, r3
 800353c:	d302      	bcc.n	8003544 <xQueueGenericSendFromISR+0xbc>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b02      	cmp	r3, #2
 8003542:	d12c      	bne.n	800359e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003554:	f000 f910 	bl	8003778 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003558:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800355c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003560:	d112      	bne.n	8003588 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	2b00      	cmp	r3, #0
 8003568:	d016      	beq.n	8003598 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800356a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356c:	3324      	adds	r3, #36	; 0x24
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fec4 	bl	80042fc <xTaskRemoveFromEventList>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00e      	beq.n	8003598 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	601a      	str	r2, [r3, #0]
 8003586:	e007      	b.n	8003598 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800358c:	3301      	adds	r3, #1
 800358e:	b2db      	uxtb	r3, r3
 8003590:	b25a      	sxtb	r2, r3
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003598:	2301      	movs	r3, #1
 800359a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800359c:	e001      	b.n	80035a2 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	637b      	str	r3, [r7, #52]	; 0x34
 80035a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80035ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3738      	adds	r7, #56	; 0x38
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b08c      	sub	sp, #48	; 0x30
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80035c4:	2300      	movs	r3, #0
 80035c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80035cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10a      	bne.n	80035e8 <xQueueReceive+0x30>
	__asm volatile
 80035d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d6:	f383 8811 	msr	BASEPRI, r3
 80035da:	f3bf 8f6f 	isb	sy
 80035de:	f3bf 8f4f 	dsb	sy
 80035e2:	623b      	str	r3, [r7, #32]
}
 80035e4:	bf00      	nop
 80035e6:	e7fe      	b.n	80035e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d103      	bne.n	80035f6 <xQueueReceive+0x3e>
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <xQueueReceive+0x42>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e000      	b.n	80035fc <xQueueReceive+0x44>
 80035fa:	2300      	movs	r3, #0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d10a      	bne.n	8003616 <xQueueReceive+0x5e>
	__asm volatile
 8003600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003604:	f383 8811 	msr	BASEPRI, r3
 8003608:	f3bf 8f6f 	isb	sy
 800360c:	f3bf 8f4f 	dsb	sy
 8003610:	61fb      	str	r3, [r7, #28]
}
 8003612:	bf00      	nop
 8003614:	e7fe      	b.n	8003614 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003616:	f001 f833 	bl	8004680 <xTaskGetSchedulerState>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d102      	bne.n	8003626 <xQueueReceive+0x6e>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <xQueueReceive+0x72>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <xQueueReceive+0x74>
 800362a:	2300      	movs	r3, #0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <xQueueReceive+0x8e>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	61bb      	str	r3, [r7, #24]
}
 8003642:	bf00      	nop
 8003644:	e7fe      	b.n	8003644 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003646:	f001 fd01 	bl	800504c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800364a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01f      	beq.n	8003696 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003656:	68b9      	ldr	r1, [r7, #8]
 8003658:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800365a:	f000 f8f7 	bl	800384c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800365e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003660:	1e5a      	subs	r2, r3, #1
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00f      	beq.n	800368e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	3310      	adds	r3, #16
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fe42 	bl	80042fc <xTaskRemoveFromEventList>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800367e:	4b3d      	ldr	r3, [pc, #244]	; (8003774 <xQueueReceive+0x1bc>)
 8003680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	f3bf 8f4f 	dsb	sy
 800368a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800368e:	f001 fd0d 	bl	80050ac <vPortExitCritical>
				return pdPASS;
 8003692:	2301      	movs	r3, #1
 8003694:	e069      	b.n	800376a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800369c:	f001 fd06 	bl	80050ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e062      	b.n	800376a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80036a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80036aa:	f107 0310 	add.w	r3, r7, #16
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fe88 	bl	80043c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80036b8:	f001 fcf8 	bl	80050ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80036bc:	f000 fbfa 	bl	8003eb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80036c0:	f001 fcc4 	bl	800504c <vPortEnterCritical>
 80036c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d103      	bne.n	80036da <xQueueReceive+0x122>
 80036d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e0:	b25b      	sxtb	r3, r3
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e6:	d103      	bne.n	80036f0 <xQueueReceive+0x138>
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036f0:	f001 fcdc 	bl	80050ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80036f4:	1d3a      	adds	r2, r7, #4
 80036f6:	f107 0310 	add.w	r3, r7, #16
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fe77 	bl	80043f0 <xTaskCheckForTimeOut>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d123      	bne.n	8003750 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003708:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800370a:	f000 f917 	bl	800393c <prvIsQueueEmpty>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d017      	beq.n	8003744 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003716:	3324      	adds	r3, #36	; 0x24
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f000 fd9d 	bl	800425c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003722:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003724:	f000 f8b8 	bl	8003898 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003728:	f000 fbd2 	bl	8003ed0 <xTaskResumeAll>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d189      	bne.n	8003646 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <xQueueReceive+0x1bc>)
 8003734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
 8003742:	e780      	b.n	8003646 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003746:	f000 f8a7 	bl	8003898 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800374a:	f000 fbc1 	bl	8003ed0 <xTaskResumeAll>
 800374e:	e77a      	b.n	8003646 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003750:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003752:	f000 f8a1 	bl	8003898 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003756:	f000 fbbb 	bl	8003ed0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800375a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800375c:	f000 f8ee 	bl	800393c <prvIsQueueEmpty>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	f43f af6f 	beq.w	8003646 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003768:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800376a:	4618      	mov	r0, r3
 800376c:	3730      	adds	r7, #48	; 0x30
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d14d      	bne.n	800383a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 ff8a 	bl	80046bc <xTaskPriorityDisinherit>
 80037a8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	605a      	str	r2, [r3, #4]
 80037b0:	e043      	b.n	800383a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d119      	bne.n	80037ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6898      	ldr	r0, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c0:	461a      	mov	r2, r3
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	f001 ff3e 	bl	8005644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689a      	ldr	r2, [r3, #8]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	441a      	add	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689a      	ldr	r2, [r3, #8]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d32b      	bcc.n	800383a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	609a      	str	r2, [r3, #8]
 80037ea:	e026      	b.n	800383a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	68d8      	ldr	r0, [r3, #12]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f4:	461a      	mov	r2, r3
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	f001 ff24 	bl	8005644 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68da      	ldr	r2, [r3, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	425b      	negs	r3, r3
 8003806:	441a      	add	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d207      	bcs.n	8003828 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	425b      	negs	r3, r3
 8003822:	441a      	add	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d105      	bne.n	800383a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3b01      	subs	r3, #1
 8003838:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003842:	697b      	ldr	r3, [r7, #20]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d018      	beq.n	8003890 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	441a      	add	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	d303      	bcc.n	8003880 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	68d9      	ldr	r1, [r3, #12]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	461a      	mov	r2, r3
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f001 feda 	bl	8005644 <memcpy>
	}
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80038a0:	f001 fbd4 	bl	800504c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038ac:	e011      	b.n	80038d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d012      	beq.n	80038dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3324      	adds	r3, #36	; 0x24
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fd1e 	bl	80042fc <xTaskRemoveFromEventList>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80038c6:	f000 fdf5 	bl	80044b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b2db      	uxtb	r3, r3
 80038d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	dce9      	bgt.n	80038ae <prvUnlockQueue+0x16>
 80038da:	e000      	b.n	80038de <prvUnlockQueue+0x46>
					break;
 80038dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	22ff      	movs	r2, #255	; 0xff
 80038e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038e6:	f001 fbe1 	bl	80050ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038ea:	f001 fbaf 	bl	800504c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f6:	e011      	b.n	800391c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	691b      	ldr	r3, [r3, #16]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3310      	adds	r3, #16
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fcf9 	bl	80042fc <xTaskRemoveFromEventList>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003910:	f000 fdd0 	bl	80044b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	3b01      	subs	r3, #1
 8003918:	b2db      	uxtb	r3, r3
 800391a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800391c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003920:	2b00      	cmp	r3, #0
 8003922:	dce9      	bgt.n	80038f8 <prvUnlockQueue+0x60>
 8003924:	e000      	b.n	8003928 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003926:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003930:	f001 fbbc 	bl	80050ac <vPortExitCritical>
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003944:	f001 fb82 	bl	800504c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003950:	2301      	movs	r3, #1
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	e001      	b.n	800395a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003956:	2300      	movs	r3, #0
 8003958:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800395a:	f001 fba7 	bl	80050ac <vPortExitCritical>

	return xReturn;
 800395e:	68fb      	ldr	r3, [r7, #12]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b084      	sub	sp, #16
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003970:	f001 fb6c 	bl	800504c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	429a      	cmp	r2, r3
 800397e:	d102      	bne.n	8003986 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e001      	b.n	800398a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003986:	2300      	movs	r3, #0
 8003988:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800398a:	f001 fb8f 	bl	80050ac <vPortExitCritical>

	return xReturn;
 800398e:	68fb      	ldr	r3, [r7, #12]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	e014      	b.n	80039d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80039a8:	4a0e      	ldr	r2, [pc, #56]	; (80039e4 <vQueueAddToRegistry+0x4c>)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80039b4:	490b      	ldr	r1, [pc, #44]	; (80039e4 <vQueueAddToRegistry+0x4c>)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80039be:	4a09      	ldr	r2, [pc, #36]	; (80039e4 <vQueueAddToRegistry+0x4c>)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	4413      	add	r3, r2
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039ca:	e006      	b.n	80039da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2b07      	cmp	r3, #7
 80039d6:	d9e7      	bls.n	80039a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039d8:	bf00      	nop
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr
 80039e4:	20001e68 	.word	0x20001e68

080039e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80039f8:	f001 fb28 	bl	800504c <vPortEnterCritical>
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a02:	b25b      	sxtb	r3, r3
 8003a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a08:	d103      	bne.n	8003a12 <vQueueWaitForMessageRestricted+0x2a>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a18:	b25b      	sxtb	r3, r3
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d103      	bne.n	8003a28 <vQueueWaitForMessageRestricted+0x40>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a28:	f001 fb40 	bl	80050ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68b9      	ldr	r1, [r7, #8]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fc31 	bl	80042a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a42:	6978      	ldr	r0, [r7, #20]
 8003a44:	f7ff ff28 	bl	8003898 <prvUnlockQueue>
	}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b08e      	sub	sp, #56	; 0x38
 8003a54:	af04      	add	r7, sp, #16
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	607a      	str	r2, [r7, #4]
 8003a5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10a      	bne.n	8003a7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	623b      	str	r3, [r7, #32]
}
 8003a76:	bf00      	nop
 8003a78:	e7fe      	b.n	8003a78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <xTaskCreateStatic+0x46>
	__asm volatile
 8003a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a84:	f383 8811 	msr	BASEPRI, r3
 8003a88:	f3bf 8f6f 	isb	sy
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	61fb      	str	r3, [r7, #28]
}
 8003a92:	bf00      	nop
 8003a94:	e7fe      	b.n	8003a94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003a96:	235c      	movs	r3, #92	; 0x5c
 8003a98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	2b5c      	cmp	r3, #92	; 0x5c
 8003a9e:	d00a      	beq.n	8003ab6 <xTaskCreateStatic+0x66>
	__asm volatile
 8003aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa4:	f383 8811 	msr	BASEPRI, r3
 8003aa8:	f3bf 8f6f 	isb	sy
 8003aac:	f3bf 8f4f 	dsb	sy
 8003ab0:	61bb      	str	r3, [r7, #24]
}
 8003ab2:	bf00      	nop
 8003ab4:	e7fe      	b.n	8003ab4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01e      	beq.n	8003afa <xTaskCreateStatic+0xaa>
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01b      	beq.n	8003afa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003aca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	2202      	movs	r2, #2
 8003ad0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	9303      	str	r3, [sp, #12]
 8003ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ada:	9302      	str	r3, [sp, #8]
 8003adc:	f107 0314 	add.w	r3, r7, #20
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 f850 	bl	8003b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003af2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af4:	f000 f8d4 	bl	8003ca0 <prvAddNewTaskToReadyList>
 8003af8:	e001      	b.n	8003afe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003afe:	697b      	ldr	r3, [r7, #20]
	}
 8003b00:	4618      	mov	r0, r3
 8003b02:	3728      	adds	r7, #40	; 0x28
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	; 0x30
 8003b0c:	af04      	add	r7, sp, #16
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f001 fb95 	bl	800524c <pvPortMalloc>
 8003b22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003b2a:	205c      	movs	r0, #92	; 0x5c
 8003b2c:	f001 fb8e 	bl	800524c <pvPortMalloc>
 8003b30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8003b3e:	e005      	b.n	8003b4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b40:	6978      	ldr	r0, [r7, #20]
 8003b42:	f001 fc47 	bl	80053d4 <vPortFree>
 8003b46:	e001      	b.n	8003b4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d017      	beq.n	8003b82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b5a:	88fa      	ldrh	r2, [r7, #6]
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68b9      	ldr	r1, [r7, #8]
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f80e 	bl	8003b92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b76:	69f8      	ldr	r0, [r7, #28]
 8003b78:	f000 f892 	bl	8003ca0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	61bb      	str	r3, [r7, #24]
 8003b80:	e002      	b.n	8003b88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003b88:	69bb      	ldr	r3, [r7, #24]
	}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b088      	sub	sp, #32
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	60f8      	str	r0, [r7, #12]
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	461a      	mov	r2, r3
 8003baa:	21a5      	movs	r1, #165	; 0xa5
 8003bac:	f001 fd58 	bl	8005660 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	4413      	add	r3, r2
 8003bc0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	f023 0307 	bic.w	r3, r3, #7
 8003bc8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <prvInitialiseNewTask+0x58>
	__asm volatile
 8003bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd8:	f383 8811 	msr	BASEPRI, r3
 8003bdc:	f3bf 8f6f 	isb	sy
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	617b      	str	r3, [r7, #20]
}
 8003be6:	bf00      	nop
 8003be8:	e7fe      	b.n	8003be8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	61fb      	str	r3, [r7, #28]
 8003bee:	e012      	b.n	8003c16 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	7819      	ldrb	r1, [r3, #0]
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3334      	adds	r3, #52	; 0x34
 8003c00:	460a      	mov	r2, r1
 8003c02:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d006      	beq.n	8003c1e <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	3301      	adds	r3, #1
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	2b0f      	cmp	r3, #15
 8003c1a:	d9e9      	bls.n	8003bf0 <prvInitialiseNewTask+0x5e>
 8003c1c:	e000      	b.n	8003c20 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003c1e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	2b37      	cmp	r3, #55	; 0x37
 8003c2c:	d901      	bls.n	8003c32 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c2e:	2337      	movs	r3, #55	; 0x37
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c36:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c3c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	2200      	movs	r2, #0
 8003c42:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff f98c 	bl	8002f66 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f987 	bl	8002f66 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c6c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c70:	2200      	movs	r2, #0
 8003c72:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	69b8      	ldr	r0, [r7, #24]
 8003c82:	f001 f8ef 	bl	8004e64 <pxPortInitialiseStack>
 8003c86:	4602      	mov	r2, r0
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c96:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c98:	bf00      	nop
 8003c9a:	3720      	adds	r7, #32
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003ca8:	f001 f9d0 	bl	800504c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003cac:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003cb6:	4b2c      	ldr	r3, [pc, #176]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003cbe:	4a2a      	ldr	r2, [pc, #168]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003cc4:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <prvAddNewTaskToReadyList+0xc4>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d110      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003ccc:	f000 fc16 	bl	80044fc <prvInitialiseTaskLists>
 8003cd0:	e00d      	b.n	8003cee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003cd2:	4b26      	ldr	r3, [pc, #152]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d109      	bne.n	8003cee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003cda:	4b23      	ldr	r3, [pc, #140]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d802      	bhi.n	8003cee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ce8:	4a1f      	ldr	r2, [pc, #124]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003cf6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003cf8:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <prvAddNewTaskToReadyList+0xd0>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4b1b      	ldr	r3, [pc, #108]	; (8003d74 <prvAddNewTaskToReadyList+0xd4>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d903      	bls.n	8003d14 <prvAddNewTaskToReadyList+0x74>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d10:	4a18      	ldr	r2, [pc, #96]	; (8003d74 <prvAddNewTaskToReadyList+0xd4>)
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	4613      	mov	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	4413      	add	r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <prvAddNewTaskToReadyList+0xd8>)
 8003d22:	441a      	add	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3304      	adds	r3, #4
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4610      	mov	r0, r2
 8003d2c:	f7ff f927 	bl	8002f7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003d30:	f001 f9bc 	bl	80050ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <prvAddNewTaskToReadyList+0xcc>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00e      	beq.n	8003d5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <prvAddNewTaskToReadyList+0xc8>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d207      	bcs.n	8003d5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003d4a:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <prvAddNewTaskToReadyList+0xdc>)
 8003d4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	f3bf 8f4f 	dsb	sy
 8003d56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000fbc 	.word	0x20000fbc
 8003d68:	20000ae8 	.word	0x20000ae8
 8003d6c:	20000fc8 	.word	0x20000fc8
 8003d70:	20000fd8 	.word	0x20000fd8
 8003d74:	20000fc4 	.word	0x20000fc4
 8003d78:	20000aec 	.word	0x20000aec
 8003d7c:	e000ed04 	.word	0xe000ed04

08003d80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d017      	beq.n	8003dc2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <vTaskDelay+0x60>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <vTaskDelay+0x30>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	60bb      	str	r3, [r7, #8]
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003db0:	f000 f880 	bl	8003eb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003db4:	2100      	movs	r1, #0
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 fcee 	bl	8004798 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003dbc:	f000 f888 	bl	8003ed0 <xTaskResumeAll>
 8003dc0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d107      	bne.n	8003dd8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <vTaskDelay+0x64>)
 8003dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003dd8:	bf00      	nop
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000fe4 	.word	0x20000fe4
 8003de4:	e000ed04 	.word	0xe000ed04

08003de8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003df6:	463a      	mov	r2, r7
 8003df8:	1d39      	adds	r1, r7, #4
 8003dfa:	f107 0308 	add.w	r3, r7, #8
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f7ff f860 	bl	8002ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e04:	6839      	ldr	r1, [r7, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	9202      	str	r2, [sp, #8]
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	2300      	movs	r3, #0
 8003e14:	460a      	mov	r2, r1
 8003e16:	4921      	ldr	r1, [pc, #132]	; (8003e9c <vTaskStartScheduler+0xb4>)
 8003e18:	4821      	ldr	r0, [pc, #132]	; (8003ea0 <vTaskStartScheduler+0xb8>)
 8003e1a:	f7ff fe19 	bl	8003a50 <xTaskCreateStatic>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	4a20      	ldr	r2, [pc, #128]	; (8003ea4 <vTaskStartScheduler+0xbc>)
 8003e22:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003e24:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <vTaskStartScheduler+0xbc>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
 8003e30:	e001      	b.n	8003e36 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d102      	bne.n	8003e42 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003e3c:	f000 fd00 	bl	8004840 <xTimerCreateTimerTask>
 8003e40:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d116      	bne.n	8003e76 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	613b      	str	r3, [r7, #16]
}
 8003e5a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003e5c:	4b12      	ldr	r3, [pc, #72]	; (8003ea8 <vTaskStartScheduler+0xc0>)
 8003e5e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e62:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003e64:	4b11      	ldr	r3, [pc, #68]	; (8003eac <vTaskStartScheduler+0xc4>)
 8003e66:	2201      	movs	r2, #1
 8003e68:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003e6a:	4b11      	ldr	r3, [pc, #68]	; (8003eb0 <vTaskStartScheduler+0xc8>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003e70:	f001 f87a 	bl	8004f68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003e74:	e00e      	b.n	8003e94 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7c:	d10a      	bne.n	8003e94 <vTaskStartScheduler+0xac>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60fb      	str	r3, [r7, #12]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <vTaskStartScheduler+0xaa>
}
 8003e94:	bf00      	nop
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	0800570c 	.word	0x0800570c
 8003ea0:	080044cd 	.word	0x080044cd
 8003ea4:	20000fe0 	.word	0x20000fe0
 8003ea8:	20000fdc 	.word	0x20000fdc
 8003eac:	20000fc8 	.word	0x20000fc8
 8003eb0:	20000fc0 	.word	0x20000fc0

08003eb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <vTaskSuspendAll+0x18>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a03      	ldr	r2, [pc, #12]	; (8003ecc <vTaskSuspendAll+0x18>)
 8003ec0:	6013      	str	r3, [r2, #0]
}
 8003ec2:	bf00      	nop
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bc80      	pop	{r7}
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	20000fe4 	.word	0x20000fe4

08003ed0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003ede:	4b42      	ldr	r3, [pc, #264]	; (8003fe8 <xTaskResumeAll+0x118>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <xTaskResumeAll+0x2c>
	__asm volatile
 8003ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eea:	f383 8811 	msr	BASEPRI, r3
 8003eee:	f3bf 8f6f 	isb	sy
 8003ef2:	f3bf 8f4f 	dsb	sy
 8003ef6:	603b      	str	r3, [r7, #0]
}
 8003ef8:	bf00      	nop
 8003efa:	e7fe      	b.n	8003efa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003efc:	f001 f8a6 	bl	800504c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003f00:	4b39      	ldr	r3, [pc, #228]	; (8003fe8 <xTaskResumeAll+0x118>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	3b01      	subs	r3, #1
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <xTaskResumeAll+0x118>)
 8003f08:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <xTaskResumeAll+0x118>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d162      	bne.n	8003fd8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003f12:	4b36      	ldr	r3, [pc, #216]	; (8003fec <xTaskResumeAll+0x11c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d05e      	beq.n	8003fd8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f1a:	e02f      	b.n	8003f7c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003f1c:	4b34      	ldr	r3, [pc, #208]	; (8003ff0 <xTaskResumeAll+0x120>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff f883 	bl	8003034 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	3304      	adds	r3, #4
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff f87e 	bl	8003034 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f3c:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <xTaskResumeAll+0x124>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d903      	bls.n	8003f4c <xTaskResumeAll+0x7c>
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <xTaskResumeAll+0x124>)
 8003f4a:	6013      	str	r3, [r2, #0]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <xTaskResumeAll+0x128>)
 8003f5a:	441a      	add	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3304      	adds	r3, #4
 8003f60:	4619      	mov	r1, r3
 8003f62:	4610      	mov	r0, r2
 8003f64:	f7ff f80b 	bl	8002f7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6c:	4b23      	ldr	r3, [pc, #140]	; (8003ffc <xTaskResumeAll+0x12c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d302      	bcc.n	8003f7c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003f76:	4b22      	ldr	r3, [pc, #136]	; (8004000 <xTaskResumeAll+0x130>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003f7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ff0 <xTaskResumeAll+0x120>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1cb      	bne.n	8003f1c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003f8a:	f000 fb55 	bl	8004638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <xTaskResumeAll+0x134>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d010      	beq.n	8003fbc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003f9a:	f000 f845 	bl	8004028 <xTaskIncrementTick>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003fa4:	4b16      	ldr	r3, [pc, #88]	; (8004000 <xTaskResumeAll+0x130>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f1      	bne.n	8003f9a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003fb6:	4b13      	ldr	r3, [pc, #76]	; (8004004 <xTaskResumeAll+0x134>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003fbc:	4b10      	ldr	r3, [pc, #64]	; (8004000 <xTaskResumeAll+0x130>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003fc8:	4b0f      	ldr	r3, [pc, #60]	; (8004008 <xTaskResumeAll+0x138>)
 8003fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fce:	601a      	str	r2, [r3, #0]
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003fd8:	f001 f868 	bl	80050ac <vPortExitCritical>

	return xAlreadyYielded;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3710      	adds	r7, #16
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20000fe4 	.word	0x20000fe4
 8003fec:	20000fbc 	.word	0x20000fbc
 8003ff0:	20000f7c 	.word	0x20000f7c
 8003ff4:	20000fc4 	.word	0x20000fc4
 8003ff8:	20000aec 	.word	0x20000aec
 8003ffc:	20000ae8 	.word	0x20000ae8
 8004000:	20000fd0 	.word	0x20000fd0
 8004004:	20000fcc 	.word	0x20000fcc
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004012:	4b04      	ldr	r3, [pc, #16]	; (8004024 <xTaskGetTickCount+0x18>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004018:	687b      	ldr	r3, [r7, #4]
}
 800401a:	4618      	mov	r0, r3
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	20000fc0 	.word	0x20000fc0

08004028 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800402e:	2300      	movs	r3, #0
 8004030:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004032:	4b51      	ldr	r3, [pc, #324]	; (8004178 <xTaskIncrementTick+0x150>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f040 808e 	bne.w	8004158 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800403c:	4b4f      	ldr	r3, [pc, #316]	; (800417c <xTaskIncrementTick+0x154>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3301      	adds	r3, #1
 8004042:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004044:	4a4d      	ldr	r2, [pc, #308]	; (800417c <xTaskIncrementTick+0x154>)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d120      	bne.n	8004092 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004050:	4b4b      	ldr	r3, [pc, #300]	; (8004180 <xTaskIncrementTick+0x158>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <xTaskIncrementTick+0x48>
	__asm volatile
 800405a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405e:	f383 8811 	msr	BASEPRI, r3
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	f3bf 8f4f 	dsb	sy
 800406a:	603b      	str	r3, [r7, #0]
}
 800406c:	bf00      	nop
 800406e:	e7fe      	b.n	800406e <xTaskIncrementTick+0x46>
 8004070:	4b43      	ldr	r3, [pc, #268]	; (8004180 <xTaskIncrementTick+0x158>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60fb      	str	r3, [r7, #12]
 8004076:	4b43      	ldr	r3, [pc, #268]	; (8004184 <xTaskIncrementTick+0x15c>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a41      	ldr	r2, [pc, #260]	; (8004180 <xTaskIncrementTick+0x158>)
 800407c:	6013      	str	r3, [r2, #0]
 800407e:	4a41      	ldr	r2, [pc, #260]	; (8004184 <xTaskIncrementTick+0x15c>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6013      	str	r3, [r2, #0]
 8004084:	4b40      	ldr	r3, [pc, #256]	; (8004188 <xTaskIncrementTick+0x160>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3301      	adds	r3, #1
 800408a:	4a3f      	ldr	r2, [pc, #252]	; (8004188 <xTaskIncrementTick+0x160>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	f000 fad3 	bl	8004638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <xTaskIncrementTick+0x164>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	693a      	ldr	r2, [r7, #16]
 8004098:	429a      	cmp	r2, r3
 800409a:	d34e      	bcc.n	800413a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800409c:	4b38      	ldr	r3, [pc, #224]	; (8004180 <xTaskIncrementTick+0x158>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <xTaskIncrementTick+0x82>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <xTaskIncrementTick+0x84>
 80040aa:	2300      	movs	r3, #0
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d004      	beq.n	80040ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b0:	4b36      	ldr	r3, [pc, #216]	; (800418c <xTaskIncrementTick+0x164>)
 80040b2:	f04f 32ff 	mov.w	r2, #4294967295
 80040b6:	601a      	str	r2, [r3, #0]
					break;
 80040b8:	e03f      	b.n	800413a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80040ba:	4b31      	ldr	r3, [pc, #196]	; (8004180 <xTaskIncrementTick+0x158>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d203      	bcs.n	80040da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80040d2:	4a2e      	ldr	r2, [pc, #184]	; (800418c <xTaskIncrementTick+0x164>)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6013      	str	r3, [r2, #0]
						break;
 80040d8:	e02f      	b.n	800413a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3304      	adds	r3, #4
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe ffa8 	bl	8003034 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe ff9f 	bl	8003034 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fa:	4b25      	ldr	r3, [pc, #148]	; (8004190 <xTaskIncrementTick+0x168>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d903      	bls.n	800410a <xTaskIncrementTick+0xe2>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004106:	4a22      	ldr	r2, [pc, #136]	; (8004190 <xTaskIncrementTick+0x168>)
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4613      	mov	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <xTaskIncrementTick+0x16c>)
 8004118:	441a      	add	r2, r3
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	3304      	adds	r3, #4
 800411e:	4619      	mov	r1, r3
 8004120:	4610      	mov	r0, r2
 8004122:	f7fe ff2c 	bl	8002f7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <xTaskIncrementTick+0x170>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	429a      	cmp	r2, r3
 8004132:	d3b3      	bcc.n	800409c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004134:	2301      	movs	r3, #1
 8004136:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004138:	e7b0      	b.n	800409c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <xTaskIncrementTick+0x170>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004140:	4914      	ldr	r1, [pc, #80]	; (8004194 <xTaskIncrementTick+0x16c>)
 8004142:	4613      	mov	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	440b      	add	r3, r1
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d907      	bls.n	8004162 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	e004      	b.n	8004162 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004158:	4b10      	ldr	r3, [pc, #64]	; (800419c <xTaskIncrementTick+0x174>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	3301      	adds	r3, #1
 800415e:	4a0f      	ldr	r2, [pc, #60]	; (800419c <xTaskIncrementTick+0x174>)
 8004160:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <xTaskIncrementTick+0x178>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d001      	beq.n	800416e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800416a:	2301      	movs	r3, #1
 800416c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800416e:	697b      	ldr	r3, [r7, #20]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000fe4 	.word	0x20000fe4
 800417c:	20000fc0 	.word	0x20000fc0
 8004180:	20000f74 	.word	0x20000f74
 8004184:	20000f78 	.word	0x20000f78
 8004188:	20000fd4 	.word	0x20000fd4
 800418c:	20000fdc 	.word	0x20000fdc
 8004190:	20000fc4 	.word	0x20000fc4
 8004194:	20000aec 	.word	0x20000aec
 8004198:	20000ae8 	.word	0x20000ae8
 800419c:	20000fcc 	.word	0x20000fcc
 80041a0:	20000fd0 	.word	0x20000fd0

080041a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80041aa:	4b27      	ldr	r3, [pc, #156]	; (8004248 <vTaskSwitchContext+0xa4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80041b2:	4b26      	ldr	r3, [pc, #152]	; (800424c <vTaskSwitchContext+0xa8>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80041b8:	e041      	b.n	800423e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <vTaskSwitchContext+0xa8>)
 80041bc:	2200      	movs	r2, #0
 80041be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80041c0:	4b23      	ldr	r3, [pc, #140]	; (8004250 <vTaskSwitchContext+0xac>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	60fb      	str	r3, [r7, #12]
 80041c6:	e010      	b.n	80041ea <vTaskSwitchContext+0x46>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d10a      	bne.n	80041e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	607b      	str	r3, [r7, #4]
}
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <vTaskSwitchContext+0x3e>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	3b01      	subs	r3, #1
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	491a      	ldr	r1, [pc, #104]	; (8004254 <vTaskSwitchContext+0xb0>)
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	4613      	mov	r3, r2
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	440b      	add	r3, r1
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0e4      	beq.n	80041c8 <vTaskSwitchContext+0x24>
 80041fe:	68fa      	ldr	r2, [r7, #12]
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4a12      	ldr	r2, [pc, #72]	; (8004254 <vTaskSwitchContext+0xb0>)
 800420a:	4413      	add	r3, r2
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	685a      	ldr	r2, [r3, #4]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	605a      	str	r2, [r3, #4]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	3308      	adds	r3, #8
 8004220:	429a      	cmp	r2, r3
 8004222:	d104      	bne.n	800422e <vTaskSwitchContext+0x8a>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	605a      	str	r2, [r3, #4]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <vTaskSwitchContext+0xb4>)
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	4a05      	ldr	r2, [pc, #20]	; (8004250 <vTaskSwitchContext+0xac>)
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6013      	str	r3, [r2, #0]
}
 800423e:	bf00      	nop
 8004240:	3714      	adds	r7, #20
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr
 8004248:	20000fe4 	.word	0x20000fe4
 800424c:	20000fd0 	.word	0x20000fd0
 8004250:	20000fc4 	.word	0x20000fc4
 8004254:	20000aec 	.word	0x20000aec
 8004258:	20000ae8 	.word	0x20000ae8

0800425c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10a      	bne.n	8004282 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800426c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004270:	f383 8811 	msr	BASEPRI, r3
 8004274:	f3bf 8f6f 	isb	sy
 8004278:	f3bf 8f4f 	dsb	sy
 800427c:	60fb      	str	r3, [r7, #12]
}
 800427e:	bf00      	nop
 8004280:	e7fe      	b.n	8004280 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <vTaskPlaceOnEventList+0x44>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3318      	adds	r3, #24
 8004288:	4619      	mov	r1, r3
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7fe fe9a 	bl	8002fc4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004290:	2101      	movs	r1, #1
 8004292:	6838      	ldr	r0, [r7, #0]
 8004294:	f000 fa80 	bl	8004798 <prvAddCurrentTaskToDelayedList>
}
 8004298:	bf00      	nop
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	20000ae8 	.word	0x20000ae8

080042a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	617b      	str	r3, [r7, #20]
}
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80042cc:	4b0a      	ldr	r3, [pc, #40]	; (80042f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3318      	adds	r3, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f7fe fe52 	bl	8002f7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d002      	beq.n	80042e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 fa55 	bl	8004798 <prvAddCurrentTaskToDelayedList>
	}
 80042ee:	bf00      	nop
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	20000ae8 	.word	0x20000ae8

080042fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10a      	bne.n	8004328 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	e7fe      	b.n	8004326 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3318      	adds	r3, #24
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fe81 	bl	8003034 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004332:	4b1e      	ldr	r3, [pc, #120]	; (80043ac <xTaskRemoveFromEventList+0xb0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d11d      	bne.n	8004376 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3304      	adds	r3, #4
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe fe78 	bl	8003034 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004348:	4b19      	ldr	r3, [pc, #100]	; (80043b0 <xTaskRemoveFromEventList+0xb4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d903      	bls.n	8004358 <xTaskRemoveFromEventList+0x5c>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a16      	ldr	r2, [pc, #88]	; (80043b0 <xTaskRemoveFromEventList+0xb4>)
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435c:	4613      	mov	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <xTaskRemoveFromEventList+0xb8>)
 8004366:	441a      	add	r2, r3
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	3304      	adds	r3, #4
 800436c:	4619      	mov	r1, r3
 800436e:	4610      	mov	r0, r2
 8004370:	f7fe fe05 	bl	8002f7e <vListInsertEnd>
 8004374:	e005      	b.n	8004382 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	3318      	adds	r3, #24
 800437a:	4619      	mov	r1, r3
 800437c:	480e      	ldr	r0, [pc, #56]	; (80043b8 <xTaskRemoveFromEventList+0xbc>)
 800437e:	f7fe fdfe 	bl	8002f7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	4b0d      	ldr	r3, [pc, #52]	; (80043bc <xTaskRemoveFromEventList+0xc0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800438c:	429a      	cmp	r2, r3
 800438e:	d905      	bls.n	800439c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004390:	2301      	movs	r3, #1
 8004392:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <xTaskRemoveFromEventList+0xc4>)
 8004396:	2201      	movs	r2, #1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	e001      	b.n	80043a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80043a0:	697b      	ldr	r3, [r7, #20]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3718      	adds	r7, #24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	20000fe4 	.word	0x20000fe4
 80043b0:	20000fc4 	.word	0x20000fc4
 80043b4:	20000aec 	.word	0x20000aec
 80043b8:	20000f7c 	.word	0x20000f7c
 80043bc:	20000ae8 	.word	0x20000ae8
 80043c0:	20000fd0 	.word	0x20000fd0

080043c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <vTaskInternalSetTimeOutState+0x24>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043d4:	4b05      	ldr	r3, [pc, #20]	; (80043ec <vTaskInternalSetTimeOutState+0x28>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	605a      	str	r2, [r3, #4]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	20000fd4 	.word	0x20000fd4
 80043ec:	20000fc0 	.word	0x20000fc0

080043f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b088      	sub	sp, #32
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	613b      	str	r3, [r7, #16]
}
 8004412:	bf00      	nop
 8004414:	e7fe      	b.n	8004414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10a      	bne.n	8004432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	e7fe      	b.n	8004430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004432:	f000 fe0b 	bl	800504c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <xTaskCheckForTimeOut+0xbc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	69ba      	ldr	r2, [r7, #24]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444e:	d102      	bne.n	8004456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e023      	b.n	800449e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	4b15      	ldr	r3, [pc, #84]	; (80044b0 <xTaskCheckForTimeOut+0xc0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d007      	beq.n	8004472 <xTaskCheckForTimeOut+0x82>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	69ba      	ldr	r2, [r7, #24]
 8004468:	429a      	cmp	r2, r3
 800446a:	d302      	bcc.n	8004472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
 8004470:	e015      	b.n	800449e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	697a      	ldr	r2, [r7, #20]
 8004478:	429a      	cmp	r2, r3
 800447a:	d20b      	bcs.n	8004494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7ff ff9b 	bl	80043c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800448e:	2300      	movs	r3, #0
 8004490:	61fb      	str	r3, [r7, #28]
 8004492:	e004      	b.n	800449e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800449a:	2301      	movs	r3, #1
 800449c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800449e:	f000 fe05 	bl	80050ac <vPortExitCritical>

	return xReturn;
 80044a2:	69fb      	ldr	r3, [r7, #28]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000fc0 	.word	0x20000fc0
 80044b0:	20000fd4 	.word	0x20000fd4

080044b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80044b8:	4b03      	ldr	r3, [pc, #12]	; (80044c8 <vTaskMissedYield+0x14>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	601a      	str	r2, [r3, #0]
}
 80044be:	bf00      	nop
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bc80      	pop	{r7}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	20000fd0 	.word	0x20000fd0

080044cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044d4:	f000 f852 	bl	800457c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <prvIdleTask+0x28>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d9f9      	bls.n	80044d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044e0:	4b05      	ldr	r3, [pc, #20]	; (80044f8 <prvIdleTask+0x2c>)
 80044e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044f0:	e7f0      	b.n	80044d4 <prvIdleTask+0x8>
 80044f2:	bf00      	nop
 80044f4:	20000aec 	.word	0x20000aec
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004502:	2300      	movs	r3, #0
 8004504:	607b      	str	r3, [r7, #4]
 8004506:	e00c      	b.n	8004522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	009b      	lsls	r3, r3, #2
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4a12      	ldr	r2, [pc, #72]	; (800455c <prvInitialiseTaskLists+0x60>)
 8004514:	4413      	add	r3, r2
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fd06 	bl	8002f28 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3301      	adds	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b37      	cmp	r3, #55	; 0x37
 8004526:	d9ef      	bls.n	8004508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004528:	480d      	ldr	r0, [pc, #52]	; (8004560 <prvInitialiseTaskLists+0x64>)
 800452a:	f7fe fcfd 	bl	8002f28 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800452e:	480d      	ldr	r0, [pc, #52]	; (8004564 <prvInitialiseTaskLists+0x68>)
 8004530:	f7fe fcfa 	bl	8002f28 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004534:	480c      	ldr	r0, [pc, #48]	; (8004568 <prvInitialiseTaskLists+0x6c>)
 8004536:	f7fe fcf7 	bl	8002f28 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800453a:	480c      	ldr	r0, [pc, #48]	; (800456c <prvInitialiseTaskLists+0x70>)
 800453c:	f7fe fcf4 	bl	8002f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004540:	480b      	ldr	r0, [pc, #44]	; (8004570 <prvInitialiseTaskLists+0x74>)
 8004542:	f7fe fcf1 	bl	8002f28 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <prvInitialiseTaskLists+0x78>)
 8004548:	4a05      	ldr	r2, [pc, #20]	; (8004560 <prvInitialiseTaskLists+0x64>)
 800454a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800454c:	4b0a      	ldr	r3, [pc, #40]	; (8004578 <prvInitialiseTaskLists+0x7c>)
 800454e:	4a05      	ldr	r2, [pc, #20]	; (8004564 <prvInitialiseTaskLists+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
}
 8004552:	bf00      	nop
 8004554:	3708      	adds	r7, #8
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000aec 	.word	0x20000aec
 8004560:	20000f4c 	.word	0x20000f4c
 8004564:	20000f60 	.word	0x20000f60
 8004568:	20000f7c 	.word	0x20000f7c
 800456c:	20000f90 	.word	0x20000f90
 8004570:	20000fa8 	.word	0x20000fa8
 8004574:	20000f74 	.word	0x20000f74
 8004578:	20000f78 	.word	0x20000f78

0800457c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004582:	e019      	b.n	80045b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004584:	f000 fd62 	bl	800504c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004588:	4b10      	ldr	r3, [pc, #64]	; (80045cc <prvCheckTasksWaitingTermination+0x50>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3304      	adds	r3, #4
 8004594:	4618      	mov	r0, r3
 8004596:	f7fe fd4d 	bl	8003034 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800459a:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	3b01      	subs	r3, #1
 80045a0:	4a0b      	ldr	r2, [pc, #44]	; (80045d0 <prvCheckTasksWaitingTermination+0x54>)
 80045a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3b01      	subs	r3, #1
 80045aa:	4a0a      	ldr	r2, [pc, #40]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80045ae:	f000 fd7d 	bl	80050ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f810 	bl	80045d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045b8:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <prvCheckTasksWaitingTermination+0x58>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1e1      	bne.n	8004584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80045c0:	bf00      	nop
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	20000f90 	.word	0x20000f90
 80045d0:	20000fbc 	.word	0x20000fbc
 80045d4:	20000fa4 	.word	0x20000fa4

080045d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b084      	sub	sp, #16
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d108      	bne.n	80045fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fef0 	bl	80053d4 <vPortFree>
				vPortFree( pxTCB );
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 feed 	bl	80053d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80045fa:	e018      	b.n	800462e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004602:	2b01      	cmp	r3, #1
 8004604:	d103      	bne.n	800460e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fee4 	bl	80053d4 <vPortFree>
	}
 800460c:	e00f      	b.n	800462e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004614:	2b02      	cmp	r3, #2
 8004616:	d00a      	beq.n	800462e <prvDeleteTCB+0x56>
	__asm volatile
 8004618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461c:	f383 8811 	msr	BASEPRI, r3
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	f3bf 8f4f 	dsb	sy
 8004628:	60fb      	str	r3, [r7, #12]
}
 800462a:	bf00      	nop
 800462c:	e7fe      	b.n	800462c <prvDeleteTCB+0x54>
	}
 800462e:	bf00      	nop
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463e:	4b0e      	ldr	r3, [pc, #56]	; (8004678 <prvResetNextTaskUnblockTime+0x40>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <prvResetNextTaskUnblockTime+0x14>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <prvResetNextTaskUnblockTime+0x16>
 800464c:	2300      	movs	r3, #0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d004      	beq.n	800465c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <prvResetNextTaskUnblockTime+0x44>)
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800465a:	e008      	b.n	800466e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <prvResetNextTaskUnblockTime+0x40>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	4a04      	ldr	r2, [pc, #16]	; (800467c <prvResetNextTaskUnblockTime+0x44>)
 800466c:	6013      	str	r3, [r2, #0]
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr
 8004678:	20000f74 	.word	0x20000f74
 800467c:	20000fdc 	.word	0x20000fdc

08004680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004686:	4b0b      	ldr	r3, [pc, #44]	; (80046b4 <xTaskGetSchedulerState+0x34>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d102      	bne.n	8004694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800468e:	2301      	movs	r3, #1
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e008      	b.n	80046a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004694:	4b08      	ldr	r3, [pc, #32]	; (80046b8 <xTaskGetSchedulerState+0x38>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800469c:	2302      	movs	r3, #2
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	e001      	b.n	80046a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046a6:	687b      	ldr	r3, [r7, #4]
	}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bc80      	pop	{r7}
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000fc8 	.word	0x20000fc8
 80046b8:	20000fe4 	.word	0x20000fe4

080046bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046c8:	2300      	movs	r3, #0
 80046ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d056      	beq.n	8004780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <xTaskPriorityDisinherit+0xd0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	693a      	ldr	r2, [r7, #16]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d00a      	beq.n	80046f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80046dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	60fb      	str	r3, [r7, #12]
}
 80046ee:	bf00      	nop
 80046f0:	e7fe      	b.n	80046f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10a      	bne.n	8004710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80046fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	60bb      	str	r3, [r7, #8]
}
 800470c:	bf00      	nop
 800470e:	e7fe      	b.n	800470e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	1e5a      	subs	r2, r3, #1
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004722:	429a      	cmp	r2, r3
 8004724:	d02c      	beq.n	8004780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472a:	2b00      	cmp	r3, #0
 800472c:	d128      	bne.n	8004780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	3304      	adds	r3, #4
 8004732:	4618      	mov	r0, r3
 8004734:	f7fe fc7e 	bl	8003034 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <xTaskPriorityDisinherit+0xd4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d903      	bls.n	8004760 <xTaskPriorityDisinherit+0xa4>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	4a0c      	ldr	r2, [pc, #48]	; (8004790 <xTaskPriorityDisinherit+0xd4>)
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004764:	4613      	mov	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4a09      	ldr	r2, [pc, #36]	; (8004794 <xTaskPriorityDisinherit+0xd8>)
 800476e:	441a      	add	r2, r3
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	3304      	adds	r3, #4
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f7fe fc01 	bl	8002f7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800477c:	2301      	movs	r3, #1
 800477e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004780:	697b      	ldr	r3, [r7, #20]
	}
 8004782:	4618      	mov	r0, r3
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	20000ae8 	.word	0x20000ae8
 8004790:	20000fc4 	.word	0x20000fc4
 8004794:	20000aec 	.word	0x20000aec

08004798 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047a2:	4b21      	ldr	r3, [pc, #132]	; (8004828 <prvAddCurrentTaskToDelayedList+0x90>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047a8:	4b20      	ldr	r3, [pc, #128]	; (800482c <prvAddCurrentTaskToDelayedList+0x94>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fe fc40 	bl	8003034 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d10a      	bne.n	80047d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d007      	beq.n	80047d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047c2:	4b1a      	ldr	r3, [pc, #104]	; (800482c <prvAddCurrentTaskToDelayedList+0x94>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	4819      	ldr	r0, [pc, #100]	; (8004830 <prvAddCurrentTaskToDelayedList+0x98>)
 80047cc:	f7fe fbd7 	bl	8002f7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80047d0:	e026      	b.n	8004820 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4413      	add	r3, r2
 80047d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80047da:	4b14      	ldr	r3, [pc, #80]	; (800482c <prvAddCurrentTaskToDelayedList+0x94>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80047e2:	68ba      	ldr	r2, [r7, #8]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d209      	bcs.n	80047fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <prvAddCurrentTaskToDelayedList+0x9c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	4b0f      	ldr	r3, [pc, #60]	; (800482c <prvAddCurrentTaskToDelayedList+0x94>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3304      	adds	r3, #4
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f7fe fbe4 	bl	8002fc4 <vListInsert>
}
 80047fc:	e010      	b.n	8004820 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fe:	4b0e      	ldr	r3, [pc, #56]	; (8004838 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	4b0a      	ldr	r3, [pc, #40]	; (800482c <prvAddCurrentTaskToDelayedList+0x94>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	3304      	adds	r3, #4
 8004808:	4619      	mov	r1, r3
 800480a:	4610      	mov	r0, r2
 800480c:	f7fe fbda 	bl	8002fc4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004810:	4b0a      	ldr	r3, [pc, #40]	; (800483c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68ba      	ldr	r2, [r7, #8]
 8004816:	429a      	cmp	r2, r3
 8004818:	d202      	bcs.n	8004820 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800481a:	4a08      	ldr	r2, [pc, #32]	; (800483c <prvAddCurrentTaskToDelayedList+0xa4>)
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6013      	str	r3, [r2, #0]
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000fc0 	.word	0x20000fc0
 800482c:	20000ae8 	.word	0x20000ae8
 8004830:	20000fa8 	.word	0x20000fa8
 8004834:	20000f78 	.word	0x20000f78
 8004838:	20000f74 	.word	0x20000f74
 800483c:	20000fdc 	.word	0x20000fdc

08004840 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	; 0x28
 8004844:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800484a:	f000 facb 	bl	8004de4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800484e:	4b1c      	ldr	r3, [pc, #112]	; (80048c0 <xTimerCreateTimerTask+0x80>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d021      	beq.n	800489a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800485e:	1d3a      	adds	r2, r7, #4
 8004860:	f107 0108 	add.w	r1, r7, #8
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	4618      	mov	r0, r3
 800486a:	f7fe fb43 	bl	8002ef4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	9202      	str	r2, [sp, #8]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	2302      	movs	r3, #2
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2300      	movs	r3, #0
 800487e:	460a      	mov	r2, r1
 8004880:	4910      	ldr	r1, [pc, #64]	; (80048c4 <xTimerCreateTimerTask+0x84>)
 8004882:	4811      	ldr	r0, [pc, #68]	; (80048c8 <xTimerCreateTimerTask+0x88>)
 8004884:	f7ff f8e4 	bl	8003a50 <xTaskCreateStatic>
 8004888:	4603      	mov	r3, r0
 800488a:	4a10      	ldr	r2, [pc, #64]	; (80048cc <xTimerCreateTimerTask+0x8c>)
 800488c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800488e:	4b0f      	ldr	r3, [pc, #60]	; (80048cc <xTimerCreateTimerTask+0x8c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004896:	2301      	movs	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d10a      	bne.n	80048b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80048a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	613b      	str	r3, [r7, #16]
}
 80048b2:	bf00      	nop
 80048b4:	e7fe      	b.n	80048b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80048b6:	697b      	ldr	r3, [r7, #20]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3718      	adds	r7, #24
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20001018 	.word	0x20001018
 80048c4:	08005714 	.word	0x08005714
 80048c8:	080049ed 	.word	0x080049ed
 80048cc:	2000101c 	.word	0x2000101c

080048d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08a      	sub	sp, #40	; 0x28
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	60f8      	str	r0, [r7, #12]
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	607a      	str	r2, [r7, #4]
 80048dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80048de:	2300      	movs	r3, #0
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xTimerGenericCommand+0x2e>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	623b      	str	r3, [r7, #32]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80048fe:	4b1a      	ldr	r3, [pc, #104]	; (8004968 <xTimerGenericCommand+0x98>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d02a      	beq.n	800495c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b05      	cmp	r3, #5
 8004916:	dc18      	bgt.n	800494a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004918:	f7ff feb2 	bl	8004680 <xTaskGetSchedulerState>
 800491c:	4603      	mov	r3, r0
 800491e:	2b02      	cmp	r3, #2
 8004920:	d109      	bne.n	8004936 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004922:	4b11      	ldr	r3, [pc, #68]	; (8004968 <xTimerGenericCommand+0x98>)
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f107 0110 	add.w	r1, r7, #16
 800492a:	2300      	movs	r3, #0
 800492c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800492e:	f7fe fcad 	bl	800328c <xQueueGenericSend>
 8004932:	6278      	str	r0, [r7, #36]	; 0x24
 8004934:	e012      	b.n	800495c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004936:	4b0c      	ldr	r3, [pc, #48]	; (8004968 <xTimerGenericCommand+0x98>)
 8004938:	6818      	ldr	r0, [r3, #0]
 800493a:	f107 0110 	add.w	r1, r7, #16
 800493e:	2300      	movs	r3, #0
 8004940:	2200      	movs	r2, #0
 8004942:	f7fe fca3 	bl	800328c <xQueueGenericSend>
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
 8004948:	e008      	b.n	800495c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <xTimerGenericCommand+0x98>)
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	f107 0110 	add.w	r1, r7, #16
 8004952:	2300      	movs	r3, #0
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	f7fe fd97 	bl	8003488 <xQueueGenericSendFromISR>
 800495a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800495e:	4618      	mov	r0, r3
 8004960:	3728      	adds	r7, #40	; 0x28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20001018 	.word	0x20001018

0800496c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b088      	sub	sp, #32
 8004970:	af02      	add	r7, sp, #8
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004976:	4b1c      	ldr	r3, [pc, #112]	; (80049e8 <prvProcessExpiredTimer+0x7c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	3304      	adds	r3, #4
 8004984:	4618      	mov	r0, r3
 8004986:	f7fe fb55 	bl	8003034 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	2b01      	cmp	r3, #1
 8004990:	d122      	bne.n	80049d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	18d1      	adds	r1, r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	6978      	ldr	r0, [r7, #20]
 80049a0:	f000 f8c8 	bl	8004b34 <prvInsertTimerInActiveList>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049aa:	2300      	movs	r3, #0
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	2300      	movs	r3, #0
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	2100      	movs	r1, #0
 80049b4:	6978      	ldr	r0, [r7, #20]
 80049b6:	f7ff ff8b 	bl	80048d0 <xTimerGenericCommand>
 80049ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d10a      	bne.n	80049d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80049c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c6:	f383 8811 	msr	BASEPRI, r3
 80049ca:	f3bf 8f6f 	isb	sy
 80049ce:	f3bf 8f4f 	dsb	sy
 80049d2:	60fb      	str	r3, [r7, #12]
}
 80049d4:	bf00      	nop
 80049d6:	e7fe      	b.n	80049d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	6978      	ldr	r0, [r7, #20]
 80049de:	4798      	blx	r3
}
 80049e0:	bf00      	nop
 80049e2:	3718      	adds	r7, #24
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	20001010 	.word	0x20001010

080049ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b084      	sub	sp, #16
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80049f4:	f107 0308 	add.w	r3, r7, #8
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 f857 	bl	8004aac <prvGetNextExpireTime>
 80049fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4619      	mov	r1, r3
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f803 	bl	8004a10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a0a:	f000 f8d5 	bl	8004bb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a0e:	e7f1      	b.n	80049f4 <prvTimerTask+0x8>

08004a10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a1a:	f7ff fa4b 	bl	8003eb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f000 f866 	bl	8004af4 <prvSampleTimeNow>
 8004a28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d130      	bne.n	8004a92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10a      	bne.n	8004a4c <prvProcessTimerOrBlockTask+0x3c>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d806      	bhi.n	8004a4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a3e:	f7ff fa47 	bl	8003ed0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a42:	68f9      	ldr	r1, [r7, #12]
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff91 	bl	800496c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a4a:	e024      	b.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <prvProcessTimerOrBlockTask+0x90>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	bf0c      	ite	eq
 8004a5c:	2301      	moveq	r3, #1
 8004a5e:	2300      	movne	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004a64:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <prvProcessTimerOrBlockTask+0x94>)
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	f7fe ffb9 	bl	80039e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004a76:	f7ff fa2b 	bl	8003ed0 <xTaskResumeAll>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10a      	bne.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004a80:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <prvProcessTimerOrBlockTask+0x98>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
}
 8004a90:	e001      	b.n	8004a96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004a92:	f7ff fa1d 	bl	8003ed0 <xTaskResumeAll>
}
 8004a96:	bf00      	nop
 8004a98:	3710      	adds	r7, #16
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}
 8004a9e:	bf00      	nop
 8004aa0:	20001014 	.word	0x20001014
 8004aa4:	20001018 	.word	0x20001018
 8004aa8:	e000ed04 	.word	0xe000ed04

08004aac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004ab4:	4b0e      	ldr	r3, [pc, #56]	; (8004af0 <prvGetNextExpireTime+0x44>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	bf0c      	ite	eq
 8004abe:	2301      	moveq	r3, #1
 8004ac0:	2300      	movne	r3, #0
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d105      	bne.n	8004ade <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ad2:	4b07      	ldr	r3, [pc, #28]	; (8004af0 <prvGetNextExpireTime+0x44>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e001      	b.n	8004ae2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bc80      	pop	{r7}
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	20001010 	.word	0x20001010

08004af4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004afc:	f7ff fa86 	bl	800400c <xTaskGetTickCount>
 8004b00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b02:	4b0b      	ldr	r3, [pc, #44]	; (8004b30 <prvSampleTimeNow+0x3c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d205      	bcs.n	8004b18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b0c:	f000 f908 	bl	8004d20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
 8004b16:	e002      	b.n	8004b1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	; (8004b30 <prvSampleTimeNow+0x3c>)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b24:	68fb      	ldr	r3, [r7, #12]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20001020 	.word	0x20001020

08004b34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b086      	sub	sp, #24
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
 8004b40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68ba      	ldr	r2, [r7, #8]
 8004b4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d812      	bhi.n	8004b80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	1ad2      	subs	r2, r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d302      	bcc.n	8004b6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	e01b      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004b6e:	4b10      	ldr	r3, [pc, #64]	; (8004bb0 <prvInsertTimerInActiveList+0x7c>)
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3304      	adds	r3, #4
 8004b76:	4619      	mov	r1, r3
 8004b78:	4610      	mov	r0, r2
 8004b7a:	f7fe fa23 	bl	8002fc4 <vListInsert>
 8004b7e:	e012      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d206      	bcs.n	8004b96 <prvInsertTimerInActiveList+0x62>
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d302      	bcc.n	8004b96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004b90:	2301      	movs	r3, #1
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	e007      	b.n	8004ba6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <prvInsertTimerInActiveList+0x80>)
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f7fe fa0f 	bl	8002fc4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ba6:	697b      	ldr	r3, [r7, #20]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	20001014 	.word	0x20001014
 8004bb4:	20001010 	.word	0x20001010

08004bb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b08e      	sub	sp, #56	; 0x38
 8004bbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bbe:	e09d      	b.n	8004cfc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	da18      	bge.n	8004bf8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004bc6:	1d3b      	adds	r3, r7, #4
 8004bc8:	3304      	adds	r3, #4
 8004bca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d10a      	bne.n	8004be8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd6:	f383 8811 	msr	BASEPRI, r3
 8004bda:	f3bf 8f6f 	isb	sy
 8004bde:	f3bf 8f4f 	dsb	sy
 8004be2:	61fb      	str	r3, [r7, #28]
}
 8004be4:	bf00      	nop
 8004be6:	e7fe      	b.n	8004be6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bee:	6850      	ldr	r0, [r2, #4]
 8004bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf2:	6892      	ldr	r2, [r2, #8]
 8004bf4:	4611      	mov	r1, r2
 8004bf6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	db7d      	blt.n	8004cfa <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f7fe fa10 	bl	8003034 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c14:	463b      	mov	r3, r7
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7ff ff6c 	bl	8004af4 <prvSampleTimeNow>
 8004c1c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b09      	cmp	r3, #9
 8004c22:	d86b      	bhi.n	8004cfc <prvProcessReceivedCommands+0x144>
 8004c24:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <prvProcessReceivedCommands+0x74>)
 8004c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2a:	bf00      	nop
 8004c2c:	08004c55 	.word	0x08004c55
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c55 	.word	0x08004c55
 8004c38:	08004cfd 	.word	0x08004cfd
 8004c3c:	08004cb1 	.word	0x08004cb1
 8004c40:	08004ce9 	.word	0x08004ce9
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004c55 	.word	0x08004c55
 8004c4c:	08004cfd 	.word	0x08004cfd
 8004c50:	08004cb1 	.word	0x08004cb1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	18d1      	adds	r1, r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c62:	f7ff ff67 	bl	8004b34 <prvInsertTimerInActiveList>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d047      	beq.n	8004cfc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c72:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d13f      	bne.n	8004cfc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004c7c:	68ba      	ldr	r2, [r7, #8]
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	699b      	ldr	r3, [r3, #24]
 8004c82:	441a      	add	r2, r3
 8004c84:	2300      	movs	r3, #0
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c8e:	f7ff fe1f 	bl	80048d0 <xTimerGenericCommand>
 8004c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d130      	bne.n	8004cfc <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9e:	f383 8811 	msr	BASEPRI, r3
 8004ca2:	f3bf 8f6f 	isb	sy
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	61bb      	str	r3, [r7, #24]
}
 8004cac:	bf00      	nop
 8004cae:	e7fe      	b.n	8004cae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	e7fe      	b.n	8004cd2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	18d1      	adds	r1, r2, r3
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ce2:	f7ff ff27 	bl	8004b34 <prvInsertTimerInActiveList>
					break;
 8004ce6:	e009      	b.n	8004cfc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf4:	f000 fb6e 	bl	80053d4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004cf8:	e000      	b.n	8004cfc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004cfa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004cfc:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <prvProcessReceivedCommands+0x164>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	1d39      	adds	r1, r7, #4
 8004d02:	2200      	movs	r2, #0
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7fe fc57 	bl	80035b8 <xQueueReceive>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f47f af57 	bne.w	8004bc0 <prvProcessReceivedCommands+0x8>
	}
}
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	3730      	adds	r7, #48	; 0x30
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	20001018 	.word	0x20001018

08004d20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d26:	e045      	b.n	8004db4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d28:	4b2c      	ldr	r3, [pc, #176]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d32:	4b2a      	ldr	r3, [pc, #168]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe f977 	bl	8003034 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	69db      	ldr	r3, [r3, #28]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d12e      	bne.n	8004db4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d90e      	bls.n	8004d86 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	68fa      	ldr	r2, [r7, #12]
 8004d72:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f7fe f920 	bl	8002fc4 <vListInsert>
 8004d84:	e016      	b.n	8004db4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004d86:	2300      	movs	r3, #0
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	2100      	movs	r1, #0
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f7ff fd9d 	bl	80048d0 <xTimerGenericCommand>
 8004d96:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	603b      	str	r3, [r7, #0]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004db4:	4b09      	ldr	r3, [pc, #36]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1b4      	bne.n	8004d28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004dbe:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <prvSwitchTimerLists+0xc0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a04      	ldr	r2, [pc, #16]	; (8004ddc <prvSwitchTimerLists+0xbc>)
 8004dca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004dcc:	4a04      	ldr	r2, [pc, #16]	; (8004de0 <prvSwitchTimerLists+0xc0>)
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6013      	str	r3, [r2, #0]
}
 8004dd2:	bf00      	nop
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20001010 	.word	0x20001010
 8004de0:	20001014 	.word	0x20001014

08004de4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004dea:	f000 f92f 	bl	800504c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004dee:	4b15      	ldr	r3, [pc, #84]	; (8004e44 <prvCheckForValidListAndQueue+0x60>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d120      	bne.n	8004e38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004df6:	4814      	ldr	r0, [pc, #80]	; (8004e48 <prvCheckForValidListAndQueue+0x64>)
 8004df8:	f7fe f896 	bl	8002f28 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004dfc:	4813      	ldr	r0, [pc, #76]	; (8004e4c <prvCheckForValidListAndQueue+0x68>)
 8004dfe:	f7fe f893 	bl	8002f28 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <prvCheckForValidListAndQueue+0x6c>)
 8004e04:	4a10      	ldr	r2, [pc, #64]	; (8004e48 <prvCheckForValidListAndQueue+0x64>)
 8004e06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e08:	4b12      	ldr	r3, [pc, #72]	; (8004e54 <prvCheckForValidListAndQueue+0x70>)
 8004e0a:	4a10      	ldr	r2, [pc, #64]	; (8004e4c <prvCheckForValidListAndQueue+0x68>)
 8004e0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e0e:	2300      	movs	r3, #0
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4b11      	ldr	r3, [pc, #68]	; (8004e58 <prvCheckForValidListAndQueue+0x74>)
 8004e14:	4a11      	ldr	r2, [pc, #68]	; (8004e5c <prvCheckForValidListAndQueue+0x78>)
 8004e16:	2110      	movs	r1, #16
 8004e18:	200a      	movs	r0, #10
 8004e1a:	f7fe f99d 	bl	8003158 <xQueueGenericCreateStatic>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4a08      	ldr	r2, [pc, #32]	; (8004e44 <prvCheckForValidListAndQueue+0x60>)
 8004e22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e24:	4b07      	ldr	r3, [pc, #28]	; (8004e44 <prvCheckForValidListAndQueue+0x60>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d005      	beq.n	8004e38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <prvCheckForValidListAndQueue+0x60>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	490b      	ldr	r1, [pc, #44]	; (8004e60 <prvCheckForValidListAndQueue+0x7c>)
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe fdb0 	bl	8003998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e38:	f000 f938 	bl	80050ac <vPortExitCritical>
}
 8004e3c:	bf00      	nop
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	20001018 	.word	0x20001018
 8004e48:	20000fe8 	.word	0x20000fe8
 8004e4c:	20000ffc 	.word	0x20000ffc
 8004e50:	20001010 	.word	0x20001010
 8004e54:	20001014 	.word	0x20001014
 8004e58:	200010c4 	.word	0x200010c4
 8004e5c:	20001024 	.word	0x20001024
 8004e60:	0800571c 	.word	0x0800571c

08004e64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3b04      	subs	r3, #4
 8004e74:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004e7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3b04      	subs	r3, #4
 8004e82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0201 	bic.w	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	3b04      	subs	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e94:	4a08      	ldr	r2, [pc, #32]	; (8004eb8 <pxPortInitialiseStack+0x54>)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3b14      	subs	r3, #20
 8004e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3b20      	subs	r3, #32
 8004eaa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bc80      	pop	{r7}
 8004eb6:	4770      	bx	lr
 8004eb8:	08004ebd 	.word	0x08004ebd

08004ebc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ec6:	4b12      	ldr	r3, [pc, #72]	; (8004f10 <prvTaskExitError+0x54>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ece:	d00a      	beq.n	8004ee6 <prvTaskExitError+0x2a>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	e7fe      	b.n	8004ee4 <prvTaskExitError+0x28>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60bb      	str	r3, [r7, #8]
}
 8004ef8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004efa:	bf00      	nop
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d0fc      	beq.n	8004efc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f02:	bf00      	nop
 8004f04:	bf00      	nop
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bc80      	pop	{r7}
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	2000000c 	.word	0x2000000c
	...

08004f20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004f20:	4b07      	ldr	r3, [pc, #28]	; (8004f40 <pxCurrentTCBConst2>)
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6808      	ldr	r0, [r1, #0]
 8004f26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004f2a:	f380 8809 	msr	PSP, r0
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f380 8811 	msr	BASEPRI, r0
 8004f3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8004f3e:	4770      	bx	lr

08004f40 <pxCurrentTCBConst2>:
 8004f40:	20000ae8 	.word	0x20000ae8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004f48:	4806      	ldr	r0, [pc, #24]	; (8004f64 <prvPortStartFirstTask+0x1c>)
 8004f4a:	6800      	ldr	r0, [r0, #0]
 8004f4c:	6800      	ldr	r0, [r0, #0]
 8004f4e:	f380 8808 	msr	MSP, r0
 8004f52:	b662      	cpsie	i
 8004f54:	b661      	cpsie	f
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	df00      	svc	0
 8004f60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004f62:	bf00      	nop
 8004f64:	e000ed08 	.word	0xe000ed08

08004f68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004f6e:	4b32      	ldr	r3, [pc, #200]	; (8005038 <xPortStartScheduler+0xd0>)
 8004f70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	781b      	ldrb	r3, [r3, #0]
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	22ff      	movs	r2, #255	; 0xff
 8004f7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <xPortStartScheduler+0xd4>)
 8004f94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004f96:	4b2a      	ldr	r3, [pc, #168]	; (8005040 <xPortStartScheduler+0xd8>)
 8004f98:	2207      	movs	r2, #7
 8004f9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f9c:	e009      	b.n	8004fb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004f9e:	4b28      	ldr	r3, [pc, #160]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	4a26      	ldr	r2, [pc, #152]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fa6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004fb2:	78fb      	ldrb	r3, [r7, #3]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fba:	2b80      	cmp	r3, #128	; 0x80
 8004fbc:	d0ef      	beq.n	8004f9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004fbe:	4b20      	ldr	r3, [pc, #128]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f1c3 0307 	rsb	r3, r3, #7
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d00a      	beq.n	8004fe0 <xPortStartScheduler+0x78>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	60bb      	str	r3, [r7, #8]
}
 8004fdc:	bf00      	nop
 8004fde:	e7fe      	b.n	8004fde <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004fe0:	4b17      	ldr	r3, [pc, #92]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	4a16      	ldr	r2, [pc, #88]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fe8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <xPortStartScheduler+0xd8>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ff2:	4a13      	ldr	r2, [pc, #76]	; (8005040 <xPortStartScheduler+0xd8>)
 8004ff4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ffe:	4b11      	ldr	r3, [pc, #68]	; (8005044 <xPortStartScheduler+0xdc>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <xPortStartScheduler+0xdc>)
 8005004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005008:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800500a:	4b0e      	ldr	r3, [pc, #56]	; (8005044 <xPortStartScheduler+0xdc>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <xPortStartScheduler+0xdc>)
 8005010:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005014:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005016:	f000 f8b9 	bl	800518c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <xPortStartScheduler+0xe0>)
 800501c:	2200      	movs	r2, #0
 800501e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005020:	f7ff ff92 	bl	8004f48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005024:	f7ff f8be 	bl	80041a4 <vTaskSwitchContext>
	prvTaskExitError();
 8005028:	f7ff ff48 	bl	8004ebc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	e000e400 	.word	0xe000e400
 800503c:	20001114 	.word	0x20001114
 8005040:	20001118 	.word	0x20001118
 8005044:	e000ed20 	.word	0xe000ed20
 8005048:	2000000c 	.word	0x2000000c

0800504c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
	__asm volatile
 8005052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005056:	f383 8811 	msr	BASEPRI, r3
 800505a:	f3bf 8f6f 	isb	sy
 800505e:	f3bf 8f4f 	dsb	sy
 8005062:	607b      	str	r3, [r7, #4]
}
 8005064:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005066:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <vPortEnterCritical+0x58>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	3301      	adds	r3, #1
 800506c:	4a0d      	ldr	r2, [pc, #52]	; (80050a4 <vPortEnterCritical+0x58>)
 800506e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005070:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <vPortEnterCritical+0x58>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d10f      	bne.n	8005098 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005078:	4b0b      	ldr	r3, [pc, #44]	; (80050a8 <vPortEnterCritical+0x5c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <vPortEnterCritical+0x4c>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	603b      	str	r3, [r7, #0]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <vPortEnterCritical+0x4a>
	}
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	2000000c 	.word	0x2000000c
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80050b2:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <vPortExitCritical+0x4c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10a      	bne.n	80050d0 <vPortExitCritical+0x24>
	__asm volatile
 80050ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050be:	f383 8811 	msr	BASEPRI, r3
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	f3bf 8f4f 	dsb	sy
 80050ca:	607b      	str	r3, [r7, #4]
}
 80050cc:	bf00      	nop
 80050ce:	e7fe      	b.n	80050ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <vPortExitCritical+0x4c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	3b01      	subs	r3, #1
 80050d6:	4a08      	ldr	r2, [pc, #32]	; (80050f8 <vPortExitCritical+0x4c>)
 80050d8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80050da:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <vPortExitCritical+0x4c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d105      	bne.n	80050ee <vPortExitCritical+0x42>
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f383 8811 	msr	BASEPRI, r3
}
 80050ec:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80050ee:	bf00      	nop
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bc80      	pop	{r7}
 80050f6:	4770      	bx	lr
 80050f8:	2000000c 	.word	0x2000000c
 80050fc:	00000000 	.word	0x00000000

08005100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005100:	f3ef 8009 	mrs	r0, PSP
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	4b0d      	ldr	r3, [pc, #52]	; (8005140 <pxCurrentTCBConst>)
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005110:	6010      	str	r0, [r2, #0]
 8005112:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005116:	f04f 0050 	mov.w	r0, #80	; 0x50
 800511a:	f380 8811 	msr	BASEPRI, r0
 800511e:	f7ff f841 	bl	80041a4 <vTaskSwitchContext>
 8005122:	f04f 0000 	mov.w	r0, #0
 8005126:	f380 8811 	msr	BASEPRI, r0
 800512a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800512e:	6819      	ldr	r1, [r3, #0]
 8005130:	6808      	ldr	r0, [r1, #0]
 8005132:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005136:	f380 8809 	msr	PSP, r0
 800513a:	f3bf 8f6f 	isb	sy
 800513e:	4770      	bx	lr

08005140 <pxCurrentTCBConst>:
 8005140:	20000ae8 	.word	0x20000ae8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	607b      	str	r3, [r7, #4]
}
 8005160:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005162:	f7fe ff61 	bl	8004028 <xTaskIncrementTick>
 8005166:	4603      	mov	r3, r0
 8005168:	2b00      	cmp	r3, #0
 800516a:	d003      	beq.n	8005174 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800516c:	4b06      	ldr	r3, [pc, #24]	; (8005188 <SysTick_Handler+0x40>)
 800516e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	2300      	movs	r3, #0
 8005176:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	f383 8811 	msr	BASEPRI, r3
}
 800517e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005180:	bf00      	nop
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <vPortSetupTimerInterrupt+0x30>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <vPortSetupTimerInterrupt+0x34>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <vPortSetupTimerInterrupt+0x38>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a09      	ldr	r2, [pc, #36]	; (80051c8 <vPortSetupTimerInterrupt+0x3c>)
 80051a2:	fba2 2303 	umull	r2, r3, r2, r3
 80051a6:	099b      	lsrs	r3, r3, #6
 80051a8:	4a08      	ldr	r2, [pc, #32]	; (80051cc <vPortSetupTimerInterrupt+0x40>)
 80051aa:	3b01      	subs	r3, #1
 80051ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80051ae:	4b03      	ldr	r3, [pc, #12]	; (80051bc <vPortSetupTimerInterrupt+0x30>)
 80051b0:	2207      	movs	r2, #7
 80051b2:	601a      	str	r2, [r3, #0]
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bc80      	pop	{r7}
 80051ba:	4770      	bx	lr
 80051bc:	e000e010 	.word	0xe000e010
 80051c0:	e000e018 	.word	0xe000e018
 80051c4:	20000000 	.word	0x20000000
 80051c8:	10624dd3 	.word	0x10624dd3
 80051cc:	e000e014 	.word	0xe000e014

080051d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80051d6:	f3ef 8305 	mrs	r3, IPSR
 80051da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b0f      	cmp	r3, #15
 80051e0:	d914      	bls.n	800520c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80051e2:	4a16      	ldr	r2, [pc, #88]	; (800523c <vPortValidateInterruptPriority+0x6c>)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80051ec:	4b14      	ldr	r3, [pc, #80]	; (8005240 <vPortValidateInterruptPriority+0x70>)
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	7afa      	ldrb	r2, [r7, #11]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d20a      	bcs.n	800520c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80051f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051fa:	f383 8811 	msr	BASEPRI, r3
 80051fe:	f3bf 8f6f 	isb	sy
 8005202:	f3bf 8f4f 	dsb	sy
 8005206:	607b      	str	r3, [r7, #4]
}
 8005208:	bf00      	nop
 800520a:	e7fe      	b.n	800520a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800520c:	4b0d      	ldr	r3, [pc, #52]	; (8005244 <vPortValidateInterruptPriority+0x74>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005214:	4b0c      	ldr	r3, [pc, #48]	; (8005248 <vPortValidateInterruptPriority+0x78>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d90a      	bls.n	8005232 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800521c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005220:	f383 8811 	msr	BASEPRI, r3
 8005224:	f3bf 8f6f 	isb	sy
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	603b      	str	r3, [r7, #0]
}
 800522e:	bf00      	nop
 8005230:	e7fe      	b.n	8005230 <vPortValidateInterruptPriority+0x60>
	}
 8005232:	bf00      	nop
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr
 800523c:	e000e3f0 	.word	0xe000e3f0
 8005240:	20001114 	.word	0x20001114
 8005244:	e000ed0c 	.word	0xe000ed0c
 8005248:	20001118 	.word	0x20001118

0800524c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b08a      	sub	sp, #40	; 0x28
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005258:	f7fe fe2c 	bl	8003eb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800525c:	4b58      	ldr	r3, [pc, #352]	; (80053c0 <pvPortMalloc+0x174>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005264:	f000 f910 	bl	8005488 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005268:	4b56      	ldr	r3, [pc, #344]	; (80053c4 <pvPortMalloc+0x178>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 808e 	bne.w	8005392 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d01d      	beq.n	80052b8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800527c:	2208      	movs	r2, #8
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4413      	add	r3, r2
 8005282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b00      	cmp	r3, #0
 800528c:	d014      	beq.n	80052b8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f023 0307 	bic.w	r3, r3, #7
 8005294:	3308      	adds	r3, #8
 8005296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <pvPortMalloc+0x6c>
	__asm volatile
 80052a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a6:	f383 8811 	msr	BASEPRI, r3
 80052aa:	f3bf 8f6f 	isb	sy
 80052ae:	f3bf 8f4f 	dsb	sy
 80052b2:	617b      	str	r3, [r7, #20]
}
 80052b4:	bf00      	nop
 80052b6:	e7fe      	b.n	80052b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d069      	beq.n	8005392 <pvPortMalloc+0x146>
 80052be:	4b42      	ldr	r3, [pc, #264]	; (80053c8 <pvPortMalloc+0x17c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d864      	bhi.n	8005392 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80052c8:	4b40      	ldr	r3, [pc, #256]	; (80053cc <pvPortMalloc+0x180>)
 80052ca:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80052cc:	4b3f      	ldr	r3, [pc, #252]	; (80053cc <pvPortMalloc+0x180>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052d2:	e004      	b.n	80052de <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	687a      	ldr	r2, [r7, #4]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d903      	bls.n	80052f0 <pvPortMalloc+0xa4>
 80052e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1f1      	bne.n	80052d4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80052f0:	4b33      	ldr	r3, [pc, #204]	; (80053c0 <pvPortMalloc+0x174>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d04b      	beq.n	8005392 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80052fa:	6a3b      	ldr	r3, [r7, #32]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2208      	movs	r2, #8
 8005300:	4413      	add	r3, r2
 8005302:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	2308      	movs	r3, #8
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	429a      	cmp	r2, r3
 800531a:	d91f      	bls.n	800535c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800531c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4413      	add	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00a      	beq.n	8005344 <pvPortMalloc+0xf8>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	613b      	str	r3, [r7, #16]
}
 8005340:	bf00      	nop
 8005342:	e7fe      	b.n	8005342 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	1ad2      	subs	r2, r2, r3
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005356:	69b8      	ldr	r0, [r7, #24]
 8005358:	f000 f8f8 	bl	800554c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800535c:	4b1a      	ldr	r3, [pc, #104]	; (80053c8 <pvPortMalloc+0x17c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a18      	ldr	r2, [pc, #96]	; (80053c8 <pvPortMalloc+0x17c>)
 8005368:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800536a:	4b17      	ldr	r3, [pc, #92]	; (80053c8 <pvPortMalloc+0x17c>)
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <pvPortMalloc+0x184>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d203      	bcs.n	800537e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005376:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <pvPortMalloc+0x17c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a15      	ldr	r2, [pc, #84]	; (80053d0 <pvPortMalloc+0x184>)
 800537c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800537e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	4b10      	ldr	r3, [pc, #64]	; (80053c4 <pvPortMalloc+0x178>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	431a      	orrs	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005392:	f7fe fd9d 	bl	8003ed0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00a      	beq.n	80053b6 <pvPortMalloc+0x16a>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	60fb      	str	r3, [r7, #12]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <pvPortMalloc+0x168>
	return pvReturn;
 80053b6:	69fb      	ldr	r3, [r7, #28]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3728      	adds	r7, #40	; 0x28
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20001d24 	.word	0x20001d24
 80053c4:	20001d30 	.word	0x20001d30
 80053c8:	20001d28 	.word	0x20001d28
 80053cc:	20001d1c 	.word	0x20001d1c
 80053d0:	20001d2c 	.word	0x20001d2c

080053d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b086      	sub	sp, #24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d048      	beq.n	8005478 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80053e6:	2308      	movs	r3, #8
 80053e8:	425b      	negs	r3, r3
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4413      	add	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	4b21      	ldr	r3, [pc, #132]	; (8005480 <vPortFree+0xac>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4013      	ands	r3, r2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10a      	bne.n	8005418 <vPortFree+0x44>
	__asm volatile
 8005402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005406:	f383 8811 	msr	BASEPRI, r3
 800540a:	f3bf 8f6f 	isb	sy
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	60fb      	str	r3, [r7, #12]
}
 8005414:	bf00      	nop
 8005416:	e7fe      	b.n	8005416 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <vPortFree+0x62>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	60bb      	str	r3, [r7, #8]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	4b11      	ldr	r3, [pc, #68]	; (8005480 <vPortFree+0xac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4013      	ands	r3, r2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d019      	beq.n	8005478 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d115      	bne.n	8005478 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <vPortFree+0xac>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	43db      	mvns	r3, r3
 8005456:	401a      	ands	r2, r3
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800545c:	f7fe fd2a 	bl	8003eb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	4b07      	ldr	r3, [pc, #28]	; (8005484 <vPortFree+0xb0>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4413      	add	r3, r2
 800546a:	4a06      	ldr	r2, [pc, #24]	; (8005484 <vPortFree+0xb0>)
 800546c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800546e:	6938      	ldr	r0, [r7, #16]
 8005470:	f000 f86c 	bl	800554c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005474:	f7fe fd2c 	bl	8003ed0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005478:	bf00      	nop
 800547a:	3718      	adds	r7, #24
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20001d30 	.word	0x20001d30
 8005484:	20001d28 	.word	0x20001d28

08005488 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800548e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005492:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005494:	4b27      	ldr	r3, [pc, #156]	; (8005534 <prvHeapInit+0xac>)
 8005496:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 0307 	and.w	r3, r3, #7
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00c      	beq.n	80054bc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	3307      	adds	r3, #7
 80054a6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0307 	bic.w	r3, r3, #7
 80054ae:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	4a1f      	ldr	r2, [pc, #124]	; (8005534 <prvHeapInit+0xac>)
 80054b8:	4413      	add	r3, r2
 80054ba:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80054c0:	4a1d      	ldr	r2, [pc, #116]	; (8005538 <prvHeapInit+0xb0>)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <prvHeapInit+0xb0>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	4413      	add	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80054d4:	2208      	movs	r2, #8
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0307 	bic.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4a15      	ldr	r2, [pc, #84]	; (800553c <prvHeapInit+0xb4>)
 80054e8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80054ea:	4b14      	ldr	r3, [pc, #80]	; (800553c <prvHeapInit+0xb4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2200      	movs	r2, #0
 80054f0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80054f2:	4b12      	ldr	r3, [pc, #72]	; (800553c <prvHeapInit+0xb4>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2200      	movs	r2, #0
 80054f8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	1ad2      	subs	r2, r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005508:	4b0c      	ldr	r3, [pc, #48]	; (800553c <prvHeapInit+0xb4>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4a0a      	ldr	r2, [pc, #40]	; (8005540 <prvHeapInit+0xb8>)
 8005516:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <prvHeapInit+0xbc>)
 800551e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <prvHeapInit+0xc0>)
 8005522:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005526:	601a      	str	r2, [r3, #0]
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	bc80      	pop	{r7}
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	2000111c 	.word	0x2000111c
 8005538:	20001d1c 	.word	0x20001d1c
 800553c:	20001d24 	.word	0x20001d24
 8005540:	20001d2c 	.word	0x20001d2c
 8005544:	20001d28 	.word	0x20001d28
 8005548:	20001d30 	.word	0x20001d30

0800554c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005554:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <prvInsertBlockIntoFreeList+0xa8>)
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	e002      	b.n	8005560 <prvInsertBlockIntoFreeList+0x14>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	60fb      	str	r3, [r7, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	429a      	cmp	r2, r3
 8005568:	d8f7      	bhi.n	800555a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	4413      	add	r3, r2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d108      	bne.n	800558e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	685a      	ldr	r2, [r3, #4]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	441a      	add	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d118      	bne.n	80055d4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	4b14      	ldr	r3, [pc, #80]	; (80055f8 <prvInsertBlockIntoFreeList+0xac>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d00d      	beq.n	80055ca <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	441a      	add	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]
 80055c8:	e008      	b.n	80055dc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <prvInsertBlockIntoFreeList+0xac>)
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	601a      	str	r2, [r3, #0]
 80055d2:	e003      	b.n	80055dc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80055dc:	68fa      	ldr	r2, [r7, #12]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d002      	beq.n	80055ea <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055ea:	bf00      	nop
 80055ec:	3714      	adds	r7, #20
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bc80      	pop	{r7}
 80055f2:	4770      	bx	lr
 80055f4:	20001d1c 	.word	0x20001d1c
 80055f8:	20001d24 	.word	0x20001d24

080055fc <__libc_init_array>:
 80055fc:	b570      	push	{r4, r5, r6, lr}
 80055fe:	2600      	movs	r6, #0
 8005600:	4d0c      	ldr	r5, [pc, #48]	; (8005634 <__libc_init_array+0x38>)
 8005602:	4c0d      	ldr	r4, [pc, #52]	; (8005638 <__libc_init_array+0x3c>)
 8005604:	1b64      	subs	r4, r4, r5
 8005606:	10a4      	asrs	r4, r4, #2
 8005608:	42a6      	cmp	r6, r4
 800560a:	d109      	bne.n	8005620 <__libc_init_array+0x24>
 800560c:	f000 f842 	bl	8005694 <_init>
 8005610:	2600      	movs	r6, #0
 8005612:	4d0a      	ldr	r5, [pc, #40]	; (800563c <__libc_init_array+0x40>)
 8005614:	4c0a      	ldr	r4, [pc, #40]	; (8005640 <__libc_init_array+0x44>)
 8005616:	1b64      	subs	r4, r4, r5
 8005618:	10a4      	asrs	r4, r4, #2
 800561a:	42a6      	cmp	r6, r4
 800561c:	d105      	bne.n	800562a <__libc_init_array+0x2e>
 800561e:	bd70      	pop	{r4, r5, r6, pc}
 8005620:	f855 3b04 	ldr.w	r3, [r5], #4
 8005624:	4798      	blx	r3
 8005626:	3601      	adds	r6, #1
 8005628:	e7ee      	b.n	8005608 <__libc_init_array+0xc>
 800562a:	f855 3b04 	ldr.w	r3, [r5], #4
 800562e:	4798      	blx	r3
 8005630:	3601      	adds	r6, #1
 8005632:	e7f2      	b.n	800561a <__libc_init_array+0x1e>
 8005634:	08005784 	.word	0x08005784
 8005638:	08005784 	.word	0x08005784
 800563c:	08005784 	.word	0x08005784
 8005640:	08005788 	.word	0x08005788

08005644 <memcpy>:
 8005644:	440a      	add	r2, r1
 8005646:	4291      	cmp	r1, r2
 8005648:	f100 33ff 	add.w	r3, r0, #4294967295
 800564c:	d100      	bne.n	8005650 <memcpy+0xc>
 800564e:	4770      	bx	lr
 8005650:	b510      	push	{r4, lr}
 8005652:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005656:	4291      	cmp	r1, r2
 8005658:	f803 4f01 	strb.w	r4, [r3, #1]!
 800565c:	d1f9      	bne.n	8005652 <memcpy+0xe>
 800565e:	bd10      	pop	{r4, pc}

08005660 <memset>:
 8005660:	4603      	mov	r3, r0
 8005662:	4402      	add	r2, r0
 8005664:	4293      	cmp	r3, r2
 8005666:	d100      	bne.n	800566a <memset+0xa>
 8005668:	4770      	bx	lr
 800566a:	f803 1b01 	strb.w	r1, [r3], #1
 800566e:	e7f9      	b.n	8005664 <memset+0x4>

08005670 <strncmp>:
 8005670:	b510      	push	{r4, lr}
 8005672:	b16a      	cbz	r2, 8005690 <strncmp+0x20>
 8005674:	3901      	subs	r1, #1
 8005676:	1884      	adds	r4, r0, r2
 8005678:	f810 3b01 	ldrb.w	r3, [r0], #1
 800567c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <strncmp+0x1c>
 8005684:	42a0      	cmp	r0, r4
 8005686:	d001      	beq.n	800568c <strncmp+0x1c>
 8005688:	2b00      	cmp	r3, #0
 800568a:	d1f5      	bne.n	8005678 <strncmp+0x8>
 800568c:	1a98      	subs	r0, r3, r2
 800568e:	bd10      	pop	{r4, pc}
 8005690:	4610      	mov	r0, r2
 8005692:	e7fc      	b.n	800568e <strncmp+0x1e>

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
